
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e28  080101c0  080101c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08011fe8  08011fe8  00011fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012030  08012030  00012030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012038  08012038  00012038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801203c  0801203c  0001203c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08012040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00004000  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000400c  2000400c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012acd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002c58  00000000  00000000  00032b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007a9d  00000000  00000000  00035761  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c38  00000000  00000000  0003d200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  0003de38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005d40  00000000  00000000  0003ecb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000527c  00000000  00000000  000449f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00049c74  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000022ec  00000000  00000000  00049cf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080101c0 <__do_global_dtors_aux>:
 80101c0:	b510      	push	{r4, lr}
 80101c2:	4c05      	ldr	r4, [pc, #20]	; (80101d8 <__do_global_dtors_aux+0x18>)
 80101c4:	7823      	ldrb	r3, [r4, #0]
 80101c6:	b933      	cbnz	r3, 80101d6 <__do_global_dtors_aux+0x16>
 80101c8:	4b04      	ldr	r3, [pc, #16]	; (80101dc <__do_global_dtors_aux+0x1c>)
 80101ca:	b113      	cbz	r3, 80101d2 <__do_global_dtors_aux+0x12>
 80101cc:	4804      	ldr	r0, [pc, #16]	; (80101e0 <__do_global_dtors_aux+0x20>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	2301      	movs	r3, #1
 80101d4:	7023      	strb	r3, [r4, #0]
 80101d6:	bd10      	pop	{r4, pc}
 80101d8:	2000000c 	.word	0x2000000c
 80101dc:	00000000 	.word	0x00000000
 80101e0:	08011fd0 	.word	0x08011fd0

080101e4 <frame_dummy>:
 80101e4:	b508      	push	{r3, lr}
 80101e6:	4b03      	ldr	r3, [pc, #12]	; (80101f4 <frame_dummy+0x10>)
 80101e8:	b11b      	cbz	r3, 80101f2 <frame_dummy+0xe>
 80101ea:	4903      	ldr	r1, [pc, #12]	; (80101f8 <frame_dummy+0x14>)
 80101ec:	4803      	ldr	r0, [pc, #12]	; (80101fc <frame_dummy+0x18>)
 80101ee:	f3af 8000 	nop.w
 80101f2:	bd08      	pop	{r3, pc}
 80101f4:	00000000 	.word	0x00000000
 80101f8:	20000010 	.word	0x20000010
 80101fc:	08011fd0 	.word	0x08011fd0

08010200 <__aeabi_uldivmod>:
 8010200:	b953      	cbnz	r3, 8010218 <__aeabi_uldivmod+0x18>
 8010202:	b94a      	cbnz	r2, 8010218 <__aeabi_uldivmod+0x18>
 8010204:	2900      	cmp	r1, #0
 8010206:	bf08      	it	eq
 8010208:	2800      	cmpeq	r0, #0
 801020a:	bf1c      	itt	ne
 801020c:	f04f 31ff 	movne.w	r1, #4294967295
 8010210:	f04f 30ff 	movne.w	r0, #4294967295
 8010214:	f000 b97a 	b.w	801050c <__aeabi_idiv0>
 8010218:	f1ad 0c08 	sub.w	ip, sp, #8
 801021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010220:	f000 f806 	bl	8010230 <__udivmoddi4>
 8010224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801022c:	b004      	add	sp, #16
 801022e:	4770      	bx	lr

08010230 <__udivmoddi4>:
 8010230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010234:	468c      	mov	ip, r1
 8010236:	460d      	mov	r5, r1
 8010238:	4604      	mov	r4, r0
 801023a:	9e08      	ldr	r6, [sp, #32]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d151      	bne.n	80102e4 <__udivmoddi4+0xb4>
 8010240:	428a      	cmp	r2, r1
 8010242:	4617      	mov	r7, r2
 8010244:	d96d      	bls.n	8010322 <__udivmoddi4+0xf2>
 8010246:	fab2 fe82 	clz	lr, r2
 801024a:	f1be 0f00 	cmp.w	lr, #0
 801024e:	d00b      	beq.n	8010268 <__udivmoddi4+0x38>
 8010250:	f1ce 0c20 	rsb	ip, lr, #32
 8010254:	fa01 f50e 	lsl.w	r5, r1, lr
 8010258:	fa20 fc0c 	lsr.w	ip, r0, ip
 801025c:	fa02 f70e 	lsl.w	r7, r2, lr
 8010260:	ea4c 0c05 	orr.w	ip, ip, r5
 8010264:	fa00 f40e 	lsl.w	r4, r0, lr
 8010268:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 801026c:	0c25      	lsrs	r5, r4, #16
 801026e:	fbbc f8fa 	udiv	r8, ip, sl
 8010272:	fa1f f987 	uxth.w	r9, r7
 8010276:	fb0a cc18 	mls	ip, sl, r8, ip
 801027a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 801027e:	fb08 f309 	mul.w	r3, r8, r9
 8010282:	42ab      	cmp	r3, r5
 8010284:	d90a      	bls.n	801029c <__udivmoddi4+0x6c>
 8010286:	19ed      	adds	r5, r5, r7
 8010288:	f108 32ff 	add.w	r2, r8, #4294967295
 801028c:	f080 8123 	bcs.w	80104d6 <__udivmoddi4+0x2a6>
 8010290:	42ab      	cmp	r3, r5
 8010292:	f240 8120 	bls.w	80104d6 <__udivmoddi4+0x2a6>
 8010296:	f1a8 0802 	sub.w	r8, r8, #2
 801029a:	443d      	add	r5, r7
 801029c:	1aed      	subs	r5, r5, r3
 801029e:	b2a4      	uxth	r4, r4
 80102a0:	fbb5 f0fa 	udiv	r0, r5, sl
 80102a4:	fb0a 5510 	mls	r5, sl, r0, r5
 80102a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80102ac:	fb00 f909 	mul.w	r9, r0, r9
 80102b0:	45a1      	cmp	r9, r4
 80102b2:	d909      	bls.n	80102c8 <__udivmoddi4+0x98>
 80102b4:	19e4      	adds	r4, r4, r7
 80102b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80102ba:	f080 810a 	bcs.w	80104d2 <__udivmoddi4+0x2a2>
 80102be:	45a1      	cmp	r9, r4
 80102c0:	f240 8107 	bls.w	80104d2 <__udivmoddi4+0x2a2>
 80102c4:	3802      	subs	r0, #2
 80102c6:	443c      	add	r4, r7
 80102c8:	eba4 0409 	sub.w	r4, r4, r9
 80102cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80102d0:	2100      	movs	r1, #0
 80102d2:	2e00      	cmp	r6, #0
 80102d4:	d061      	beq.n	801039a <__udivmoddi4+0x16a>
 80102d6:	fa24 f40e 	lsr.w	r4, r4, lr
 80102da:	2300      	movs	r3, #0
 80102dc:	6034      	str	r4, [r6, #0]
 80102de:	6073      	str	r3, [r6, #4]
 80102e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102e4:	428b      	cmp	r3, r1
 80102e6:	d907      	bls.n	80102f8 <__udivmoddi4+0xc8>
 80102e8:	2e00      	cmp	r6, #0
 80102ea:	d054      	beq.n	8010396 <__udivmoddi4+0x166>
 80102ec:	2100      	movs	r1, #0
 80102ee:	e886 0021 	stmia.w	r6, {r0, r5}
 80102f2:	4608      	mov	r0, r1
 80102f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102f8:	fab3 f183 	clz	r1, r3
 80102fc:	2900      	cmp	r1, #0
 80102fe:	f040 808e 	bne.w	801041e <__udivmoddi4+0x1ee>
 8010302:	42ab      	cmp	r3, r5
 8010304:	d302      	bcc.n	801030c <__udivmoddi4+0xdc>
 8010306:	4282      	cmp	r2, r0
 8010308:	f200 80fa 	bhi.w	8010500 <__udivmoddi4+0x2d0>
 801030c:	1a84      	subs	r4, r0, r2
 801030e:	eb65 0503 	sbc.w	r5, r5, r3
 8010312:	2001      	movs	r0, #1
 8010314:	46ac      	mov	ip, r5
 8010316:	2e00      	cmp	r6, #0
 8010318:	d03f      	beq.n	801039a <__udivmoddi4+0x16a>
 801031a:	e886 1010 	stmia.w	r6, {r4, ip}
 801031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010322:	b912      	cbnz	r2, 801032a <__udivmoddi4+0xfa>
 8010324:	2701      	movs	r7, #1
 8010326:	fbb7 f7f2 	udiv	r7, r7, r2
 801032a:	fab7 fe87 	clz	lr, r7
 801032e:	f1be 0f00 	cmp.w	lr, #0
 8010332:	d134      	bne.n	801039e <__udivmoddi4+0x16e>
 8010334:	1beb      	subs	r3, r5, r7
 8010336:	0c3a      	lsrs	r2, r7, #16
 8010338:	fa1f fc87 	uxth.w	ip, r7
 801033c:	2101      	movs	r1, #1
 801033e:	fbb3 f8f2 	udiv	r8, r3, r2
 8010342:	0c25      	lsrs	r5, r4, #16
 8010344:	fb02 3318 	mls	r3, r2, r8, r3
 8010348:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 801034c:	fb0c f308 	mul.w	r3, ip, r8
 8010350:	42ab      	cmp	r3, r5
 8010352:	d907      	bls.n	8010364 <__udivmoddi4+0x134>
 8010354:	19ed      	adds	r5, r5, r7
 8010356:	f108 30ff 	add.w	r0, r8, #4294967295
 801035a:	d202      	bcs.n	8010362 <__udivmoddi4+0x132>
 801035c:	42ab      	cmp	r3, r5
 801035e:	f200 80d1 	bhi.w	8010504 <__udivmoddi4+0x2d4>
 8010362:	4680      	mov	r8, r0
 8010364:	1aed      	subs	r5, r5, r3
 8010366:	b2a3      	uxth	r3, r4
 8010368:	fbb5 f0f2 	udiv	r0, r5, r2
 801036c:	fb02 5510 	mls	r5, r2, r0, r5
 8010370:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8010374:	fb0c fc00 	mul.w	ip, ip, r0
 8010378:	45a4      	cmp	ip, r4
 801037a:	d907      	bls.n	801038c <__udivmoddi4+0x15c>
 801037c:	19e4      	adds	r4, r4, r7
 801037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010382:	d202      	bcs.n	801038a <__udivmoddi4+0x15a>
 8010384:	45a4      	cmp	ip, r4
 8010386:	f200 80b8 	bhi.w	80104fa <__udivmoddi4+0x2ca>
 801038a:	4618      	mov	r0, r3
 801038c:	eba4 040c 	sub.w	r4, r4, ip
 8010390:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8010394:	e79d      	b.n	80102d2 <__udivmoddi4+0xa2>
 8010396:	4631      	mov	r1, r6
 8010398:	4630      	mov	r0, r6
 801039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801039e:	f1ce 0420 	rsb	r4, lr, #32
 80103a2:	fa05 f30e 	lsl.w	r3, r5, lr
 80103a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80103aa:	fa20 f804 	lsr.w	r8, r0, r4
 80103ae:	0c3a      	lsrs	r2, r7, #16
 80103b0:	fa25 f404 	lsr.w	r4, r5, r4
 80103b4:	ea48 0803 	orr.w	r8, r8, r3
 80103b8:	fbb4 f1f2 	udiv	r1, r4, r2
 80103bc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80103c0:	fb02 4411 	mls	r4, r2, r1, r4
 80103c4:	fa1f fc87 	uxth.w	ip, r7
 80103c8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80103cc:	fb01 f30c 	mul.w	r3, r1, ip
 80103d0:	42ab      	cmp	r3, r5
 80103d2:	fa00 f40e 	lsl.w	r4, r0, lr
 80103d6:	d909      	bls.n	80103ec <__udivmoddi4+0x1bc>
 80103d8:	19ed      	adds	r5, r5, r7
 80103da:	f101 30ff 	add.w	r0, r1, #4294967295
 80103de:	f080 808a 	bcs.w	80104f6 <__udivmoddi4+0x2c6>
 80103e2:	42ab      	cmp	r3, r5
 80103e4:	f240 8087 	bls.w	80104f6 <__udivmoddi4+0x2c6>
 80103e8:	3902      	subs	r1, #2
 80103ea:	443d      	add	r5, r7
 80103ec:	1aeb      	subs	r3, r5, r3
 80103ee:	fa1f f588 	uxth.w	r5, r8
 80103f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80103f6:	fb02 3310 	mls	r3, r2, r0, r3
 80103fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80103fe:	fb00 f30c 	mul.w	r3, r0, ip
 8010402:	42ab      	cmp	r3, r5
 8010404:	d907      	bls.n	8010416 <__udivmoddi4+0x1e6>
 8010406:	19ed      	adds	r5, r5, r7
 8010408:	f100 38ff 	add.w	r8, r0, #4294967295
 801040c:	d26f      	bcs.n	80104ee <__udivmoddi4+0x2be>
 801040e:	42ab      	cmp	r3, r5
 8010410:	d96d      	bls.n	80104ee <__udivmoddi4+0x2be>
 8010412:	3802      	subs	r0, #2
 8010414:	443d      	add	r5, r7
 8010416:	1aeb      	subs	r3, r5, r3
 8010418:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 801041c:	e78f      	b.n	801033e <__udivmoddi4+0x10e>
 801041e:	f1c1 0720 	rsb	r7, r1, #32
 8010422:	fa22 f807 	lsr.w	r8, r2, r7
 8010426:	408b      	lsls	r3, r1
 8010428:	fa05 f401 	lsl.w	r4, r5, r1
 801042c:	ea48 0303 	orr.w	r3, r8, r3
 8010430:	fa20 fe07 	lsr.w	lr, r0, r7
 8010434:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8010438:	40fd      	lsrs	r5, r7
 801043a:	ea4e 0e04 	orr.w	lr, lr, r4
 801043e:	fbb5 f9fc 	udiv	r9, r5, ip
 8010442:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8010446:	fb0c 5519 	mls	r5, ip, r9, r5
 801044a:	fa1f f883 	uxth.w	r8, r3
 801044e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8010452:	fb09 f408 	mul.w	r4, r9, r8
 8010456:	42ac      	cmp	r4, r5
 8010458:	fa02 f201 	lsl.w	r2, r2, r1
 801045c:	fa00 fa01 	lsl.w	sl, r0, r1
 8010460:	d908      	bls.n	8010474 <__udivmoddi4+0x244>
 8010462:	18ed      	adds	r5, r5, r3
 8010464:	f109 30ff 	add.w	r0, r9, #4294967295
 8010468:	d243      	bcs.n	80104f2 <__udivmoddi4+0x2c2>
 801046a:	42ac      	cmp	r4, r5
 801046c:	d941      	bls.n	80104f2 <__udivmoddi4+0x2c2>
 801046e:	f1a9 0902 	sub.w	r9, r9, #2
 8010472:	441d      	add	r5, r3
 8010474:	1b2d      	subs	r5, r5, r4
 8010476:	fa1f fe8e 	uxth.w	lr, lr
 801047a:	fbb5 f0fc 	udiv	r0, r5, ip
 801047e:	fb0c 5510 	mls	r5, ip, r0, r5
 8010482:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8010486:	fb00 f808 	mul.w	r8, r0, r8
 801048a:	45a0      	cmp	r8, r4
 801048c:	d907      	bls.n	801049e <__udivmoddi4+0x26e>
 801048e:	18e4      	adds	r4, r4, r3
 8010490:	f100 35ff 	add.w	r5, r0, #4294967295
 8010494:	d229      	bcs.n	80104ea <__udivmoddi4+0x2ba>
 8010496:	45a0      	cmp	r8, r4
 8010498:	d927      	bls.n	80104ea <__udivmoddi4+0x2ba>
 801049a:	3802      	subs	r0, #2
 801049c:	441c      	add	r4, r3
 801049e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80104a2:	eba4 0408 	sub.w	r4, r4, r8
 80104a6:	fba0 8902 	umull	r8, r9, r0, r2
 80104aa:	454c      	cmp	r4, r9
 80104ac:	46c6      	mov	lr, r8
 80104ae:	464d      	mov	r5, r9
 80104b0:	d315      	bcc.n	80104de <__udivmoddi4+0x2ae>
 80104b2:	d012      	beq.n	80104da <__udivmoddi4+0x2aa>
 80104b4:	b156      	cbz	r6, 80104cc <__udivmoddi4+0x29c>
 80104b6:	ebba 030e 	subs.w	r3, sl, lr
 80104ba:	eb64 0405 	sbc.w	r4, r4, r5
 80104be:	fa04 f707 	lsl.w	r7, r4, r7
 80104c2:	40cb      	lsrs	r3, r1
 80104c4:	431f      	orrs	r7, r3
 80104c6:	40cc      	lsrs	r4, r1
 80104c8:	6037      	str	r7, [r6, #0]
 80104ca:	6074      	str	r4, [r6, #4]
 80104cc:	2100      	movs	r1, #0
 80104ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104d2:	4618      	mov	r0, r3
 80104d4:	e6f8      	b.n	80102c8 <__udivmoddi4+0x98>
 80104d6:	4690      	mov	r8, r2
 80104d8:	e6e0      	b.n	801029c <__udivmoddi4+0x6c>
 80104da:	45c2      	cmp	sl, r8
 80104dc:	d2ea      	bcs.n	80104b4 <__udivmoddi4+0x284>
 80104de:	ebb8 0e02 	subs.w	lr, r8, r2
 80104e2:	eb69 0503 	sbc.w	r5, r9, r3
 80104e6:	3801      	subs	r0, #1
 80104e8:	e7e4      	b.n	80104b4 <__udivmoddi4+0x284>
 80104ea:	4628      	mov	r0, r5
 80104ec:	e7d7      	b.n	801049e <__udivmoddi4+0x26e>
 80104ee:	4640      	mov	r0, r8
 80104f0:	e791      	b.n	8010416 <__udivmoddi4+0x1e6>
 80104f2:	4681      	mov	r9, r0
 80104f4:	e7be      	b.n	8010474 <__udivmoddi4+0x244>
 80104f6:	4601      	mov	r1, r0
 80104f8:	e778      	b.n	80103ec <__udivmoddi4+0x1bc>
 80104fa:	3802      	subs	r0, #2
 80104fc:	443c      	add	r4, r7
 80104fe:	e745      	b.n	801038c <__udivmoddi4+0x15c>
 8010500:	4608      	mov	r0, r1
 8010502:	e708      	b.n	8010316 <__udivmoddi4+0xe6>
 8010504:	f1a8 0802 	sub.w	r8, r8, #2
 8010508:	443d      	add	r5, r7
 801050a:	e72b      	b.n	8010364 <__udivmoddi4+0x134>

0801050c <__aeabi_idiv0>:
 801050c:	4770      	bx	lr
 801050e:	bf00      	nop

08010510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010510:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010512:	4b0b      	ldr	r3, [pc, #44]	; (8010540 <HAL_Init+0x30>)
 8010514:	681a      	ldr	r2, [r3, #0]
 8010516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801051a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801051c:	681a      	ldr	r2, [r3, #0]
 801051e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010522:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010524:	681a      	ldr	r2, [r3, #0]
 8010526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801052a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801052c:	2003      	movs	r0, #3
 801052e:	f000 f81b 	bl	8010568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010532:	2000      	movs	r0, #0
 8010534:	f001 fc86 	bl	8011e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010538:	f001 fc62 	bl	8011e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 801053c:	2000      	movs	r0, #0
 801053e:	bd08      	pop	{r3, pc}
 8010540:	40023c00 	.word	0x40023c00

08010544 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8010544:	4a03      	ldr	r2, [pc, #12]	; (8010554 <HAL_IncTick+0x10>)
 8010546:	4b04      	ldr	r3, [pc, #16]	; (8010558 <HAL_IncTick+0x14>)
 8010548:	6811      	ldr	r1, [r2, #0]
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	440b      	add	r3, r1
 801054e:	6013      	str	r3, [r2, #0]
 8010550:	4770      	bx	lr
 8010552:	bf00      	nop
 8010554:	20003fc4 	.word	0x20003fc4
 8010558:	20000000 	.word	0x20000000

0801055c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 801055c:	4b01      	ldr	r3, [pc, #4]	; (8010564 <HAL_GetTick+0x8>)
 801055e:	6818      	ldr	r0, [r3, #0]
}
 8010560:	4770      	bx	lr
 8010562:	bf00      	nop
 8010564:	20003fc4 	.word	0x20003fc4

08010568 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010568:	4a07      	ldr	r2, [pc, #28]	; (8010588 <HAL_NVIC_SetPriorityGrouping+0x20>)
 801056a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801056c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8010570:	041b      	lsls	r3, r3, #16
 8010572:	0c1b      	lsrs	r3, r3, #16
 8010574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010578:	0200      	lsls	r0, r0, #8
 801057a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801057e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8010582:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8010584:	60d3      	str	r3, [r2, #12]
 8010586:	4770      	bx	lr
 8010588:	e000ed00 	.word	0xe000ed00

0801058c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801058c:	4b17      	ldr	r3, [pc, #92]	; (80105ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801058e:	b530      	push	{r4, r5, lr}
 8010590:	68dc      	ldr	r4, [r3, #12]
 8010592:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010596:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801059a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801059c:	2b04      	cmp	r3, #4
 801059e:	bf28      	it	cs
 80105a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80105a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80105a4:	f04f 0501 	mov.w	r5, #1
 80105a8:	fa05 f303 	lsl.w	r3, r5, r3
 80105ac:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80105b0:	bf8c      	ite	hi
 80105b2:	3c03      	subhi	r4, #3
 80105b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80105b6:	4019      	ands	r1, r3
 80105b8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80105ba:	fa05 f404 	lsl.w	r4, r5, r4
 80105be:	3c01      	subs	r4, #1
 80105c0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80105c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80105c4:	ea42 0201 	orr.w	r2, r2, r1
 80105c8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80105cc:	bfad      	iteet	ge
 80105ce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80105d2:	f000 000f 	andlt.w	r0, r0, #15
 80105d6:	4b06      	ldrlt	r3, [pc, #24]	; (80105f0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80105d8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80105dc:	bfb5      	itete	lt
 80105de:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80105e0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80105e2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80105e4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80105e8:	bd30      	pop	{r4, r5, pc}
 80105ea:	bf00      	nop
 80105ec:	e000ed00 	.word	0xe000ed00
 80105f0:	e000ed14 	.word	0xe000ed14

080105f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80105f4:	2800      	cmp	r0, #0
 80105f6:	db08      	blt.n	801060a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80105f8:	0942      	lsrs	r2, r0, #5
 80105fa:	2301      	movs	r3, #1
 80105fc:	f000 001f 	and.w	r0, r0, #31
 8010600:	fa03 f000 	lsl.w	r0, r3, r0
 8010604:	4b01      	ldr	r3, [pc, #4]	; (801060c <HAL_NVIC_EnableIRQ+0x18>)
 8010606:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801060a:	4770      	bx	lr
 801060c:	e000e100 	.word	0xe000e100

08010610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010614:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010616:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010618:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80107e0 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801061c:	4a6e      	ldr	r2, [pc, #440]	; (80107d8 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801061e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80107e4 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010622:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010624:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8010626:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801062a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 801062c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010630:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8010634:	45b6      	cmp	lr, r6
 8010636:	f040 80b6 	bne.w	80107a6 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801063a:	684c      	ldr	r4, [r1, #4]
 801063c:	f024 0710 	bic.w	r7, r4, #16
 8010640:	2f02      	cmp	r7, #2
 8010642:	d116      	bne.n	8010672 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8010644:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8010648:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801064c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8010650:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010654:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8010658:	f04f 0c0f 	mov.w	ip, #15
 801065c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8010660:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010664:	690d      	ldr	r5, [r1, #16]
 8010666:	fa05 f50b 	lsl.w	r5, r5, fp
 801066a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 801066e:	f8ca 5020 	str.w	r5, [sl, #32]
 8010672:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010676:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8010678:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801067c:	fa05 f50a 	lsl.w	r5, r5, sl
 8010680:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010682:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010686:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801068a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801068e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010690:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010694:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8010696:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801069a:	d811      	bhi.n	80106c0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 801069c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801069e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80106a2:	68cf      	ldr	r7, [r1, #12]
 80106a4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80106a8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80106ac:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80106ae:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80106b0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80106b4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80106b8:	409f      	lsls	r7, r3
 80106ba:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80106be:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80106c0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80106c2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80106c4:	688f      	ldr	r7, [r1, #8]
 80106c6:	fa07 f70a 	lsl.w	r7, r7, sl
 80106ca:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80106cc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80106ce:	00e5      	lsls	r5, r4, #3
 80106d0:	d569      	bpl.n	80107a6 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80106d2:	f04f 0b00 	mov.w	fp, #0
 80106d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80106da:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80106de:	4d3f      	ldr	r5, [pc, #252]	; (80107dc <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80106e0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80106e4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80106e8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80106ec:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80106f0:	9703      	str	r7, [sp, #12]
 80106f2:	9f03      	ldr	r7, [sp, #12]
 80106f4:	f023 0703 	bic.w	r7, r3, #3
 80106f8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80106fc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010700:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8010704:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010708:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801070c:	f04f 0e0f 	mov.w	lr, #15
 8010710:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010714:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010716:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801071a:	d04b      	beq.n	80107b4 <HAL_GPIO_Init+0x1a4>
 801071c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010720:	42a8      	cmp	r0, r5
 8010722:	d049      	beq.n	80107b8 <HAL_GPIO_Init+0x1a8>
 8010724:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010728:	42a8      	cmp	r0, r5
 801072a:	d047      	beq.n	80107bc <HAL_GPIO_Init+0x1ac>
 801072c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010730:	42a8      	cmp	r0, r5
 8010732:	d045      	beq.n	80107c0 <HAL_GPIO_Init+0x1b0>
 8010734:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010738:	42a8      	cmp	r0, r5
 801073a:	d043      	beq.n	80107c4 <HAL_GPIO_Init+0x1b4>
 801073c:	4548      	cmp	r0, r9
 801073e:	d043      	beq.n	80107c8 <HAL_GPIO_Init+0x1b8>
 8010740:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8010744:	42a8      	cmp	r0, r5
 8010746:	d041      	beq.n	80107cc <HAL_GPIO_Init+0x1bc>
 8010748:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801074c:	42a8      	cmp	r0, r5
 801074e:	d03f      	beq.n	80107d0 <HAL_GPIO_Init+0x1c0>
 8010750:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8010754:	42a8      	cmp	r0, r5
 8010756:	d03d      	beq.n	80107d4 <HAL_GPIO_Init+0x1c4>
 8010758:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801075c:	42a8      	cmp	r0, r5
 801075e:	bf14      	ite	ne
 8010760:	250a      	movne	r5, #10
 8010762:	2509      	moveq	r5, #9
 8010764:	fa05 f50c 	lsl.w	r5, r5, ip
 8010768:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 801076c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 801076e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8010770:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010772:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8010776:	bf0c      	ite	eq
 8010778:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 801077a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 801077c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 801077e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010780:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8010784:	bf0c      	ite	eq
 8010786:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8010788:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 801078a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801078c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801078e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8010792:	bf0c      	ite	eq
 8010794:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8010796:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8010798:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 801079a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801079c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 801079e:	bf54      	ite	pl
 80107a0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80107a2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80107a4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80107a6:	3301      	adds	r3, #1
 80107a8:	2b10      	cmp	r3, #16
 80107aa:	f47f af3c 	bne.w	8010626 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80107ae:	b005      	add	sp, #20
 80107b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80107b4:	465d      	mov	r5, fp
 80107b6:	e7d5      	b.n	8010764 <HAL_GPIO_Init+0x154>
 80107b8:	2501      	movs	r5, #1
 80107ba:	e7d3      	b.n	8010764 <HAL_GPIO_Init+0x154>
 80107bc:	2502      	movs	r5, #2
 80107be:	e7d1      	b.n	8010764 <HAL_GPIO_Init+0x154>
 80107c0:	2503      	movs	r5, #3
 80107c2:	e7cf      	b.n	8010764 <HAL_GPIO_Init+0x154>
 80107c4:	2504      	movs	r5, #4
 80107c6:	e7cd      	b.n	8010764 <HAL_GPIO_Init+0x154>
 80107c8:	2505      	movs	r5, #5
 80107ca:	e7cb      	b.n	8010764 <HAL_GPIO_Init+0x154>
 80107cc:	2506      	movs	r5, #6
 80107ce:	e7c9      	b.n	8010764 <HAL_GPIO_Init+0x154>
 80107d0:	2507      	movs	r5, #7
 80107d2:	e7c7      	b.n	8010764 <HAL_GPIO_Init+0x154>
 80107d4:	2508      	movs	r5, #8
 80107d6:	e7c5      	b.n	8010764 <HAL_GPIO_Init+0x154>
 80107d8:	40013c00 	.word	0x40013c00
 80107dc:	40020000 	.word	0x40020000
 80107e0:	40023800 	.word	0x40023800
 80107e4:	40021400 	.word	0x40021400

080107e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80107e8:	b10a      	cbz	r2, 80107ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80107ea:	6181      	str	r1, [r0, #24]
 80107ec:	4770      	bx	lr
 80107ee:	0409      	lsls	r1, r1, #16
 80107f0:	e7fb      	b.n	80107ea <HAL_GPIO_WritePin+0x2>

080107f2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80107f2:	6943      	ldr	r3, [r0, #20]
 80107f4:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80107f8:	bf08      	it	eq
 80107fa:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80107fc:	6181      	str	r1, [r0, #24]
 80107fe:	4770      	bx	lr

08010800 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8010800:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8010802:	2300      	movs	r3, #0
 8010804:	9301      	str	r3, [sp, #4]
 8010806:	4b18      	ldr	r3, [pc, #96]	; (8010868 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8010808:	4c18      	ldr	r4, [pc, #96]	; (801086c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 801080a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801080c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8010810:	641a      	str	r2, [r3, #64]	; 0x40
 8010812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010818:	9301      	str	r3, [sp, #4]
 801081a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 801081c:	4b14      	ldr	r3, [pc, #80]	; (8010870 <HAL_PWREx_EnableOverDrive+0x70>)
 801081e:	2201      	movs	r2, #1
 8010820:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8010822:	f7ff fe9b 	bl	801055c <HAL_GetTick>
 8010826:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8010828:	6863      	ldr	r3, [r4, #4]
 801082a:	03da      	lsls	r2, r3, #15
 801082c:	d50b      	bpl.n	8010846 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801082e:	4b11      	ldr	r3, [pc, #68]	; (8010874 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8010830:	4c0e      	ldr	r4, [pc, #56]	; (801086c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8010832:	2201      	movs	r2, #1
 8010834:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8010836:	f7ff fe91 	bl	801055c <HAL_GetTick>
 801083a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801083c:	6863      	ldr	r3, [r4, #4]
 801083e:	039b      	lsls	r3, r3, #14
 8010840:	d50a      	bpl.n	8010858 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8010842:	2000      	movs	r0, #0
 8010844:	e006      	b.n	8010854 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8010846:	f7ff fe89 	bl	801055c <HAL_GetTick>
 801084a:	1b40      	subs	r0, r0, r5
 801084c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010850:	d9ea      	bls.n	8010828 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8010852:	2003      	movs	r0, #3
}
 8010854:	b003      	add	sp, #12
 8010856:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8010858:	f7ff fe80 	bl	801055c <HAL_GetTick>
 801085c:	1b40      	subs	r0, r0, r5
 801085e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010862:	d9eb      	bls.n	801083c <HAL_PWREx_EnableOverDrive+0x3c>
 8010864:	e7f5      	b.n	8010852 <HAL_PWREx_EnableOverDrive+0x52>
 8010866:	bf00      	nop
 8010868:	40023800 	.word	0x40023800
 801086c:	40007000 	.word	0x40007000
 8010870:	420e0040 	.word	0x420e0040
 8010874:	420e0044 	.word	0x420e0044

08010878 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010878:	4913      	ldr	r1, [pc, #76]	; (80108c8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 801087a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801087c:	688b      	ldr	r3, [r1, #8]
 801087e:	f003 030c 	and.w	r3, r3, #12
 8010882:	2b04      	cmp	r3, #4
 8010884:	d003      	beq.n	801088e <HAL_RCC_GetSysClockFreq+0x16>
 8010886:	2b08      	cmp	r3, #8
 8010888:	d003      	beq.n	8010892 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801088a:	4810      	ldr	r0, [pc, #64]	; (80108cc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 801088c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 801088e:	4810      	ldr	r0, [pc, #64]	; (80108d0 <HAL_RCC_GetSysClockFreq+0x58>)
 8010890:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010892:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010894:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010896:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010898:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801089c:	bf14      	ite	ne
 801089e:	480c      	ldrne	r0, [pc, #48]	; (80108d0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80108a0:	480a      	ldreq	r0, [pc, #40]	; (80108cc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80108a2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80108a6:	bf18      	it	ne
 80108a8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80108aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80108ae:	fba1 0100 	umull	r0, r1, r1, r0
 80108b2:	f7ff fca5 	bl	8010200 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80108b6:	4b04      	ldr	r3, [pc, #16]	; (80108c8 <HAL_RCC_GetSysClockFreq+0x50>)
 80108b8:	685b      	ldr	r3, [r3, #4]
 80108ba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80108be:	3301      	adds	r3, #1
 80108c0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80108c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80108c6:	bd08      	pop	{r3, pc}
 80108c8:	40023800 	.word	0x40023800
 80108cc:	00f42400 	.word	0x00f42400
 80108d0:	017d7840 	.word	0x017d7840

080108d4 <HAL_RCC_ClockConfig>:
{
 80108d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108d8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80108da:	4604      	mov	r4, r0
 80108dc:	b910      	cbnz	r0, 80108e4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80108de:	2001      	movs	r0, #1
 80108e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80108e4:	4b44      	ldr	r3, [pc, #272]	; (80109f8 <HAL_RCC_ClockConfig+0x124>)
 80108e6:	681a      	ldr	r2, [r3, #0]
 80108e8:	f002 020f 	and.w	r2, r2, #15
 80108ec:	428a      	cmp	r2, r1
 80108ee:	d328      	bcc.n	8010942 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80108f0:	6821      	ldr	r1, [r4, #0]
 80108f2:	078f      	lsls	r7, r1, #30
 80108f4:	d42d      	bmi.n	8010952 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80108f6:	07c8      	lsls	r0, r1, #31
 80108f8:	d440      	bmi.n	801097c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80108fa:	4b3f      	ldr	r3, [pc, #252]	; (80109f8 <HAL_RCC_ClockConfig+0x124>)
 80108fc:	681a      	ldr	r2, [r3, #0]
 80108fe:	f002 020f 	and.w	r2, r2, #15
 8010902:	4295      	cmp	r5, r2
 8010904:	d366      	bcc.n	80109d4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010906:	6822      	ldr	r2, [r4, #0]
 8010908:	0751      	lsls	r1, r2, #29
 801090a:	d46c      	bmi.n	80109e6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801090c:	0713      	lsls	r3, r2, #28
 801090e:	d507      	bpl.n	8010920 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010910:	4a3a      	ldr	r2, [pc, #232]	; (80109fc <HAL_RCC_ClockConfig+0x128>)
 8010912:	6921      	ldr	r1, [r4, #16]
 8010914:	6893      	ldr	r3, [r2, #8]
 8010916:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 801091a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 801091e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010920:	f7ff ffaa 	bl	8010878 <HAL_RCC_GetSysClockFreq>
 8010924:	4b35      	ldr	r3, [pc, #212]	; (80109fc <HAL_RCC_ClockConfig+0x128>)
 8010926:	4a36      	ldr	r2, [pc, #216]	; (8010a00 <HAL_RCC_ClockConfig+0x12c>)
 8010928:	689b      	ldr	r3, [r3, #8]
 801092a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801092e:	5cd3      	ldrb	r3, [r2, r3]
 8010930:	40d8      	lsrs	r0, r3
 8010932:	4b34      	ldr	r3, [pc, #208]	; (8010a04 <HAL_RCC_ClockConfig+0x130>)
 8010934:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8010936:	2000      	movs	r0, #0
 8010938:	f001 fa84 	bl	8011e44 <HAL_InitTick>
  return HAL_OK;
 801093c:	2000      	movs	r0, #0
 801093e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010942:	b2ca      	uxtb	r2, r1
 8010944:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	f003 030f 	and.w	r3, r3, #15
 801094c:	4299      	cmp	r1, r3
 801094e:	d1c6      	bne.n	80108de <HAL_RCC_ClockConfig+0xa>
 8010950:	e7ce      	b.n	80108f0 <HAL_RCC_ClockConfig+0x1c>
 8010952:	4b2a      	ldr	r3, [pc, #168]	; (80109fc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010954:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010958:	bf1e      	ittt	ne
 801095a:	689a      	ldrne	r2, [r3, #8]
 801095c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8010960:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010962:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010964:	bf42      	ittt	mi
 8010966:	689a      	ldrmi	r2, [r3, #8]
 8010968:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 801096c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801096e:	689a      	ldr	r2, [r3, #8]
 8010970:	68a0      	ldr	r0, [r4, #8]
 8010972:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8010976:	4302      	orrs	r2, r0
 8010978:	609a      	str	r2, [r3, #8]
 801097a:	e7bc      	b.n	80108f6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801097c:	6862      	ldr	r2, [r4, #4]
 801097e:	4b1f      	ldr	r3, [pc, #124]	; (80109fc <HAL_RCC_ClockConfig+0x128>)
 8010980:	2a01      	cmp	r2, #1
 8010982:	d11d      	bne.n	80109c0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801098a:	d0a8      	beq.n	80108de <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801098c:	4e1b      	ldr	r6, [pc, #108]	; (80109fc <HAL_RCC_ClockConfig+0x128>)
 801098e:	68b3      	ldr	r3, [r6, #8]
 8010990:	f023 0303 	bic.w	r3, r3, #3
 8010994:	4313      	orrs	r3, r2
 8010996:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8010998:	f7ff fde0 	bl	801055c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801099c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80109a0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80109a2:	68b3      	ldr	r3, [r6, #8]
 80109a4:	6862      	ldr	r2, [r4, #4]
 80109a6:	f003 030c 	and.w	r3, r3, #12
 80109aa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80109ae:	d0a4      	beq.n	80108fa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80109b0:	f7ff fdd4 	bl	801055c <HAL_GetTick>
 80109b4:	1bc0      	subs	r0, r0, r7
 80109b6:	4540      	cmp	r0, r8
 80109b8:	d9f3      	bls.n	80109a2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80109ba:	2003      	movs	r0, #3
}
 80109bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80109c0:	1e91      	subs	r1, r2, #2
 80109c2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80109c4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80109c6:	d802      	bhi.n	80109ce <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80109c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80109cc:	e7dd      	b.n	801098a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80109ce:	f013 0f02 	tst.w	r3, #2
 80109d2:	e7da      	b.n	801098a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80109d4:	b2ea      	uxtb	r2, r5
 80109d6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	f003 030f 	and.w	r3, r3, #15
 80109de:	429d      	cmp	r5, r3
 80109e0:	f47f af7d 	bne.w	80108de <HAL_RCC_ClockConfig+0xa>
 80109e4:	e78f      	b.n	8010906 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80109e6:	4905      	ldr	r1, [pc, #20]	; (80109fc <HAL_RCC_ClockConfig+0x128>)
 80109e8:	68e0      	ldr	r0, [r4, #12]
 80109ea:	688b      	ldr	r3, [r1, #8]
 80109ec:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80109f0:	4303      	orrs	r3, r0
 80109f2:	608b      	str	r3, [r1, #8]
 80109f4:	e78a      	b.n	801090c <HAL_RCC_ClockConfig+0x38>
 80109f6:	bf00      	nop
 80109f8:	40023c00 	.word	0x40023c00
 80109fc:	40023800 	.word	0x40023800
 8010a00:	08012015 	.word	0x08012015
 8010a04:	20000008 	.word	0x20000008

08010a08 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010a08:	4b04      	ldr	r3, [pc, #16]	; (8010a1c <HAL_RCC_GetPCLK1Freq+0x14>)
 8010a0a:	4a05      	ldr	r2, [pc, #20]	; (8010a20 <HAL_RCC_GetPCLK1Freq+0x18>)
 8010a0c:	689b      	ldr	r3, [r3, #8]
 8010a0e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8010a12:	5cd3      	ldrb	r3, [r2, r3]
 8010a14:	4a03      	ldr	r2, [pc, #12]	; (8010a24 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8010a16:	6810      	ldr	r0, [r2, #0]
}
 8010a18:	40d8      	lsrs	r0, r3
 8010a1a:	4770      	bx	lr
 8010a1c:	40023800 	.word	0x40023800
 8010a20:	08012025 	.word	0x08012025
 8010a24:	20000008 	.word	0x20000008

08010a28 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8010a28:	230f      	movs	r3, #15
 8010a2a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010a2c:	4b0b      	ldr	r3, [pc, #44]	; (8010a5c <HAL_RCC_GetClockConfig+0x34>)
 8010a2e:	689a      	ldr	r2, [r3, #8]
 8010a30:	f002 0203 	and.w	r2, r2, #3
 8010a34:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8010a36:	689a      	ldr	r2, [r3, #8]
 8010a38:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8010a3c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8010a3e:	689a      	ldr	r2, [r3, #8]
 8010a40:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8010a44:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8010a46:	689b      	ldr	r3, [r3, #8]
 8010a48:	08db      	lsrs	r3, r3, #3
 8010a4a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8010a4e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010a50:	4b03      	ldr	r3, [pc, #12]	; (8010a60 <HAL_RCC_GetClockConfig+0x38>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f003 030f 	and.w	r3, r3, #15
 8010a58:	600b      	str	r3, [r1, #0]
 8010a5a:	4770      	bx	lr
 8010a5c:	40023800 	.word	0x40023800
 8010a60:	40023c00 	.word	0x40023c00

08010a64 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010a64:	6803      	ldr	r3, [r0, #0]
{
 8010a66:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010a6a:	07dd      	lsls	r5, r3, #31
{
 8010a6c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010a6e:	d410      	bmi.n	8010a92 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010a70:	6823      	ldr	r3, [r4, #0]
 8010a72:	0798      	lsls	r0, r3, #30
 8010a74:	d45b      	bmi.n	8010b2e <HAL_RCC_OscConfig+0xca>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010a76:	6823      	ldr	r3, [r4, #0]
 8010a78:	071a      	lsls	r2, r3, #28
 8010a7a:	f100 809d 	bmi.w	8010bb8 <HAL_RCC_OscConfig+0x154>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010a7e:	6823      	ldr	r3, [r4, #0]
 8010a80:	075b      	lsls	r3, r3, #29
 8010a82:	f100 80bb 	bmi.w	8010bfc <HAL_RCC_OscConfig+0x198>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010a86:	69a2      	ldr	r2, [r4, #24]
 8010a88:	2a00      	cmp	r2, #0
 8010a8a:	f040 811c 	bne.w	8010cc6 <HAL_RCC_OscConfig+0x262>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8010a8e:	2000      	movs	r0, #0
 8010a90:	e015      	b.n	8010abe <HAL_RCC_OscConfig+0x5a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8010a92:	4ba7      	ldr	r3, [pc, #668]	; (8010d30 <HAL_RCC_OscConfig+0x2cc>)
 8010a94:	689a      	ldr	r2, [r3, #8]
 8010a96:	f002 020c 	and.w	r2, r2, #12
 8010a9a:	2a04      	cmp	r2, #4
 8010a9c:	d007      	beq.n	8010aae <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010a9e:	689a      	ldr	r2, [r3, #8]
 8010aa0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8010aa4:	2a08      	cmp	r2, #8
 8010aa6:	d10d      	bne.n	8010ac4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010aa8:	685b      	ldr	r3, [r3, #4]
 8010aaa:	0259      	lsls	r1, r3, #9
 8010aac:	d50a      	bpl.n	8010ac4 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010aae:	4ba0      	ldr	r3, [pc, #640]	; (8010d30 <HAL_RCC_OscConfig+0x2cc>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	039a      	lsls	r2, r3, #14
 8010ab4:	d5dc      	bpl.n	8010a70 <HAL_RCC_OscConfig+0xc>
 8010ab6:	6863      	ldr	r3, [r4, #4]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d1d9      	bne.n	8010a70 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8010abc:	2001      	movs	r0, #1
}
 8010abe:	b002      	add	sp, #8
 8010ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010ac4:	6863      	ldr	r3, [r4, #4]
 8010ac6:	4d9a      	ldr	r5, [pc, #616]	; (8010d30 <HAL_RCC_OscConfig+0x2cc>)
 8010ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010acc:	d111      	bne.n	8010af2 <HAL_RCC_OscConfig+0x8e>
 8010ace:	682b      	ldr	r3, [r5, #0]
 8010ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010ad4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8010ad6:	f7ff fd41 	bl	801055c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010ada:	4d95      	ldr	r5, [pc, #596]	; (8010d30 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8010adc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010ade:	682b      	ldr	r3, [r5, #0]
 8010ae0:	039b      	lsls	r3, r3, #14
 8010ae2:	d4c5      	bmi.n	8010a70 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010ae4:	f7ff fd3a 	bl	801055c <HAL_GetTick>
 8010ae8:	1b80      	subs	r0, r0, r6
 8010aea:	2864      	cmp	r0, #100	; 0x64
 8010aec:	d9f7      	bls.n	8010ade <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8010aee:	2003      	movs	r0, #3
 8010af0:	e7e5      	b.n	8010abe <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010af2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010af6:	d104      	bne.n	8010b02 <HAL_RCC_OscConfig+0x9e>
 8010af8:	682b      	ldr	r3, [r5, #0]
 8010afa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010afe:	602b      	str	r3, [r5, #0]
 8010b00:	e7e5      	b.n	8010ace <HAL_RCC_OscConfig+0x6a>
 8010b02:	682a      	ldr	r2, [r5, #0]
 8010b04:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010b08:	602a      	str	r2, [r5, #0]
 8010b0a:	682a      	ldr	r2, [r5, #0]
 8010b0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010b10:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d1df      	bne.n	8010ad6 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8010b16:	f7ff fd21 	bl	801055c <HAL_GetTick>
 8010b1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010b1c:	682b      	ldr	r3, [r5, #0]
 8010b1e:	039f      	lsls	r7, r3, #14
 8010b20:	d5a6      	bpl.n	8010a70 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010b22:	f7ff fd1b 	bl	801055c <HAL_GetTick>
 8010b26:	1b80      	subs	r0, r0, r6
 8010b28:	2864      	cmp	r0, #100	; 0x64
 8010b2a:	d9f7      	bls.n	8010b1c <HAL_RCC_OscConfig+0xb8>
 8010b2c:	e7df      	b.n	8010aee <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8010b2e:	4b80      	ldr	r3, [pc, #512]	; (8010d30 <HAL_RCC_OscConfig+0x2cc>)
 8010b30:	689a      	ldr	r2, [r3, #8]
 8010b32:	f012 0f0c 	tst.w	r2, #12
 8010b36:	d007      	beq.n	8010b48 <HAL_RCC_OscConfig+0xe4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010b38:	689a      	ldr	r2, [r3, #8]
 8010b3a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8010b3e:	2a08      	cmp	r2, #8
 8010b40:	d111      	bne.n	8010b66 <HAL_RCC_OscConfig+0x102>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010b42:	685b      	ldr	r3, [r3, #4]
 8010b44:	025e      	lsls	r6, r3, #9
 8010b46:	d40e      	bmi.n	8010b66 <HAL_RCC_OscConfig+0x102>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010b48:	4b79      	ldr	r3, [pc, #484]	; (8010d30 <HAL_RCC_OscConfig+0x2cc>)
 8010b4a:	681a      	ldr	r2, [r3, #0]
 8010b4c:	0795      	lsls	r5, r2, #30
 8010b4e:	d502      	bpl.n	8010b56 <HAL_RCC_OscConfig+0xf2>
 8010b50:	68e2      	ldr	r2, [r4, #12]
 8010b52:	2a01      	cmp	r2, #1
 8010b54:	d1b2      	bne.n	8010abc <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010b56:	681a      	ldr	r2, [r3, #0]
 8010b58:	6921      	ldr	r1, [r4, #16]
 8010b5a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8010b5e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8010b62:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010b64:	e787      	b.n	8010a76 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010b66:	68e2      	ldr	r2, [r4, #12]
 8010b68:	4b72      	ldr	r3, [pc, #456]	; (8010d34 <HAL_RCC_OscConfig+0x2d0>)
 8010b6a:	b1b2      	cbz	r2, 8010b9a <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_ENABLE();
 8010b6c:	2201      	movs	r2, #1
 8010b6e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8010b70:	f7ff fcf4 	bl	801055c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010b74:	4d6e      	ldr	r5, [pc, #440]	; (8010d30 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8010b76:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010b78:	682b      	ldr	r3, [r5, #0]
 8010b7a:	0798      	lsls	r0, r3, #30
 8010b7c:	d507      	bpl.n	8010b8e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010b7e:	682b      	ldr	r3, [r5, #0]
 8010b80:	6922      	ldr	r2, [r4, #16]
 8010b82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8010b86:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8010b8a:	602b      	str	r3, [r5, #0]
 8010b8c:	e773      	b.n	8010a76 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010b8e:	f7ff fce5 	bl	801055c <HAL_GetTick>
 8010b92:	1b80      	subs	r0, r0, r6
 8010b94:	2802      	cmp	r0, #2
 8010b96:	d9ef      	bls.n	8010b78 <HAL_RCC_OscConfig+0x114>
 8010b98:	e7a9      	b.n	8010aee <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8010b9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8010b9c:	f7ff fcde 	bl	801055c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010ba0:	4d63      	ldr	r5, [pc, #396]	; (8010d30 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8010ba2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010ba4:	682b      	ldr	r3, [r5, #0]
 8010ba6:	0799      	lsls	r1, r3, #30
 8010ba8:	f57f af65 	bpl.w	8010a76 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010bac:	f7ff fcd6 	bl	801055c <HAL_GetTick>
 8010bb0:	1b80      	subs	r0, r0, r6
 8010bb2:	2802      	cmp	r0, #2
 8010bb4:	d9f6      	bls.n	8010ba4 <HAL_RCC_OscConfig+0x140>
 8010bb6:	e79a      	b.n	8010aee <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010bb8:	6962      	ldr	r2, [r4, #20]
 8010bba:	4b5f      	ldr	r3, [pc, #380]	; (8010d38 <HAL_RCC_OscConfig+0x2d4>)
 8010bbc:	b17a      	cbz	r2, 8010bde <HAL_RCC_OscConfig+0x17a>
      __HAL_RCC_LSI_ENABLE();
 8010bbe:	2201      	movs	r2, #1
 8010bc0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8010bc2:	f7ff fccb 	bl	801055c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010bc6:	4d5a      	ldr	r5, [pc, #360]	; (8010d30 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8010bc8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010bca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8010bcc:	079f      	lsls	r7, r3, #30
 8010bce:	f53f af56 	bmi.w	8010a7e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010bd2:	f7ff fcc3 	bl	801055c <HAL_GetTick>
 8010bd6:	1b80      	subs	r0, r0, r6
 8010bd8:	2802      	cmp	r0, #2
 8010bda:	d9f6      	bls.n	8010bca <HAL_RCC_OscConfig+0x166>
 8010bdc:	e787      	b.n	8010aee <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8010bde:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8010be0:	f7ff fcbc 	bl	801055c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010be4:	4d52      	ldr	r5, [pc, #328]	; (8010d30 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8010be6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010be8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8010bea:	0798      	lsls	r0, r3, #30
 8010bec:	f57f af47 	bpl.w	8010a7e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010bf0:	f7ff fcb4 	bl	801055c <HAL_GetTick>
 8010bf4:	1b80      	subs	r0, r0, r6
 8010bf6:	2802      	cmp	r0, #2
 8010bf8:	d9f6      	bls.n	8010be8 <HAL_RCC_OscConfig+0x184>
 8010bfa:	e778      	b.n	8010aee <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010bfc:	4b4c      	ldr	r3, [pc, #304]	; (8010d30 <HAL_RCC_OscConfig+0x2cc>)
 8010bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010c00:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8010c04:	d128      	bne.n	8010c58 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8010c06:	9201      	str	r2, [sp, #4]
 8010c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010c0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8010c0e:	641a      	str	r2, [r3, #64]	; 0x40
 8010c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c16:	9301      	str	r3, [sp, #4]
 8010c18:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8010c1a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010c1c:	4d47      	ldr	r5, [pc, #284]	; (8010d3c <HAL_RCC_OscConfig+0x2d8>)
 8010c1e:	682b      	ldr	r3, [r5, #0]
 8010c20:	05d9      	lsls	r1, r3, #23
 8010c22:	d51b      	bpl.n	8010c5c <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010c24:	68a3      	ldr	r3, [r4, #8]
 8010c26:	4d42      	ldr	r5, [pc, #264]	; (8010d30 <HAL_RCC_OscConfig+0x2cc>)
 8010c28:	2b01      	cmp	r3, #1
 8010c2a:	d127      	bne.n	8010c7c <HAL_RCC_OscConfig+0x218>
 8010c2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010c2e:	f043 0301 	orr.w	r3, r3, #1
 8010c32:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8010c34:	f7ff fc92 	bl	801055c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010c38:	4d3d      	ldr	r5, [pc, #244]	; (8010d30 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8010c3a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010c3c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010c40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010c42:	079b      	lsls	r3, r3, #30
 8010c44:	d539      	bpl.n	8010cba <HAL_RCC_OscConfig+0x256>
    if(pwrclkchanged == SET)
 8010c46:	2e00      	cmp	r6, #0
 8010c48:	f43f af1d 	beq.w	8010a86 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8010c4c:	4a38      	ldr	r2, [pc, #224]	; (8010d30 <HAL_RCC_OscConfig+0x2cc>)
 8010c4e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010c54:	6413      	str	r3, [r2, #64]	; 0x40
 8010c56:	e716      	b.n	8010a86 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8010c58:	2600      	movs	r6, #0
 8010c5a:	e7df      	b.n	8010c1c <HAL_RCC_OscConfig+0x1b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010c5c:	682b      	ldr	r3, [r5, #0]
 8010c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010c62:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8010c64:	f7ff fc7a 	bl	801055c <HAL_GetTick>
 8010c68:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010c6a:	682b      	ldr	r3, [r5, #0]
 8010c6c:	05da      	lsls	r2, r3, #23
 8010c6e:	d4d9      	bmi.n	8010c24 <HAL_RCC_OscConfig+0x1c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010c70:	f7ff fc74 	bl	801055c <HAL_GetTick>
 8010c74:	1bc0      	subs	r0, r0, r7
 8010c76:	2802      	cmp	r0, #2
 8010c78:	d9f7      	bls.n	8010c6a <HAL_RCC_OscConfig+0x206>
 8010c7a:	e738      	b.n	8010aee <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010c7c:	2b05      	cmp	r3, #5
 8010c7e:	d104      	bne.n	8010c8a <HAL_RCC_OscConfig+0x226>
 8010c80:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010c82:	f043 0304 	orr.w	r3, r3, #4
 8010c86:	672b      	str	r3, [r5, #112]	; 0x70
 8010c88:	e7d0      	b.n	8010c2c <HAL_RCC_OscConfig+0x1c8>
 8010c8a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8010c8c:	f022 0201 	bic.w	r2, r2, #1
 8010c90:	672a      	str	r2, [r5, #112]	; 0x70
 8010c92:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8010c94:	f022 0204 	bic.w	r2, r2, #4
 8010c98:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d1ca      	bne.n	8010c34 <HAL_RCC_OscConfig+0x1d0>
      tickstart = HAL_GetTick();
 8010c9e:	f7ff fc5d 	bl	801055c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010ca2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8010ca6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010ca8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010caa:	0798      	lsls	r0, r3, #30
 8010cac:	d5cb      	bpl.n	8010c46 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010cae:	f7ff fc55 	bl	801055c <HAL_GetTick>
 8010cb2:	1bc0      	subs	r0, r0, r7
 8010cb4:	4540      	cmp	r0, r8
 8010cb6:	d9f7      	bls.n	8010ca8 <HAL_RCC_OscConfig+0x244>
 8010cb8:	e719      	b.n	8010aee <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010cba:	f7ff fc4f 	bl	801055c <HAL_GetTick>
 8010cbe:	1bc0      	subs	r0, r0, r7
 8010cc0:	4540      	cmp	r0, r8
 8010cc2:	d9bd      	bls.n	8010c40 <HAL_RCC_OscConfig+0x1dc>
 8010cc4:	e713      	b.n	8010aee <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8010cc6:	4d1a      	ldr	r5, [pc, #104]	; (8010d30 <HAL_RCC_OscConfig+0x2cc>)
 8010cc8:	68ab      	ldr	r3, [r5, #8]
 8010cca:	f003 030c 	and.w	r3, r3, #12
 8010cce:	2b08      	cmp	r3, #8
 8010cd0:	f43f aef4 	beq.w	8010abc <HAL_RCC_OscConfig+0x58>
 8010cd4:	4e1a      	ldr	r6, [pc, #104]	; (8010d40 <HAL_RCC_OscConfig+0x2dc>)
 8010cd6:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010cd8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8010cda:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010cdc:	d138      	bne.n	8010d50 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8010cde:	f7ff fc3d 	bl	801055c <HAL_GetTick>
 8010ce2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010ce4:	682b      	ldr	r3, [r5, #0]
 8010ce6:	0199      	lsls	r1, r3, #6
 8010ce8:	d42c      	bmi.n	8010d44 <HAL_RCC_OscConfig+0x2e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010cea:	6a22      	ldr	r2, [r4, #32]
 8010cec:	69e3      	ldr	r3, [r4, #28]
 8010cee:	4313      	orrs	r3, r2
 8010cf0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010cf2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8010cf6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010cf8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010cfc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010cfe:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8010d02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010d04:	4c0a      	ldr	r4, [pc, #40]	; (8010d30 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010d06:	0852      	lsrs	r2, r2, #1
 8010d08:	3a01      	subs	r2, #1
 8010d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d0e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8010d10:	2301      	movs	r3, #1
 8010d12:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8010d14:	f7ff fc22 	bl	801055c <HAL_GetTick>
 8010d18:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010d1a:	6823      	ldr	r3, [r4, #0]
 8010d1c:	019a      	lsls	r2, r3, #6
 8010d1e:	f53f aeb6 	bmi.w	8010a8e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010d22:	f7ff fc1b 	bl	801055c <HAL_GetTick>
 8010d26:	1b40      	subs	r0, r0, r5
 8010d28:	2802      	cmp	r0, #2
 8010d2a:	d9f6      	bls.n	8010d1a <HAL_RCC_OscConfig+0x2b6>
 8010d2c:	e6df      	b.n	8010aee <HAL_RCC_OscConfig+0x8a>
 8010d2e:	bf00      	nop
 8010d30:	40023800 	.word	0x40023800
 8010d34:	42470000 	.word	0x42470000
 8010d38:	42470e80 	.word	0x42470e80
 8010d3c:	40007000 	.word	0x40007000
 8010d40:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010d44:	f7ff fc0a 	bl	801055c <HAL_GetTick>
 8010d48:	1bc0      	subs	r0, r0, r7
 8010d4a:	2802      	cmp	r0, #2
 8010d4c:	d9ca      	bls.n	8010ce4 <HAL_RCC_OscConfig+0x280>
 8010d4e:	e6ce      	b.n	8010aee <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8010d50:	f7ff fc04 	bl	801055c <HAL_GetTick>
 8010d54:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010d56:	682b      	ldr	r3, [r5, #0]
 8010d58:	019b      	lsls	r3, r3, #6
 8010d5a:	f57f ae98 	bpl.w	8010a8e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010d5e:	f7ff fbfd 	bl	801055c <HAL_GetTick>
 8010d62:	1b00      	subs	r0, r0, r4
 8010d64:	2802      	cmp	r0, #2
 8010d66:	d9f6      	bls.n	8010d56 <HAL_RCC_OscConfig+0x2f2>
 8010d68:	e6c1      	b.n	8010aee <HAL_RCC_OscConfig+0x8a>
 8010d6a:	bf00      	nop

08010d6c <HAL_TIM_Base_MspInit>:
 8010d6c:	4770      	bx	lr

08010d6e <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010d6e:	6803      	ldr	r3, [r0, #0]
 8010d70:	68da      	ldr	r2, [r3, #12]
 8010d72:	f042 0201 	orr.w	r2, r2, #1
 8010d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010d78:	689a      	ldr	r2, [r3, #8]
 8010d7a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d7e:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8010d80:	bf1e      	ittt	ne
 8010d82:	681a      	ldrne	r2, [r3, #0]
 8010d84:	f042 0201 	orrne.w	r2, r2, #1
 8010d88:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8010d8a:	2000      	movs	r0, #0
 8010d8c:	4770      	bx	lr

08010d8e <HAL_TIM_OC_DelayElapsedCallback>:
 8010d8e:	4770      	bx	lr

08010d90 <HAL_TIM_IC_CaptureCallback>:
 8010d90:	4770      	bx	lr

08010d92 <HAL_TIM_PWM_PulseFinishedCallback>:
 8010d92:	4770      	bx	lr

08010d94 <HAL_TIM_TriggerCallback>:
 8010d94:	4770      	bx	lr

08010d96 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010d96:	6803      	ldr	r3, [r0, #0]
 8010d98:	691a      	ldr	r2, [r3, #16]
 8010d9a:	0791      	lsls	r1, r2, #30
{
 8010d9c:	b510      	push	{r4, lr}
 8010d9e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010da0:	d50e      	bpl.n	8010dc0 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010da2:	68da      	ldr	r2, [r3, #12]
 8010da4:	0792      	lsls	r2, r2, #30
 8010da6:	d50b      	bpl.n	8010dc0 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010da8:	f06f 0202 	mvn.w	r2, #2
 8010dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010dae:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010db0:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010db2:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010db4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010db6:	d077      	beq.n	8010ea8 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010db8:	f7ff ffea 	bl	8010d90 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010dc0:	6823      	ldr	r3, [r4, #0]
 8010dc2:	691a      	ldr	r2, [r3, #16]
 8010dc4:	0750      	lsls	r0, r2, #29
 8010dc6:	d510      	bpl.n	8010dea <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010dc8:	68da      	ldr	r2, [r3, #12]
 8010dca:	0751      	lsls	r1, r2, #29
 8010dcc:	d50d      	bpl.n	8010dea <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010dce:	f06f 0204 	mvn.w	r2, #4
 8010dd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010dd4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010dd6:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010dd8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010ddc:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010dde:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010de0:	d068      	beq.n	8010eb4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8010de2:	f7ff ffd5 	bl	8010d90 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010de6:	2300      	movs	r3, #0
 8010de8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010dea:	6823      	ldr	r3, [r4, #0]
 8010dec:	691a      	ldr	r2, [r3, #16]
 8010dee:	0712      	lsls	r2, r2, #28
 8010df0:	d50f      	bpl.n	8010e12 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010df2:	68da      	ldr	r2, [r3, #12]
 8010df4:	0710      	lsls	r0, r2, #28
 8010df6:	d50c      	bpl.n	8010e12 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010df8:	f06f 0208 	mvn.w	r2, #8
 8010dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010dfe:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010e00:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010e02:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010e04:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010e06:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010e08:	d05a      	beq.n	8010ec0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8010e0a:	f7ff ffc1 	bl	8010d90 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010e12:	6823      	ldr	r3, [r4, #0]
 8010e14:	691a      	ldr	r2, [r3, #16]
 8010e16:	06d2      	lsls	r2, r2, #27
 8010e18:	d510      	bpl.n	8010e3c <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010e1a:	68da      	ldr	r2, [r3, #12]
 8010e1c:	06d0      	lsls	r0, r2, #27
 8010e1e:	d50d      	bpl.n	8010e3c <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010e20:	f06f 0210 	mvn.w	r2, #16
 8010e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010e26:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010e28:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010e2a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010e2e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010e30:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010e32:	d04b      	beq.n	8010ecc <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8010e34:	f7ff ffac 	bl	8010d90 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010e3c:	6823      	ldr	r3, [r4, #0]
 8010e3e:	691a      	ldr	r2, [r3, #16]
 8010e40:	07d1      	lsls	r1, r2, #31
 8010e42:	d508      	bpl.n	8010e56 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010e44:	68da      	ldr	r2, [r3, #12]
 8010e46:	07d2      	lsls	r2, r2, #31
 8010e48:	d505      	bpl.n	8010e56 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010e4a:	f06f 0201 	mvn.w	r2, #1
 8010e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010e50:	4620      	mov	r0, r4
 8010e52:	f000 ffcb 	bl	8011dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010e56:	6823      	ldr	r3, [r4, #0]
 8010e58:	691a      	ldr	r2, [r3, #16]
 8010e5a:	0610      	lsls	r0, r2, #24
 8010e5c:	d508      	bpl.n	8010e70 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010e5e:	68da      	ldr	r2, [r3, #12]
 8010e60:	0611      	lsls	r1, r2, #24
 8010e62:	d505      	bpl.n	8010e70 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010e6a:	4620      	mov	r0, r4
 8010e6c:	f000 f8b7 	bl	8010fde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010e70:	6823      	ldr	r3, [r4, #0]
 8010e72:	691a      	ldr	r2, [r3, #16]
 8010e74:	0652      	lsls	r2, r2, #25
 8010e76:	d508      	bpl.n	8010e8a <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010e78:	68da      	ldr	r2, [r3, #12]
 8010e7a:	0650      	lsls	r0, r2, #25
 8010e7c:	d505      	bpl.n	8010e8a <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010e7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010e84:	4620      	mov	r0, r4
 8010e86:	f7ff ff85 	bl	8010d94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010e8a:	6823      	ldr	r3, [r4, #0]
 8010e8c:	691a      	ldr	r2, [r3, #16]
 8010e8e:	0691      	lsls	r1, r2, #26
 8010e90:	d522      	bpl.n	8010ed8 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010e92:	68da      	ldr	r2, [r3, #12]
 8010e94:	0692      	lsls	r2, r2, #26
 8010e96:	d51f      	bpl.n	8010ed8 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010e98:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010e9c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010e9e:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8010ea4:	f000 b89a 	b.w	8010fdc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ea8:	f7ff ff71 	bl	8010d8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010eac:	4620      	mov	r0, r4
 8010eae:	f7ff ff70 	bl	8010d92 <HAL_TIM_PWM_PulseFinishedCallback>
 8010eb2:	e783      	b.n	8010dbc <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010eb4:	f7ff ff6b 	bl	8010d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010eb8:	4620      	mov	r0, r4
 8010eba:	f7ff ff6a 	bl	8010d92 <HAL_TIM_PWM_PulseFinishedCallback>
 8010ebe:	e792      	b.n	8010de6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ec0:	f7ff ff65 	bl	8010d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	f7ff ff64 	bl	8010d92 <HAL_TIM_PWM_PulseFinishedCallback>
 8010eca:	e7a0      	b.n	8010e0e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ecc:	f7ff ff5f 	bl	8010d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ed0:	4620      	mov	r0, r4
 8010ed2:	f7ff ff5e 	bl	8010d92 <HAL_TIM_PWM_PulseFinishedCallback>
 8010ed6:	e7af      	b.n	8010e38 <HAL_TIM_IRQHandler+0xa2>
 8010ed8:	bd10      	pop	{r4, pc}
	...

08010edc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010edc:	4a30      	ldr	r2, [pc, #192]	; (8010fa0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8010ede:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010ee0:	4290      	cmp	r0, r2
 8010ee2:	d012      	beq.n	8010f0a <TIM_Base_SetConfig+0x2e>
 8010ee4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8010ee8:	d00f      	beq.n	8010f0a <TIM_Base_SetConfig+0x2e>
 8010eea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8010eee:	4290      	cmp	r0, r2
 8010ef0:	d00b      	beq.n	8010f0a <TIM_Base_SetConfig+0x2e>
 8010ef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010ef6:	4290      	cmp	r0, r2
 8010ef8:	d007      	beq.n	8010f0a <TIM_Base_SetConfig+0x2e>
 8010efa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010efe:	4290      	cmp	r0, r2
 8010f00:	d003      	beq.n	8010f0a <TIM_Base_SetConfig+0x2e>
 8010f02:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010f06:	4290      	cmp	r0, r2
 8010f08:	d119      	bne.n	8010f3e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8010f0a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010f10:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010f12:	4a23      	ldr	r2, [pc, #140]	; (8010fa0 <TIM_Base_SetConfig+0xc4>)
 8010f14:	4290      	cmp	r0, r2
 8010f16:	d029      	beq.n	8010f6c <TIM_Base_SetConfig+0x90>
 8010f18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8010f1c:	d026      	beq.n	8010f6c <TIM_Base_SetConfig+0x90>
 8010f1e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8010f22:	4290      	cmp	r0, r2
 8010f24:	d022      	beq.n	8010f6c <TIM_Base_SetConfig+0x90>
 8010f26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010f2a:	4290      	cmp	r0, r2
 8010f2c:	d01e      	beq.n	8010f6c <TIM_Base_SetConfig+0x90>
 8010f2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010f32:	4290      	cmp	r0, r2
 8010f34:	d01a      	beq.n	8010f6c <TIM_Base_SetConfig+0x90>
 8010f36:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010f3a:	4290      	cmp	r0, r2
 8010f3c:	d016      	beq.n	8010f6c <TIM_Base_SetConfig+0x90>
 8010f3e:	4a19      	ldr	r2, [pc, #100]	; (8010fa4 <TIM_Base_SetConfig+0xc8>)
 8010f40:	4290      	cmp	r0, r2
 8010f42:	d013      	beq.n	8010f6c <TIM_Base_SetConfig+0x90>
 8010f44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010f48:	4290      	cmp	r0, r2
 8010f4a:	d00f      	beq.n	8010f6c <TIM_Base_SetConfig+0x90>
 8010f4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010f50:	4290      	cmp	r0, r2
 8010f52:	d00b      	beq.n	8010f6c <TIM_Base_SetConfig+0x90>
 8010f54:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8010f58:	4290      	cmp	r0, r2
 8010f5a:	d007      	beq.n	8010f6c <TIM_Base_SetConfig+0x90>
 8010f5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010f60:	4290      	cmp	r0, r2
 8010f62:	d003      	beq.n	8010f6c <TIM_Base_SetConfig+0x90>
 8010f64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010f68:	4290      	cmp	r0, r2
 8010f6a:	d103      	bne.n	8010f74 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f6c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8010f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f72:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010f74:	694a      	ldr	r2, [r1, #20]
 8010f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f7a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8010f7c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f7e:	688b      	ldr	r3, [r1, #8]
 8010f80:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010f82:	680b      	ldr	r3, [r1, #0]
 8010f84:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010f86:	4b06      	ldr	r3, [pc, #24]	; (8010fa0 <TIM_Base_SetConfig+0xc4>)
 8010f88:	4298      	cmp	r0, r3
 8010f8a:	d003      	beq.n	8010f94 <TIM_Base_SetConfig+0xb8>
 8010f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010f90:	4298      	cmp	r0, r3
 8010f92:	d101      	bne.n	8010f98 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010f94:	690b      	ldr	r3, [r1, #16]
 8010f96:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	6143      	str	r3, [r0, #20]
 8010f9c:	4770      	bx	lr
 8010f9e:	bf00      	nop
 8010fa0:	40010000 	.word	0x40010000
 8010fa4:	40014000 	.word	0x40014000

08010fa8 <HAL_TIM_Base_Init>:
{
 8010fa8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8010faa:	4604      	mov	r4, r0
 8010fac:	b1a0      	cbz	r0, 8010fd8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010fae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8010fb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010fb6:	b91b      	cbnz	r3, 8010fc0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8010fb8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8010fbc:	f7ff fed6 	bl	8010d6c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8010fc0:	2302      	movs	r3, #2
 8010fc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010fc6:	6820      	ldr	r0, [r4, #0]
 8010fc8:	1d21      	adds	r1, r4, #4
 8010fca:	f7ff ff87 	bl	8010edc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8010fce:	2301      	movs	r3, #1
 8010fd0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8010fd4:	2000      	movs	r0, #0
 8010fd6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8010fd8:	2001      	movs	r0, #1
}
 8010fda:	bd10      	pop	{r4, pc}

08010fdc <HAL_TIMEx_CommutCallback>:
 8010fdc:	4770      	bx	lr

08010fde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010fde:	4770      	bx	lr

08010fe0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010fe0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8010fe2:	f000 fcad 	bl	8011940 <vTaskStartScheduler>
  
  return osOK;
}
 8010fe6:	2000      	movs	r0, #0
 8010fe8:	bd08      	pop	{r3, pc}

08010fea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010fea:	b570      	push	{r4, r5, r6, lr}
 8010fec:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010fee:	6946      	ldr	r6, [r0, #20]
 8010ff0:	692a      	ldr	r2, [r5, #16]
 8010ff2:	6840      	ldr	r0, [r0, #4]
 8010ff4:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8010ff8:	460b      	mov	r3, r1
 8010ffa:	b086      	sub	sp, #24
 8010ffc:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010ffe:	b176      	cbz	r6, 801101e <osThreadCreate+0x34>
 8011000:	69ad      	ldr	r5, [r5, #24]
 8011002:	b165      	cbz	r5, 801101e <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8011004:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8011006:	bf14      	ite	ne
 8011008:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801100a:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801100c:	9502      	str	r5, [sp, #8]
 801100e:	e88d 0050 	stmia.w	sp, {r4, r6}
 8011012:	f000 fc31 	bl	8011878 <xTaskCreateStatic>
 8011016:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011018:	9805      	ldr	r0, [sp, #20]
}
 801101a:	b006      	add	sp, #24
 801101c:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 801101e:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8011020:	bf14      	ite	ne
 8011022:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011024:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011026:	ad05      	add	r5, sp, #20
 8011028:	b292      	uxth	r2, r2
 801102a:	e88d 0030 	stmia.w	sp, {r4, r5}
 801102e:	f000 fc5a 	bl	80118e6 <xTaskCreate>
 8011032:	2801      	cmp	r0, #1
 8011034:	d0f0      	beq.n	8011018 <osThreadCreate+0x2e>
      return NULL;
 8011036:	2000      	movs	r0, #0
 8011038:	e7ef      	b.n	801101a <osThreadCreate+0x30>

0801103a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801103a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801103c:	2800      	cmp	r0, #0
 801103e:	bf08      	it	eq
 8011040:	2001      	moveq	r0, #1
 8011042:	f000 fdc5 	bl	8011bd0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011046:	2000      	movs	r0, #0
 8011048:	bd08      	pop	{r3, pc}

0801104a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801104a:	f100 0308 	add.w	r3, r0, #8
 801104e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011050:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011054:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011056:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011058:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801105a:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801105c:	6003      	str	r3, [r0, #0]
 801105e:	4770      	bx	lr

08011060 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8011060:	2300      	movs	r3, #0
 8011062:	6103      	str	r3, [r0, #16]
 8011064:	4770      	bx	lr

08011066 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8011066:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011068:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801106a:	689a      	ldr	r2, [r3, #8]
 801106c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801106e:	689a      	ldr	r2, [r3, #8]
 8011070:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011072:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8011074:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011076:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8011078:	3301      	adds	r3, #1
 801107a:	6003      	str	r3, [r0, #0]
 801107c:	4770      	bx	lr

0801107e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801107e:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011080:	1c53      	adds	r3, r2, #1
{
 8011082:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8011084:	d10a      	bne.n	801109c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011086:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011088:	685a      	ldr	r2, [r3, #4]
 801108a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801108c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801108e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8011090:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8011092:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011094:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8011096:	3301      	adds	r3, #1
 8011098:	6003      	str	r3, [r0, #0]
 801109a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801109c:	f100 0308 	add.w	r3, r0, #8
 80110a0:	685c      	ldr	r4, [r3, #4]
 80110a2:	6825      	ldr	r5, [r4, #0]
 80110a4:	42aa      	cmp	r2, r5
 80110a6:	d3ef      	bcc.n	8011088 <vListInsert+0xa>
 80110a8:	4623      	mov	r3, r4
 80110aa:	e7f9      	b.n	80110a0 <vListInsert+0x22>

080110ac <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80110ac:	6841      	ldr	r1, [r0, #4]
 80110ae:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80110b0:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80110b2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80110b4:	6882      	ldr	r2, [r0, #8]
 80110b6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80110b8:	6859      	ldr	r1, [r3, #4]
 80110ba:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80110bc:	bf08      	it	eq
 80110be:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80110c0:	2200      	movs	r2, #0
 80110c2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80110c4:	681a      	ldr	r2, [r3, #0]
 80110c6:	3a01      	subs	r2, #1
 80110c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80110ca:	6818      	ldr	r0, [r3, #0]
}
 80110cc:	4770      	bx	lr
	...

080110d0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80110d0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80110d2:	2300      	movs	r3, #0
 80110d4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80110d6:	4b0d      	ldr	r3, [pc, #52]	; (801110c <prvTaskExitError+0x3c>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	3301      	adds	r3, #1
 80110dc:	d008      	beq.n	80110f0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80110de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e2:	f383 8811 	msr	BASEPRI, r3
 80110e6:	f3bf 8f6f 	isb	sy
 80110ea:	f3bf 8f4f 	dsb	sy
 80110ee:	e7fe      	b.n	80110ee <prvTaskExitError+0x1e>
 80110f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f4:	f383 8811 	msr	BASEPRI, r3
 80110f8:	f3bf 8f6f 	isb	sy
 80110fc:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011100:	9b01      	ldr	r3, [sp, #4]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d0fc      	beq.n	8011100 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011106:	b002      	add	sp, #8
 8011108:	4770      	bx	lr
 801110a:	bf00      	nop
 801110c:	20000004 	.word	0x20000004

08011110 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011110:	4808      	ldr	r0, [pc, #32]	; (8011134 <prvPortStartFirstTask+0x24>)
 8011112:	6800      	ldr	r0, [r0, #0]
 8011114:	6800      	ldr	r0, [r0, #0]
 8011116:	f380 8808 	msr	MSP, r0
 801111a:	f04f 0000 	mov.w	r0, #0
 801111e:	f380 8814 	msr	CONTROL, r0
 8011122:	b662      	cpsie	i
 8011124:	b661      	cpsie	f
 8011126:	f3bf 8f4f 	dsb	sy
 801112a:	f3bf 8f6f 	isb	sy
 801112e:	df00      	svc	0
 8011130:	bf00      	nop
 8011132:	0000      	.short	0x0000
 8011134:	e000ed08 	.word	0xe000ed08

08011138 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011138:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011148 <vPortEnableVFP+0x10>
 801113c:	6801      	ldr	r1, [r0, #0]
 801113e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011142:	6001      	str	r1, [r0, #0]
 8011144:	4770      	bx	lr
 8011146:	0000      	.short	0x0000
 8011148:	e000ed88 	.word	0xe000ed88

0801114c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801114c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011150:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011154:	4b07      	ldr	r3, [pc, #28]	; (8011174 <pxPortInitialiseStack+0x28>)
 8011156:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801115a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801115e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011162:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011166:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801116a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 801116e:	3844      	subs	r0, #68	; 0x44
 8011170:	4770      	bx	lr
 8011172:	bf00      	nop
 8011174:	080110d1 	.word	0x080110d1
	...

08011180 <SVC_Handler>:
	__asm volatile (
 8011180:	4b07      	ldr	r3, [pc, #28]	; (80111a0 <pxCurrentTCBConst2>)
 8011182:	6819      	ldr	r1, [r3, #0]
 8011184:	6808      	ldr	r0, [r1, #0]
 8011186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801118a:	f380 8809 	msr	PSP, r0
 801118e:	f3bf 8f6f 	isb	sy
 8011192:	f04f 0000 	mov.w	r0, #0
 8011196:	f380 8811 	msr	BASEPRI, r0
 801119a:	4770      	bx	lr
 801119c:	f3af 8000 	nop.w

080111a0 <pxCurrentTCBConst2>:
 80111a0:	20003c48 	.word	0x20003c48

080111a4 <vPortEnterCritical>:
 80111a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a8:	f383 8811 	msr	BASEPRI, r3
 80111ac:	f3bf 8f6f 	isb	sy
 80111b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80111b4:	4a0a      	ldr	r2, [pc, #40]	; (80111e0 <vPortEnterCritical+0x3c>)
 80111b6:	6813      	ldr	r3, [r2, #0]
 80111b8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80111ba:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80111bc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80111be:	d10d      	bne.n	80111dc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80111c0:	4b08      	ldr	r3, [pc, #32]	; (80111e4 <vPortEnterCritical+0x40>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80111c8:	d008      	beq.n	80111dc <vPortEnterCritical+0x38>
 80111ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ce:	f383 8811 	msr	BASEPRI, r3
 80111d2:	f3bf 8f6f 	isb	sy
 80111d6:	f3bf 8f4f 	dsb	sy
 80111da:	e7fe      	b.n	80111da <vPortEnterCritical+0x36>
 80111dc:	4770      	bx	lr
 80111de:	bf00      	nop
 80111e0:	20000004 	.word	0x20000004
 80111e4:	e000ed04 	.word	0xe000ed04

080111e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80111e8:	4a08      	ldr	r2, [pc, #32]	; (801120c <vPortExitCritical+0x24>)
 80111ea:	6813      	ldr	r3, [r2, #0]
 80111ec:	b943      	cbnz	r3, 8011200 <vPortExitCritical+0x18>
 80111ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f2:	f383 8811 	msr	BASEPRI, r3
 80111f6:	f3bf 8f6f 	isb	sy
 80111fa:	f3bf 8f4f 	dsb	sy
 80111fe:	e7fe      	b.n	80111fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8011200:	3b01      	subs	r3, #1
 8011202:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011204:	b90b      	cbnz	r3, 801120a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011206:	f383 8811 	msr	BASEPRI, r3
 801120a:	4770      	bx	lr
 801120c:	20000004 	.word	0x20000004

08011210 <PendSV_Handler>:
	__asm volatile
 8011210:	f3ef 8009 	mrs	r0, PSP
 8011214:	f3bf 8f6f 	isb	sy
 8011218:	4b15      	ldr	r3, [pc, #84]	; (8011270 <pxCurrentTCBConst>)
 801121a:	681a      	ldr	r2, [r3, #0]
 801121c:	f01e 0f10 	tst.w	lr, #16
 8011220:	bf08      	it	eq
 8011222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801122a:	6010      	str	r0, [r2, #0]
 801122c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011234:	f380 8811 	msr	BASEPRI, r0
 8011238:	f3bf 8f4f 	dsb	sy
 801123c:	f3bf 8f6f 	isb	sy
 8011240:	f000 fcea 	bl	8011c18 <vTaskSwitchContext>
 8011244:	f04f 0000 	mov.w	r0, #0
 8011248:	f380 8811 	msr	BASEPRI, r0
 801124c:	bc09      	pop	{r0, r3}
 801124e:	6819      	ldr	r1, [r3, #0]
 8011250:	6808      	ldr	r0, [r1, #0]
 8011252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011256:	f01e 0f10 	tst.w	lr, #16
 801125a:	bf08      	it	eq
 801125c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011260:	f380 8809 	msr	PSP, r0
 8011264:	f3bf 8f6f 	isb	sy
 8011268:	4770      	bx	lr
 801126a:	bf00      	nop
 801126c:	f3af 8000 	nop.w

08011270 <pxCurrentTCBConst>:
 8011270:	20003c48 	.word	0x20003c48

08011274 <SysTick_Handler>:
{
 8011274:	b508      	push	{r3, lr}
	__asm volatile
 8011276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801127a:	f383 8811 	msr	BASEPRI, r3
 801127e:	f3bf 8f6f 	isb	sy
 8011282:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8011286:	f000 fb99 	bl	80119bc <xTaskIncrementTick>
 801128a:	b118      	cbz	r0, 8011294 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801128c:	4b03      	ldr	r3, [pc, #12]	; (801129c <SysTick_Handler+0x28>)
 801128e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011292:	601a      	str	r2, [r3, #0]
	__asm volatile
 8011294:	2300      	movs	r3, #0
 8011296:	f383 8811 	msr	BASEPRI, r3
 801129a:	bd08      	pop	{r3, pc}
 801129c:	e000ed04 	.word	0xe000ed04

080112a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80112a0:	4a08      	ldr	r2, [pc, #32]	; (80112c4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80112a2:	4909      	ldr	r1, [pc, #36]	; (80112c8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80112a4:	2300      	movs	r3, #0
 80112a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80112a8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80112aa:	4b08      	ldr	r3, [pc, #32]	; (80112cc <vPortSetupTimerInterrupt+0x2c>)
 80112ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80112b6:	4906      	ldr	r1, [pc, #24]	; (80112d0 <vPortSetupTimerInterrupt+0x30>)
 80112b8:	3b01      	subs	r3, #1
 80112ba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80112bc:	2307      	movs	r3, #7
 80112be:	6013      	str	r3, [r2, #0]
 80112c0:	4770      	bx	lr
 80112c2:	bf00      	nop
 80112c4:	e000e010 	.word	0xe000e010
 80112c8:	e000e018 	.word	0xe000e018
 80112cc:	20000008 	.word	0x20000008
 80112d0:	e000e014 	.word	0xe000e014

080112d4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80112d4:	4b39      	ldr	r3, [pc, #228]	; (80113bc <xPortStartScheduler+0xe8>)
 80112d6:	4a3a      	ldr	r2, [pc, #232]	; (80113c0 <xPortStartScheduler+0xec>)
{
 80112d8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80112da:	6819      	ldr	r1, [r3, #0]
 80112dc:	4291      	cmp	r1, r2
 80112de:	d108      	bne.n	80112f2 <xPortStartScheduler+0x1e>
	__asm volatile
 80112e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e4:	f383 8811 	msr	BASEPRI, r3
 80112e8:	f3bf 8f6f 	isb	sy
 80112ec:	f3bf 8f4f 	dsb	sy
 80112f0:	e7fe      	b.n	80112f0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80112f2:	681a      	ldr	r2, [r3, #0]
 80112f4:	4b33      	ldr	r3, [pc, #204]	; (80113c4 <xPortStartScheduler+0xf0>)
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d108      	bne.n	801130c <xPortStartScheduler+0x38>
 80112fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112fe:	f383 8811 	msr	BASEPRI, r3
 8011302:	f3bf 8f6f 	isb	sy
 8011306:	f3bf 8f4f 	dsb	sy
 801130a:	e7fe      	b.n	801130a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801130c:	4b2e      	ldr	r3, [pc, #184]	; (80113c8 <xPortStartScheduler+0xf4>)
 801130e:	781a      	ldrb	r2, [r3, #0]
 8011310:	b2d2      	uxtb	r2, r2
 8011312:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011314:	22ff      	movs	r2, #255	; 0xff
 8011316:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011318:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801131a:	4a2c      	ldr	r2, [pc, #176]	; (80113cc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801131c:	b2db      	uxtb	r3, r3
 801131e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011322:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011326:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801132a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801132c:	4b28      	ldr	r3, [pc, #160]	; (80113d0 <xPortStartScheduler+0xfc>)
 801132e:	2207      	movs	r2, #7
 8011330:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011332:	2100      	movs	r1, #0
 8011334:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8011338:	0600      	lsls	r0, r0, #24
 801133a:	f102 34ff 	add.w	r4, r2, #4294967295
 801133e:	d40d      	bmi.n	801135c <xPortStartScheduler+0x88>
 8011340:	b101      	cbz	r1, 8011344 <xPortStartScheduler+0x70>
 8011342:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011344:	681a      	ldr	r2, [r3, #0]
 8011346:	2a03      	cmp	r2, #3
 8011348:	d011      	beq.n	801136e <xPortStartScheduler+0x9a>
 801134a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801134e:	f383 8811 	msr	BASEPRI, r3
 8011352:	f3bf 8f6f 	isb	sy
 8011356:	f3bf 8f4f 	dsb	sy
 801135a:	e7fe      	b.n	801135a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801135c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011360:	0052      	lsls	r2, r2, #1
 8011362:	b2d2      	uxtb	r2, r2
 8011364:	f88d 2003 	strb.w	r2, [sp, #3]
 8011368:	2101      	movs	r1, #1
 801136a:	4622      	mov	r2, r4
 801136c:	e7e2      	b.n	8011334 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801136e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011370:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8011374:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011376:	9b01      	ldr	r3, [sp, #4]
 8011378:	4a13      	ldr	r2, [pc, #76]	; (80113c8 <xPortStartScheduler+0xf4>)
 801137a:	b2db      	uxtb	r3, r3
 801137c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801137e:	4b15      	ldr	r3, [pc, #84]	; (80113d4 <xPortStartScheduler+0x100>)
 8011380:	681a      	ldr	r2, [r3, #0]
 8011382:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8011386:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011388:	681a      	ldr	r2, [r3, #0]
 801138a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 801138e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8011390:	f7ff ff86 	bl	80112a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8011394:	4b10      	ldr	r3, [pc, #64]	; (80113d8 <xPortStartScheduler+0x104>)
 8011396:	2400      	movs	r4, #0
 8011398:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 801139a:	f7ff fecd 	bl	8011138 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801139e:	4a0f      	ldr	r2, [pc, #60]	; (80113dc <xPortStartScheduler+0x108>)
 80113a0:	6813      	ldr	r3, [r2, #0]
 80113a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80113a6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80113a8:	f7ff feb2 	bl	8011110 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80113ac:	f000 fc34 	bl	8011c18 <vTaskSwitchContext>
	prvTaskExitError();
 80113b0:	f7ff fe8e 	bl	80110d0 <prvTaskExitError>
}
 80113b4:	4620      	mov	r0, r4
 80113b6:	b002      	add	sp, #8
 80113b8:	bd10      	pop	{r4, pc}
 80113ba:	bf00      	nop
 80113bc:	e000ed00 	.word	0xe000ed00
 80113c0:	410fc271 	.word	0x410fc271
 80113c4:	410fc270 	.word	0x410fc270
 80113c8:	e000e400 	.word	0xe000e400
 80113cc:	20000028 	.word	0x20000028
 80113d0:	2000002c 	.word	0x2000002c
 80113d4:	e000ed20 	.word	0xe000ed20
 80113d8:	20000004 	.word	0x20000004
 80113dc:	e000ef34 	.word	0xe000ef34

080113e0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80113e0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80113e2:	4b0f      	ldr	r3, [pc, #60]	; (8011420 <prvInsertBlockIntoFreeList+0x40>)
 80113e4:	681a      	ldr	r2, [r3, #0]
 80113e6:	4282      	cmp	r2, r0
 80113e8:	d318      	bcc.n	801141c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80113ea:	685c      	ldr	r4, [r3, #4]
 80113ec:	1919      	adds	r1, r3, r4
 80113ee:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80113f0:	bf01      	itttt	eq
 80113f2:	6841      	ldreq	r1, [r0, #4]
 80113f4:	4618      	moveq	r0, r3
 80113f6:	1909      	addeq	r1, r1, r4
 80113f8:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80113fa:	6844      	ldr	r4, [r0, #4]
 80113fc:	1901      	adds	r1, r0, r4
 80113fe:	428a      	cmp	r2, r1
 8011400:	d107      	bne.n	8011412 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011402:	4908      	ldr	r1, [pc, #32]	; (8011424 <prvInsertBlockIntoFreeList+0x44>)
 8011404:	6809      	ldr	r1, [r1, #0]
 8011406:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011408:	bf1f      	itttt	ne
 801140a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801140c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801140e:	1909      	addne	r1, r1, r4
 8011410:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011412:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011414:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011416:	bf18      	it	ne
 8011418:	6018      	strne	r0, [r3, #0]
 801141a:	bd10      	pop	{r4, pc}
 801141c:	4613      	mov	r3, r2
 801141e:	e7e1      	b.n	80113e4 <prvInsertBlockIntoFreeList+0x4>
 8011420:	20003c40 	.word	0x20003c40
 8011424:	20000030 	.word	0x20000030

08011428 <pvPortMalloc>:
{
 8011428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801142c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801142e:	f000 fabd 	bl	80119ac <vTaskSuspendAll>
		if( pxEnd == NULL )
 8011432:	493e      	ldr	r1, [pc, #248]	; (801152c <pvPortMalloc+0x104>)
 8011434:	4d3e      	ldr	r5, [pc, #248]	; (8011530 <pvPortMalloc+0x108>)
 8011436:	680b      	ldr	r3, [r1, #0]
 8011438:	bb0b      	cbnz	r3, 801147e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 801143a:	4a3e      	ldr	r2, [pc, #248]	; (8011534 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801143c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801143e:	bf1f      	itttt	ne
 8011440:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011442:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011446:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 801144a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801144c:	bf14      	ite	ne
 801144e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011450:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011454:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8011456:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011458:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801145c:	4e36      	ldr	r6, [pc, #216]	; (8011538 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 801145e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011460:	2000      	movs	r0, #0
 8011462:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011464:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8011466:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011468:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801146a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801146c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801146e:	4b33      	ldr	r3, [pc, #204]	; (801153c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011470:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011472:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011474:	4b32      	ldr	r3, [pc, #200]	; (8011540 <pvPortMalloc+0x118>)
 8011476:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011478:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801147c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801147e:	682f      	ldr	r7, [r5, #0]
 8011480:	4227      	tst	r7, r4
 8011482:	d116      	bne.n	80114b2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8011484:	2c00      	cmp	r4, #0
 8011486:	d041      	beq.n	801150c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8011488:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801148c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801148e:	bf1c      	itt	ne
 8011490:	f023 0307 	bicne.w	r3, r3, #7
 8011494:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011496:	b163      	cbz	r3, 80114b2 <pvPortMalloc+0x8a>
 8011498:	4a29      	ldr	r2, [pc, #164]	; (8011540 <pvPortMalloc+0x118>)
 801149a:	6816      	ldr	r6, [r2, #0]
 801149c:	42b3      	cmp	r3, r6
 801149e:	4690      	mov	r8, r2
 80114a0:	d807      	bhi.n	80114b2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80114a2:	4a25      	ldr	r2, [pc, #148]	; (8011538 <pvPortMalloc+0x110>)
 80114a4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80114a6:	6868      	ldr	r0, [r5, #4]
 80114a8:	4283      	cmp	r3, r0
 80114aa:	d804      	bhi.n	80114b6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80114ac:	6809      	ldr	r1, [r1, #0]
 80114ae:	428d      	cmp	r5, r1
 80114b0:	d107      	bne.n	80114c2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80114b2:	2400      	movs	r4, #0
 80114b4:	e02a      	b.n	801150c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80114b6:	682c      	ldr	r4, [r5, #0]
 80114b8:	2c00      	cmp	r4, #0
 80114ba:	d0f7      	beq.n	80114ac <pvPortMalloc+0x84>
 80114bc:	462a      	mov	r2, r5
 80114be:	4625      	mov	r5, r4
 80114c0:	e7f1      	b.n	80114a6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80114c2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80114c4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80114c6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80114c8:	1ac2      	subs	r2, r0, r3
 80114ca:	2a10      	cmp	r2, #16
 80114cc:	d90f      	bls.n	80114ee <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80114ce:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80114d0:	0741      	lsls	r1, r0, #29
 80114d2:	d008      	beq.n	80114e6 <pvPortMalloc+0xbe>
 80114d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d8:	f383 8811 	msr	BASEPRI, r3
 80114dc:	f3bf 8f6f 	isb	sy
 80114e0:	f3bf 8f4f 	dsb	sy
 80114e4:	e7fe      	b.n	80114e4 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80114e6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80114e8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80114ea:	f7ff ff79 	bl	80113e0 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80114ee:	4913      	ldr	r1, [pc, #76]	; (801153c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80114f0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80114f2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80114f4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80114f6:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80114f8:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80114fa:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80114fe:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011502:	bf38      	it	cc
 8011504:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011506:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011508:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801150a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 801150c:	f000 fae8 	bl	8011ae0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011510:	0763      	lsls	r3, r4, #29
 8011512:	d008      	beq.n	8011526 <pvPortMalloc+0xfe>
 8011514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011518:	f383 8811 	msr	BASEPRI, r3
 801151c:	f3bf 8f6f 	isb	sy
 8011520:	f3bf 8f4f 	dsb	sy
 8011524:	e7fe      	b.n	8011524 <pvPortMalloc+0xfc>
}
 8011526:	4620      	mov	r0, r4
 8011528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801152c:	20000030 	.word	0x20000030
 8011530:	20003c34 	.word	0x20003c34
 8011534:	20000034 	.word	0x20000034
 8011538:	20003c40 	.word	0x20003c40
 801153c:	20003c3c 	.word	0x20003c3c
 8011540:	20003c38 	.word	0x20003c38

08011544 <vPortFree>:
{
 8011544:	b510      	push	{r4, lr}
	if( pv != NULL )
 8011546:	4604      	mov	r4, r0
 8011548:	b370      	cbz	r0, 80115a8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801154a:	4a18      	ldr	r2, [pc, #96]	; (80115ac <vPortFree+0x68>)
 801154c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011550:	6812      	ldr	r2, [r2, #0]
 8011552:	4213      	tst	r3, r2
 8011554:	d108      	bne.n	8011568 <vPortFree+0x24>
 8011556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801155a:	f383 8811 	msr	BASEPRI, r3
 801155e:	f3bf 8f6f 	isb	sy
 8011562:	f3bf 8f4f 	dsb	sy
 8011566:	e7fe      	b.n	8011566 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011568:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801156c:	b141      	cbz	r1, 8011580 <vPortFree+0x3c>
 801156e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011572:	f383 8811 	msr	BASEPRI, r3
 8011576:	f3bf 8f6f 	isb	sy
 801157a:	f3bf 8f4f 	dsb	sy
 801157e:	e7fe      	b.n	801157e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011580:	ea23 0302 	bic.w	r3, r3, r2
 8011584:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8011588:	f000 fa10 	bl	80119ac <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801158c:	4a08      	ldr	r2, [pc, #32]	; (80115b0 <vPortFree+0x6c>)
 801158e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011592:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011594:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011598:	440b      	add	r3, r1
 801159a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801159c:	f7ff ff20 	bl	80113e0 <prvInsertBlockIntoFreeList>
}
 80115a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80115a4:	f000 ba9c 	b.w	8011ae0 <xTaskResumeAll>
 80115a8:	bd10      	pop	{r4, pc}
 80115aa:	bf00      	nop
 80115ac:	20003c34 	.word	0x20003c34
 80115b0:	20003c38 	.word	0x20003c38

080115b4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80115b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115b8:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80115ba:	f7ff fdf3 	bl	80111a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80115be:	4b2d      	ldr	r3, [pc, #180]	; (8011674 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 80115c0:	4c2d      	ldr	r4, [pc, #180]	; (8011678 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 80115c2:	681a      	ldr	r2, [r3, #0]
 80115c4:	4f2d      	ldr	r7, [pc, #180]	; (801167c <prvAddNewTaskToReadyList+0xc8>)
 80115c6:	3201      	adds	r2, #1
 80115c8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80115ca:	6825      	ldr	r5, [r4, #0]
 80115cc:	2d00      	cmp	r5, #0
 80115ce:	d145      	bne.n	801165c <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80115d0:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	2b01      	cmp	r3, #1
 80115d6:	d11c      	bne.n	8011612 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80115d8:	1978      	adds	r0, r7, r5
 80115da:	3514      	adds	r5, #20
 80115dc:	f7ff fd35 	bl	801104a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80115e0:	2d8c      	cmp	r5, #140	; 0x8c
 80115e2:	d1f9      	bne.n	80115d8 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 80115e4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80116a8 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 80115e8:	4d25      	ldr	r5, [pc, #148]	; (8011680 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 80115ea:	4640      	mov	r0, r8
 80115ec:	f7ff fd2d 	bl	801104a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80115f0:	4628      	mov	r0, r5
 80115f2:	f7ff fd2a 	bl	801104a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80115f6:	4823      	ldr	r0, [pc, #140]	; (8011684 <prvAddNewTaskToReadyList+0xd0>)
 80115f8:	f7ff fd27 	bl	801104a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80115fc:	4822      	ldr	r0, [pc, #136]	; (8011688 <prvAddNewTaskToReadyList+0xd4>)
 80115fe:	f7ff fd24 	bl	801104a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011602:	4822      	ldr	r0, [pc, #136]	; (801168c <prvAddNewTaskToReadyList+0xd8>)
 8011604:	f7ff fd21 	bl	801104a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011608:	4b21      	ldr	r3, [pc, #132]	; (8011690 <prvAddNewTaskToReadyList+0xdc>)
 801160a:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801160e:	4b21      	ldr	r3, [pc, #132]	; (8011694 <prvAddNewTaskToReadyList+0xe0>)
 8011610:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8011612:	4a21      	ldr	r2, [pc, #132]	; (8011698 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8011614:	4921      	ldr	r1, [pc, #132]	; (801169c <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8011616:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8011618:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 801161a:	3301      	adds	r3, #1
 801161c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 801161e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8011620:	2301      	movs	r3, #1
 8011622:	4093      	lsls	r3, r2
 8011624:	4303      	orrs	r3, r0
 8011626:	2014      	movs	r0, #20
 8011628:	600b      	str	r3, [r1, #0]
 801162a:	fb00 7002 	mla	r0, r0, r2, r7
 801162e:	1d31      	adds	r1, r6, #4
 8011630:	f7ff fd19 	bl	8011066 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8011634:	f7ff fdd8 	bl	80111e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8011638:	4b19      	ldr	r3, [pc, #100]	; (80116a0 <prvAddNewTaskToReadyList+0xec>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	b163      	cbz	r3, 8011658 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801163e:	6823      	ldr	r3, [r4, #0]
 8011640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011642:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8011644:	429a      	cmp	r2, r3
 8011646:	d207      	bcs.n	8011658 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8011648:	4b16      	ldr	r3, [pc, #88]	; (80116a4 <prvAddNewTaskToReadyList+0xf0>)
 801164a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801164e:	601a      	str	r2, [r3, #0]
 8011650:	f3bf 8f4f 	dsb	sy
 8011654:	f3bf 8f6f 	isb	sy
 8011658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 801165c:	4b10      	ldr	r3, [pc, #64]	; (80116a0 <prvAddNewTaskToReadyList+0xec>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d1d6      	bne.n	8011612 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011664:	6823      	ldr	r3, [r4, #0]
 8011666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011668:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 801166a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 801166c:	bf98      	it	ls
 801166e:	6026      	strls	r6, [r4, #0]
 8011670:	e7cf      	b.n	8011612 <prvAddNewTaskToReadyList+0x5e>
 8011672:	bf00      	nop
 8011674:	20003ce0 	.word	0x20003ce0
 8011678:	20003c48 	.word	0x20003c48
 801167c:	20003c54 	.word	0x20003c54
 8011680:	20003d0c 	.word	0x20003d0c
 8011684:	20003d28 	.word	0x20003d28
 8011688:	20003d54 	.word	0x20003d54
 801168c:	20003d40 	.word	0x20003d40
 8011690:	20003c4c 	.word	0x20003c4c
 8011694:	20003c50 	.word	0x20003c50
 8011698:	20003cf0 	.word	0x20003cf0
 801169c:	20003cf4 	.word	0x20003cf4
 80116a0:	20003d3c 	.word	0x20003d3c
 80116a4:	e000ed04 	.word	0xe000ed04
 80116a8:	20003cf8 	.word	0x20003cf8

080116ac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80116ac:	4a06      	ldr	r2, [pc, #24]	; (80116c8 <prvResetNextTaskUnblockTime+0x1c>)
 80116ae:	6813      	ldr	r3, [r2, #0]
 80116b0:	6819      	ldr	r1, [r3, #0]
 80116b2:	4b06      	ldr	r3, [pc, #24]	; (80116cc <prvResetNextTaskUnblockTime+0x20>)
 80116b4:	b919      	cbnz	r1, 80116be <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80116b6:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80116ba:	601a      	str	r2, [r3, #0]
 80116bc:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80116be:	6812      	ldr	r2, [r2, #0]
 80116c0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80116c2:	68d2      	ldr	r2, [r2, #12]
 80116c4:	6852      	ldr	r2, [r2, #4]
 80116c6:	e7f8      	b.n	80116ba <prvResetNextTaskUnblockTime+0xe>
 80116c8:	20003c4c 	.word	0x20003c4c
 80116cc:	20003d20 	.word	0x20003d20

080116d0 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80116d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80116d6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80116da:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80116dc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80116e0:	3a01      	subs	r2, #1
 80116e2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80116e6:	469a      	mov	sl, r3
 80116e8:	4681      	mov	r9, r0
 80116ea:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80116ec:	f026 0607 	bic.w	r6, r6, #7
 80116f0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80116f4:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80116f6:	7858      	ldrb	r0, [r3, #1]
 80116f8:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 80116fc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8011700:	b108      	cbz	r0, 8011706 <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011702:	428b      	cmp	r3, r1
 8011704:	d1f7      	bne.n	80116f6 <prvInitialiseNewTask.isra.2+0x26>
 8011706:	9d08      	ldr	r5, [sp, #32]
 8011708:	2d06      	cmp	r5, #6
 801170a:	bf28      	it	cs
 801170c:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801170e:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8011710:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8011712:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011714:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011716:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 801171a:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801171c:	f7ff fca0 	bl	8011060 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011720:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011724:	f104 0018 	add.w	r0, r4, #24
 8011728:	f7ff fc9a 	bl	8011060 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 801172c:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801172e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011730:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011732:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011734:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011738:	4652      	mov	r2, sl
 801173a:	4649      	mov	r1, r9
 801173c:	4630      	mov	r0, r6
 801173e:	f7ff fd05 	bl	801114c <pxPortInitialiseStack>
 8011742:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8011744:	f1b8 0f00 	cmp.w	r8, #0
 8011748:	d001      	beq.n	801174e <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801174a:	f8c8 4000 	str.w	r4, [r8]
 801174e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011752 <prvDeleteTCB>:
	{
 8011752:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011754:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8011758:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801175a:	b93b      	cbnz	r3, 801176c <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 801175c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801175e:	f7ff fef1 	bl	8011544 <vPortFree>
				vPortFree( pxTCB );
 8011762:	4620      	mov	r0, r4
	}
 8011764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8011768:	f7ff beec 	b.w	8011544 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801176c:	2b01      	cmp	r3, #1
 801176e:	d0f9      	beq.n	8011764 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011770:	2b02      	cmp	r3, #2
 8011772:	d008      	beq.n	8011786 <prvDeleteTCB+0x34>
 8011774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011778:	f383 8811 	msr	BASEPRI, r3
 801177c:	f3bf 8f6f 	isb	sy
 8011780:	f3bf 8f4f 	dsb	sy
 8011784:	e7fe      	b.n	8011784 <prvDeleteTCB+0x32>
 8011786:	bd10      	pop	{r4, pc}

08011788 <prvIdleTask>:
{
 8011788:	b580      	push	{r7, lr}
				taskYIELD();
 801178a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80117e8 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 801178e:	4f12      	ldr	r7, [pc, #72]	; (80117d8 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011790:	4c12      	ldr	r4, [pc, #72]	; (80117dc <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8011792:	4d13      	ldr	r5, [pc, #76]	; (80117e0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011794:	6823      	ldr	r3, [r4, #0]
 8011796:	b963      	cbnz	r3, 80117b2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011798:	4b12      	ldr	r3, [pc, #72]	; (80117e4 <prvIdleTask+0x5c>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	2b01      	cmp	r3, #1
 801179e:	d9f8      	bls.n	8011792 <prvIdleTask+0xa>
				taskYIELD();
 80117a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80117a4:	f8c8 3000 	str.w	r3, [r8]
 80117a8:	f3bf 8f4f 	dsb	sy
 80117ac:	f3bf 8f6f 	isb	sy
 80117b0:	e7ee      	b.n	8011790 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80117b2:	f7ff fcf7 	bl	80111a4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117ba:	1d30      	adds	r0, r6, #4
 80117bc:	f7ff fc76 	bl	80110ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80117c0:	682b      	ldr	r3, [r5, #0]
 80117c2:	3b01      	subs	r3, #1
 80117c4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80117c6:	6823      	ldr	r3, [r4, #0]
 80117c8:	3b01      	subs	r3, #1
 80117ca:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80117cc:	f7ff fd0c 	bl	80111e8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80117d0:	4630      	mov	r0, r6
 80117d2:	f7ff ffbe 	bl	8011752 <prvDeleteTCB>
 80117d6:	e7dd      	b.n	8011794 <prvIdleTask+0xc>
 80117d8:	20003d54 	.word	0x20003d54
 80117dc:	20003ce4 	.word	0x20003ce4
 80117e0:	20003ce0 	.word	0x20003ce0
 80117e4:	20003c54 	.word	0x20003c54
 80117e8:	e000ed04 	.word	0xe000ed04

080117ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80117ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80117ee:	4b1b      	ldr	r3, [pc, #108]	; (801185c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80117f0:	4e1b      	ldr	r6, [pc, #108]	; (8011860 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80117f2:	681d      	ldr	r5, [r3, #0]
{
 80117f4:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80117f6:	6830      	ldr	r0, [r6, #0]
 80117f8:	3004      	adds	r0, #4
{
 80117fa:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80117fc:	f7ff fc56 	bl	80110ac <uxListRemove>
 8011800:	4633      	mov	r3, r6
 8011802:	b940      	cbnz	r0, 8011816 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8011804:	6831      	ldr	r1, [r6, #0]
 8011806:	4e17      	ldr	r6, [pc, #92]	; (8011864 <prvAddCurrentTaskToDelayedList+0x78>)
 8011808:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801180a:	6832      	ldr	r2, [r6, #0]
 801180c:	2001      	movs	r0, #1
 801180e:	4088      	lsls	r0, r1
 8011810:	ea22 0200 	bic.w	r2, r2, r0
 8011814:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011816:	1c62      	adds	r2, r4, #1
 8011818:	d107      	bne.n	801182a <prvAddCurrentTaskToDelayedList+0x3e>
 801181a:	b137      	cbz	r7, 801182a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801181c:	6819      	ldr	r1, [r3, #0]
 801181e:	4812      	ldr	r0, [pc, #72]	; (8011868 <prvAddCurrentTaskToDelayedList+0x7c>)
 8011820:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011822:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011826:	f7ff bc1e 	b.w	8011066 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801182a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801182c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 801182e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011830:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8011832:	d907      	bls.n	8011844 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011834:	4a0d      	ldr	r2, [pc, #52]	; (801186c <prvAddCurrentTaskToDelayedList+0x80>)
 8011836:	6810      	ldr	r0, [r2, #0]
 8011838:	6819      	ldr	r1, [r3, #0]
}
 801183a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801183e:	3104      	adds	r1, #4
 8011840:	f7ff bc1d 	b.w	801107e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011844:	4a0a      	ldr	r2, [pc, #40]	; (8011870 <prvAddCurrentTaskToDelayedList+0x84>)
 8011846:	6810      	ldr	r0, [r2, #0]
 8011848:	6819      	ldr	r1, [r3, #0]
 801184a:	3104      	adds	r1, #4
 801184c:	f7ff fc17 	bl	801107e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011850:	4b08      	ldr	r3, [pc, #32]	; (8011874 <prvAddCurrentTaskToDelayedList+0x88>)
 8011852:	681a      	ldr	r2, [r3, #0]
 8011854:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8011856:	bf38      	it	cc
 8011858:	601c      	strcc	r4, [r3, #0]
 801185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801185c:	20003d68 	.word	0x20003d68
 8011860:	20003c48 	.word	0x20003c48
 8011864:	20003cf4 	.word	0x20003cf4
 8011868:	20003d40 	.word	0x20003d40
 801186c:	20003c50 	.word	0x20003c50
 8011870:	20003c4c 	.word	0x20003c4c
 8011874:	20003d20 	.word	0x20003d20

08011878 <xTaskCreateStatic>:
	{
 8011878:	b570      	push	{r4, r5, r6, lr}
 801187a:	b086      	sub	sp, #24
 801187c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801187e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8011880:	b945      	cbnz	r5, 8011894 <xTaskCreateStatic+0x1c>
 8011882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011886:	f383 8811 	msr	BASEPRI, r3
 801188a:	f3bf 8f6f 	isb	sy
 801188e:	f3bf 8f4f 	dsb	sy
 8011892:	e7fe      	b.n	8011892 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8011894:	b944      	cbnz	r4, 80118a8 <xTaskCreateStatic+0x30>
 8011896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801189a:	f383 8811 	msr	BASEPRI, r3
 801189e:	f3bf 8f6f 	isb	sy
 80118a2:	f3bf 8f4f 	dsb	sy
 80118a6:	e7fe      	b.n	80118a6 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80118a8:	2654      	movs	r6, #84	; 0x54
 80118aa:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80118ac:	9e04      	ldr	r6, [sp, #16]
 80118ae:	2e54      	cmp	r6, #84	; 0x54
 80118b0:	d008      	beq.n	80118c4 <xTaskCreateStatic+0x4c>
 80118b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118b6:	f383 8811 	msr	BASEPRI, r3
 80118ba:	f3bf 8f6f 	isb	sy
 80118be:	f3bf 8f4f 	dsb	sy
 80118c2:	e7fe      	b.n	80118c2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80118c4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80118c6:	2502      	movs	r5, #2
 80118c8:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80118cc:	ad05      	add	r5, sp, #20
 80118ce:	9501      	str	r5, [sp, #4]
 80118d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80118d2:	9402      	str	r4, [sp, #8]
 80118d4:	9500      	str	r5, [sp, #0]
 80118d6:	f7ff fefb 	bl	80116d0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80118da:	4620      	mov	r0, r4
 80118dc:	f7ff fe6a 	bl	80115b4 <prvAddNewTaskToReadyList>
	}
 80118e0:	9805      	ldr	r0, [sp, #20]
 80118e2:	b006      	add	sp, #24
 80118e4:	bd70      	pop	{r4, r5, r6, pc}

080118e6 <xTaskCreate>:
	{
 80118e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118ea:	4607      	mov	r7, r0
 80118ec:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118ee:	0090      	lsls	r0, r2, #2
	{
 80118f0:	4688      	mov	r8, r1
 80118f2:	4616      	mov	r6, r2
 80118f4:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118f6:	f7ff fd97 	bl	8011428 <pvPortMalloc>
			if( pxStack != NULL )
 80118fa:	4605      	mov	r5, r0
 80118fc:	b1e8      	cbz	r0, 801193a <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80118fe:	2054      	movs	r0, #84	; 0x54
 8011900:	f7ff fd92 	bl	8011428 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8011904:	4604      	mov	r4, r0
 8011906:	b1a8      	cbz	r0, 8011934 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011908:	2300      	movs	r3, #0
 801190a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801190e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8011910:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011912:	9301      	str	r3, [sp, #4]
 8011914:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011916:	9002      	str	r0, [sp, #8]
 8011918:	9300      	str	r3, [sp, #0]
 801191a:	4632      	mov	r2, r6
 801191c:	464b      	mov	r3, r9
 801191e:	4641      	mov	r1, r8
 8011920:	4638      	mov	r0, r7
 8011922:	f7ff fed5 	bl	80116d0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011926:	4620      	mov	r0, r4
 8011928:	f7ff fe44 	bl	80115b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801192c:	2001      	movs	r0, #1
	}
 801192e:	b005      	add	sp, #20
 8011930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8011934:	4628      	mov	r0, r5
 8011936:	f7ff fe05 	bl	8011544 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801193a:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 801193e:	e7f6      	b.n	801192e <xTaskCreate+0x48>

08011940 <vTaskStartScheduler>:
{
 8011940:	b510      	push	{r4, lr}
 8011942:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011944:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011946:	aa07      	add	r2, sp, #28
 8011948:	a906      	add	r1, sp, #24
 801194a:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801194c:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801194e:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011950:	f000 f99c 	bl	8011c8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011954:	9b05      	ldr	r3, [sp, #20]
 8011956:	9302      	str	r3, [sp, #8]
 8011958:	9b06      	ldr	r3, [sp, #24]
 801195a:	9301      	str	r3, [sp, #4]
 801195c:	9400      	str	r4, [sp, #0]
 801195e:	4623      	mov	r3, r4
 8011960:	9a07      	ldr	r2, [sp, #28]
 8011962:	490d      	ldr	r1, [pc, #52]	; (8011998 <vTaskStartScheduler+0x58>)
 8011964:	480d      	ldr	r0, [pc, #52]	; (801199c <vTaskStartScheduler+0x5c>)
 8011966:	f7ff ff87 	bl	8011878 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 801196a:	b190      	cbz	r0, 8011992 <vTaskStartScheduler+0x52>
 801196c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011970:	f383 8811 	msr	BASEPRI, r3
 8011974:	f3bf 8f6f 	isb	sy
 8011978:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 801197c:	4b08      	ldr	r3, [pc, #32]	; (80119a0 <vTaskStartScheduler+0x60>)
 801197e:	f04f 32ff 	mov.w	r2, #4294967295
 8011982:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011984:	4b07      	ldr	r3, [pc, #28]	; (80119a4 <vTaskStartScheduler+0x64>)
 8011986:	2201      	movs	r2, #1
 8011988:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 801198a:	4b07      	ldr	r3, [pc, #28]	; (80119a8 <vTaskStartScheduler+0x68>)
 801198c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 801198e:	f7ff fca1 	bl	80112d4 <xPortStartScheduler>
}
 8011992:	b008      	add	sp, #32
 8011994:	bd10      	pop	{r4, pc}
 8011996:	bf00      	nop
 8011998:	08012004 	.word	0x08012004
 801199c:	08011789 	.word	0x08011789
 80119a0:	20003d20 	.word	0x20003d20
 80119a4:	20003d3c 	.word	0x20003d3c
 80119a8:	20003d68 	.word	0x20003d68

080119ac <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80119ac:	4a02      	ldr	r2, [pc, #8]	; (80119b8 <vTaskSuspendAll+0xc>)
 80119ae:	6813      	ldr	r3, [r2, #0]
 80119b0:	3301      	adds	r3, #1
 80119b2:	6013      	str	r3, [r2, #0]
 80119b4:	4770      	bx	lr
 80119b6:	bf00      	nop
 80119b8:	20003cec 	.word	0x20003cec

080119bc <xTaskIncrementTick>:
{
 80119bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119c0:	4b3c      	ldr	r3, [pc, #240]	; (8011ab4 <xTaskIncrementTick+0xf8>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d153      	bne.n	8011a70 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80119c8:	4b3b      	ldr	r3, [pc, #236]	; (8011ab8 <xTaskIncrementTick+0xfc>)
 80119ca:	681c      	ldr	r4, [r3, #0]
 80119cc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80119ce:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80119d0:	b9bc      	cbnz	r4, 8011a02 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80119d2:	4b3a      	ldr	r3, [pc, #232]	; (8011abc <xTaskIncrementTick+0x100>)
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	6812      	ldr	r2, [r2, #0]
 80119d8:	b142      	cbz	r2, 80119ec <xTaskIncrementTick+0x30>
 80119da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119de:	f383 8811 	msr	BASEPRI, r3
 80119e2:	f3bf 8f6f 	isb	sy
 80119e6:	f3bf 8f4f 	dsb	sy
 80119ea:	e7fe      	b.n	80119ea <xTaskIncrementTick+0x2e>
 80119ec:	4a34      	ldr	r2, [pc, #208]	; (8011ac0 <xTaskIncrementTick+0x104>)
 80119ee:	6819      	ldr	r1, [r3, #0]
 80119f0:	6810      	ldr	r0, [r2, #0]
 80119f2:	6018      	str	r0, [r3, #0]
 80119f4:	6011      	str	r1, [r2, #0]
 80119f6:	4a33      	ldr	r2, [pc, #204]	; (8011ac4 <xTaskIncrementTick+0x108>)
 80119f8:	6813      	ldr	r3, [r2, #0]
 80119fa:	3301      	adds	r3, #1
 80119fc:	6013      	str	r3, [r2, #0]
 80119fe:	f7ff fe55 	bl	80116ac <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011a02:	4d31      	ldr	r5, [pc, #196]	; (8011ac8 <xTaskIncrementTick+0x10c>)
 8011a04:	4f31      	ldr	r7, [pc, #196]	; (8011acc <xTaskIncrementTick+0x110>)
 8011a06:	682b      	ldr	r3, [r5, #0]
 8011a08:	429c      	cmp	r4, r3
 8011a0a:	f04f 0b00 	mov.w	fp, #0
 8011a0e:	d33e      	bcc.n	8011a8e <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a10:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8011abc <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8011a14:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8011adc <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a18:	f8d8 2000 	ldr.w	r2, [r8]
 8011a1c:	6812      	ldr	r2, [r2, #0]
 8011a1e:	bb72      	cbnz	r2, 8011a7e <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a20:	f04f 32ff 	mov.w	r2, #4294967295
 8011a24:	602a      	str	r2, [r5, #0]
					break;
 8011a26:	e032      	b.n	8011a8e <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a28:	f106 0a04 	add.w	sl, r6, #4
 8011a2c:	4650      	mov	r0, sl
 8011a2e:	f7ff fb3d 	bl	80110ac <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011a32:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8011a34:	b119      	cbz	r1, 8011a3e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011a36:	f106 0018 	add.w	r0, r6, #24
 8011a3a:	f7ff fb37 	bl	80110ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011a3e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8011a40:	f8d9 3000 	ldr.w	r3, [r9]
 8011a44:	2201      	movs	r2, #1
 8011a46:	fa02 f100 	lsl.w	r1, r2, r0
 8011a4a:	4319      	orrs	r1, r3
 8011a4c:	4b20      	ldr	r3, [pc, #128]	; (8011ad0 <xTaskIncrementTick+0x114>)
 8011a4e:	f8c9 1000 	str.w	r1, [r9]
 8011a52:	f04f 0e14 	mov.w	lr, #20
 8011a56:	4651      	mov	r1, sl
 8011a58:	fb0e 3000 	mla	r0, lr, r0, r3
 8011a5c:	f7ff fb03 	bl	8011066 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011a60:	6838      	ldr	r0, [r7, #0]
 8011a62:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8011a64:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8011a66:	4291      	cmp	r1, r2
 8011a68:	bf28      	it	cs
 8011a6a:	f04f 0b01 	movcs.w	fp, #1
 8011a6e:	e7d3      	b.n	8011a18 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8011a70:	4a18      	ldr	r2, [pc, #96]	; (8011ad4 <xTaskIncrementTick+0x118>)
 8011a72:	6813      	ldr	r3, [r2, #0]
 8011a74:	3301      	adds	r3, #1
 8011a76:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8011a78:	f04f 0b00 	mov.w	fp, #0
 8011a7c:	e011      	b.n	8011aa2 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011a7e:	f8d8 2000 	ldr.w	r2, [r8]
 8011a82:	68d2      	ldr	r2, [r2, #12]
 8011a84:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011a86:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8011a88:	428c      	cmp	r4, r1
 8011a8a:	d2cd      	bcs.n	8011a28 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8011a8c:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011a8e:	683a      	ldr	r2, [r7, #0]
 8011a90:	4b0f      	ldr	r3, [pc, #60]	; (8011ad0 <xTaskIncrementTick+0x114>)
 8011a92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8011a94:	2214      	movs	r2, #20
 8011a96:	434a      	muls	r2, r1
 8011a98:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8011a9a:	2a02      	cmp	r2, #2
 8011a9c:	bf28      	it	cs
 8011a9e:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8011aa2:	4a0d      	ldr	r2, [pc, #52]	; (8011ad8 <xTaskIncrementTick+0x11c>)
 8011aa4:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8011aa6:	2a00      	cmp	r2, #0
 8011aa8:	bf18      	it	ne
 8011aaa:	f04f 0b01 	movne.w	fp, #1
}
 8011aae:	4658      	mov	r0, fp
 8011ab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ab4:	20003cec 	.word	0x20003cec
 8011ab8:	20003d68 	.word	0x20003d68
 8011abc:	20003c4c 	.word	0x20003c4c
 8011ac0:	20003c50 	.word	0x20003c50
 8011ac4:	20003d24 	.word	0x20003d24
 8011ac8:	20003d20 	.word	0x20003d20
 8011acc:	20003c48 	.word	0x20003c48
 8011ad0:	20003c54 	.word	0x20003c54
 8011ad4:	20003ce8 	.word	0x20003ce8
 8011ad8:	20003d6c 	.word	0x20003d6c
 8011adc:	20003cf4 	.word	0x20003cf4

08011ae0 <xTaskResumeAll>:
{
 8011ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8011ae4:	4c31      	ldr	r4, [pc, #196]	; (8011bac <xTaskResumeAll+0xcc>)
 8011ae6:	6823      	ldr	r3, [r4, #0]
 8011ae8:	b943      	cbnz	r3, 8011afc <xTaskResumeAll+0x1c>
 8011aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aee:	f383 8811 	msr	BASEPRI, r3
 8011af2:	f3bf 8f6f 	isb	sy
 8011af6:	f3bf 8f4f 	dsb	sy
 8011afa:	e7fe      	b.n	8011afa <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8011afc:	f7ff fb52 	bl	80111a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8011b00:	6823      	ldr	r3, [r4, #0]
 8011b02:	3b01      	subs	r3, #1
 8011b04:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b06:	6824      	ldr	r4, [r4, #0]
 8011b08:	b12c      	cbz	r4, 8011b16 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8011b0a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8011b0c:	f7ff fb6c 	bl	80111e8 <vPortExitCritical>
}
 8011b10:	4620      	mov	r0, r4
 8011b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011b16:	4b26      	ldr	r3, [pc, #152]	; (8011bb0 <xTaskResumeAll+0xd0>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d0f5      	beq.n	8011b0a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011b1e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8011bc8 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8011b22:	4f24      	ldr	r7, [pc, #144]	; (8011bb4 <xTaskResumeAll+0xd4>)
 8011b24:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8011bcc <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011b28:	f8d9 3000 	ldr.w	r3, [r9]
 8011b2c:	b9e3      	cbnz	r3, 8011b68 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8011b2e:	b10c      	cbz	r4, 8011b34 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8011b30:	f7ff fdbc 	bl	80116ac <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011b34:	4d20      	ldr	r5, [pc, #128]	; (8011bb8 <xTaskResumeAll+0xd8>)
 8011b36:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011b38:	b144      	cbz	r4, 8011b4c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8011b3a:	4e20      	ldr	r6, [pc, #128]	; (8011bbc <xTaskResumeAll+0xdc>)
 8011b3c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8011b3e:	f7ff ff3d 	bl	80119bc <xTaskIncrementTick>
 8011b42:	b100      	cbz	r0, 8011b46 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8011b44:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011b46:	3c01      	subs	r4, #1
 8011b48:	d1f9      	bne.n	8011b3e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8011b4a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8011b4c:	4b1b      	ldr	r3, [pc, #108]	; (8011bbc <xTaskResumeAll+0xdc>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d0da      	beq.n	8011b0a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8011b54:	4b1a      	ldr	r3, [pc, #104]	; (8011bc0 <xTaskResumeAll+0xe0>)
 8011b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b5a:	601a      	str	r2, [r3, #0]
 8011b5c:	f3bf 8f4f 	dsb	sy
 8011b60:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8011b64:	2401      	movs	r4, #1
 8011b66:	e7d1      	b.n	8011b0c <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8011b68:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8011b6c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b6e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b70:	f104 0018 	add.w	r0, r4, #24
 8011b74:	f7ff fa9a 	bl	80110ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b78:	4630      	mov	r0, r6
 8011b7a:	f7ff fa97 	bl	80110ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011b7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011b80:	6839      	ldr	r1, [r7, #0]
 8011b82:	2501      	movs	r5, #1
 8011b84:	fa05 f302 	lsl.w	r3, r5, r2
 8011b88:	2014      	movs	r0, #20
 8011b8a:	430b      	orrs	r3, r1
 8011b8c:	fb00 8002 	mla	r0, r0, r2, r8
 8011b90:	4631      	mov	r1, r6
 8011b92:	603b      	str	r3, [r7, #0]
 8011b94:	f7ff fa67 	bl	8011066 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011b98:	4b0a      	ldr	r3, [pc, #40]	; (8011bc4 <xTaskResumeAll+0xe4>)
 8011b9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ba0:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8011ba2:	bf24      	itt	cs
 8011ba4:	4b05      	ldrcs	r3, [pc, #20]	; (8011bbc <xTaskResumeAll+0xdc>)
 8011ba6:	601d      	strcs	r5, [r3, #0]
 8011ba8:	e7be      	b.n	8011b28 <xTaskResumeAll+0x48>
 8011baa:	bf00      	nop
 8011bac:	20003cec 	.word	0x20003cec
 8011bb0:	20003ce0 	.word	0x20003ce0
 8011bb4:	20003cf4 	.word	0x20003cf4
 8011bb8:	20003ce8 	.word	0x20003ce8
 8011bbc:	20003d6c 	.word	0x20003d6c
 8011bc0:	e000ed04 	.word	0xe000ed04
 8011bc4:	20003c48 	.word	0x20003c48
 8011bc8:	20003d28 	.word	0x20003d28
 8011bcc:	20003c54 	.word	0x20003c54

08011bd0 <vTaskDelay>:
	{
 8011bd0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011bd2:	b940      	cbnz	r0, 8011be6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8011bd4:	4b0e      	ldr	r3, [pc, #56]	; (8011c10 <vTaskDelay+0x40>)
 8011bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bda:	601a      	str	r2, [r3, #0]
 8011bdc:	f3bf 8f4f 	dsb	sy
 8011be0:	f3bf 8f6f 	isb	sy
 8011be4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8011be6:	4b0b      	ldr	r3, [pc, #44]	; (8011c14 <vTaskDelay+0x44>)
 8011be8:	6819      	ldr	r1, [r3, #0]
 8011bea:	b141      	cbz	r1, 8011bfe <vTaskDelay+0x2e>
 8011bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf0:	f383 8811 	msr	BASEPRI, r3
 8011bf4:	f3bf 8f6f 	isb	sy
 8011bf8:	f3bf 8f4f 	dsb	sy
 8011bfc:	e7fe      	b.n	8011bfc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8011bfe:	f7ff fed5 	bl	80119ac <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011c02:	f7ff fdf3 	bl	80117ec <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8011c06:	f7ff ff6b 	bl	8011ae0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8011c0a:	2800      	cmp	r0, #0
 8011c0c:	d0e2      	beq.n	8011bd4 <vTaskDelay+0x4>
 8011c0e:	bd08      	pop	{r3, pc}
 8011c10:	e000ed04 	.word	0xe000ed04
 8011c14:	20003cec 	.word	0x20003cec

08011c18 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011c18:	4b17      	ldr	r3, [pc, #92]	; (8011c78 <vTaskSwitchContext+0x60>)
 8011c1a:	681a      	ldr	r2, [r3, #0]
 8011c1c:	4b17      	ldr	r3, [pc, #92]	; (8011c7c <vTaskSwitchContext+0x64>)
{
 8011c1e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011c20:	b112      	cbz	r2, 8011c28 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8011c22:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011c24:	601a      	str	r2, [r3, #0]
 8011c26:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8011c28:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011c2a:	4b15      	ldr	r3, [pc, #84]	; (8011c80 <vTaskSwitchContext+0x68>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011c2e:	fab3 f383 	clz	r3, r3
 8011c32:	b2db      	uxtb	r3, r3
 8011c34:	f1c3 031f 	rsb	r3, r3, #31
 8011c38:	2214      	movs	r2, #20
 8011c3a:	4912      	ldr	r1, [pc, #72]	; (8011c84 <vTaskSwitchContext+0x6c>)
 8011c3c:	435a      	muls	r2, r3
 8011c3e:	1888      	adds	r0, r1, r2
 8011c40:	588c      	ldr	r4, [r1, r2]
 8011c42:	b944      	cbnz	r4, 8011c56 <vTaskSwitchContext+0x3e>
	__asm volatile
 8011c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c48:	f383 8811 	msr	BASEPRI, r3
 8011c4c:	f3bf 8f6f 	isb	sy
 8011c50:	f3bf 8f4f 	dsb	sy
 8011c54:	e7fe      	b.n	8011c54 <vTaskSwitchContext+0x3c>
 8011c56:	6844      	ldr	r4, [r0, #4]
 8011c58:	3208      	adds	r2, #8
 8011c5a:	6864      	ldr	r4, [r4, #4]
 8011c5c:	6044      	str	r4, [r0, #4]
 8011c5e:	440a      	add	r2, r1
 8011c60:	4294      	cmp	r4, r2
 8011c62:	bf04      	itt	eq
 8011c64:	6862      	ldreq	r2, [r4, #4]
 8011c66:	6042      	streq	r2, [r0, #4]
 8011c68:	2214      	movs	r2, #20
 8011c6a:	fb02 1303 	mla	r3, r2, r3, r1
 8011c6e:	685b      	ldr	r3, [r3, #4]
 8011c70:	68da      	ldr	r2, [r3, #12]
 8011c72:	4b05      	ldr	r3, [pc, #20]	; (8011c88 <vTaskSwitchContext+0x70>)
 8011c74:	e7d6      	b.n	8011c24 <vTaskSwitchContext+0xc>
 8011c76:	bf00      	nop
 8011c78:	20003cec 	.word	0x20003cec
 8011c7c:	20003d6c 	.word	0x20003d6c
 8011c80:	20003cf4 	.word	0x20003cf4
 8011c84:	20003c54 	.word	0x20003c54
 8011c88:	20003c48 	.word	0x20003c48

08011c8c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8011c8c:	4b03      	ldr	r3, [pc, #12]	; (8011c9c <vApplicationGetIdleTaskMemory+0x10>)
 8011c8e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8011c90:	4b03      	ldr	r3, [pc, #12]	; (8011ca0 <vApplicationGetIdleTaskMemory+0x14>)
 8011c92:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8011c94:	2380      	movs	r3, #128	; 0x80
 8011c96:	6013      	str	r3, [r2, #0]
 8011c98:	4770      	bx	lr
 8011c9a:	bf00      	nop
 8011c9c:	20003f70 	.word	0x20003f70
 8011ca0:	20003d70 	.word	0x20003d70

08011ca4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8011ca4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_4);
 8011ca6:	4c04      	ldr	r4, [pc, #16]	; (8011cb8 <StartDefaultTask+0x14>)
    osDelay(100);
 8011ca8:	2064      	movs	r0, #100	; 0x64
 8011caa:	f7ff f9c6 	bl	801103a <osDelay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_4);
 8011cae:	2110      	movs	r1, #16
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	f7fe fd9e 	bl	80107f2 <HAL_GPIO_TogglePin>
 8011cb6:	e7f7      	b.n	8011ca8 <StartDefaultTask+0x4>
 8011cb8:	40020c00 	.word	0x40020c00

08011cbc <SystemClock_Config>:
{
 8011cbc:	b570      	push	{r4, r5, r6, lr}
 8011cbe:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011cc0:	2234      	movs	r2, #52	; 0x34
 8011cc2:	2100      	movs	r1, #0
 8011cc4:	a807      	add	r0, sp, #28
 8011cc6:	f000 f97b 	bl	8011fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011cca:	2100      	movs	r1, #0
 8011ccc:	2214      	movs	r2, #20
 8011cce:	a802      	add	r0, sp, #8
 8011cd0:	f000 f976 	bl	8011fc0 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8011cd4:	2500      	movs	r5, #0
 8011cd6:	4b1e      	ldr	r3, [pc, #120]	; (8011d50 <SystemClock_Config+0x94>)
 8011cd8:	9500      	str	r5, [sp, #0]
 8011cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011cdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011ce0:	641a      	str	r2, [r3, #64]	; 0x40
 8011ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011ce8:	9300      	str	r3, [sp, #0]
 8011cea:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8011cec:	4b19      	ldr	r3, [pc, #100]	; (8011d54 <SystemClock_Config+0x98>)
 8011cee:	9501      	str	r5, [sp, #4]
 8011cf0:	681a      	ldr	r2, [r3, #0]
 8011cf2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8011cf6:	601a      	str	r2, [r3, #0]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011cfe:	9301      	str	r3, [sp, #4]
 8011d00:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8011d02:	2301      	movs	r3, #1
 8011d04:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011d0a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011d0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011d10:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 8011d12:	23d8      	movs	r3, #216	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011d14:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 15;
 8011d16:	260f      	movs	r6, #15
  RCC_OscInitStruct.PLL.PLLN = 216;
 8011d18:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8011d1a:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8011d1c:	2304      	movs	r3, #4
 8011d1e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011d20:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 15;
 8011d22:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8011d24:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8011d26:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8011d28:	f7fe fe9c 	bl	8010a64 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8011d2c:	f7fe fd68 	bl	8010800 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8011d30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8011d34:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8011d36:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8011d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8011d3c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8011d3e:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011d40:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8011d42:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8011d44:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8011d46:	f7fe fdc5 	bl	80108d4 <HAL_RCC_ClockConfig>
}
 8011d4a:	b014      	add	sp, #80	; 0x50
 8011d4c:	bd70      	pop	{r4, r5, r6, pc}
 8011d4e:	bf00      	nop
 8011d50:	40023800 	.word	0x40023800
 8011d54:	40007000 	.word	0x40007000

08011d58 <main>:
{
 8011d58:	b500      	push	{lr}
 8011d5a:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8011d5c:	f7fe fbd8 	bl	8010510 <HAL_Init>
  SystemClock_Config();
 8011d60:	f7ff ffac 	bl	8011cbc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d64:	2214      	movs	r2, #20
 8011d66:	2100      	movs	r1, #0
 8011d68:	a803      	add	r0, sp, #12
 8011d6a:	f000 f929 	bl	8011fc0 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011d6e:	2600      	movs	r6, #0
 8011d70:	4b1a      	ldr	r3, [pc, #104]	; (8011ddc <main+0x84>)
 8011d72:	9601      	str	r6, [sp, #4]
 8011d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8011d76:	481a      	ldr	r0, [pc, #104]	; (8011de0 <main+0x88>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8011d78:	4d1a      	ldr	r5, [pc, #104]	; (8011de4 <main+0x8c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011d7a:	f042 0208 	orr.w	r2, r2, #8
 8011d7e:	631a      	str	r2, [r3, #48]	; 0x30
 8011d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d82:	f002 0208 	and.w	r2, r2, #8
 8011d86:	9201      	str	r2, [sp, #4]
 8011d88:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011d8a:	9602      	str	r6, [sp, #8]
 8011d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011d92:	631a      	str	r2, [r3, #48]	; 0x30
 8011d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8011d9a:	4632      	mov	r2, r6
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011d9c:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8011d9e:	2110      	movs	r1, #16
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011da0:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8011da2:	f7fe fd21 	bl	80107e8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8011da6:	2310      	movs	r3, #16
 8011da8:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011daa:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011dac:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011dae:	480c      	ldr	r0, [pc, #48]	; (8011de0 <main+0x88>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011db0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011db2:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011db4:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011db6:	f7fe fc2b 	bl	8010610 <HAL_GPIO_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8011dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011dbc:	ac03      	add	r4, sp, #12
 8011dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011dc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011dc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8011dc8:	4631      	mov	r1, r6
 8011dca:	a803      	add	r0, sp, #12
 8011dcc:	f7ff f90d 	bl	8010fea <osThreadCreate>
 8011dd0:	4b05      	ldr	r3, [pc, #20]	; (8011de8 <main+0x90>)
 8011dd2:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8011dd4:	f7ff f904 	bl	8010fe0 <osKernelStart>
 8011dd8:	e7fe      	b.n	8011dd8 <main+0x80>
 8011dda:	bf00      	nop
 8011ddc:	40023800 	.word	0x40023800
 8011de0:	40020c00 	.word	0x40020c00
 8011de4:	08011fe8 	.word	0x08011fe8
 8011de8:	20003fc8 	.word	0x20003fc8

08011dec <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8011dec:	6802      	ldr	r2, [r0, #0]
 8011dee:	4b03      	ldr	r3, [pc, #12]	; (8011dfc <HAL_TIM_PeriodElapsedCallback+0x10>)
 8011df0:	429a      	cmp	r2, r3
 8011df2:	d101      	bne.n	8011df8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8011df4:	f7fe bba6 	b.w	8010544 <HAL_IncTick>
 8011df8:	4770      	bx	lr
 8011dfa:	bf00      	nop
 8011dfc:	40001000 	.word	0x40001000

08011e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011e00:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011e02:	4b0f      	ldr	r3, [pc, #60]	; (8011e40 <HAL_MspInit+0x40>)
 8011e04:	2200      	movs	r2, #0
 8011e06:	9200      	str	r2, [sp, #0]
 8011e08:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8011e0a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8011e0e:	6459      	str	r1, [r3, #68]	; 0x44
 8011e10:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8011e12:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8011e16:	9100      	str	r1, [sp, #0]
 8011e18:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011e1a:	9201      	str	r2, [sp, #4]
 8011e1c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8011e1e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8011e22:	6419      	str	r1, [r3, #64]	; 0x40
 8011e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011e2a:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8011e2c:	210f      	movs	r1, #15
 8011e2e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8011e32:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8011e34:	f7fe fbaa 	bl	801058c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011e38:	b003      	add	sp, #12
 8011e3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e3e:	bf00      	nop
 8011e40:	40023800 	.word	0x40023800

08011e44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011e44:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8011e46:	4601      	mov	r1, r0
{
 8011e48:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	2036      	movs	r0, #54	; 0x36
 8011e4e:	f7fe fb9d 	bl	801058c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8011e52:	2036      	movs	r0, #54	; 0x36
 8011e54:	f7fe fbce 	bl	80105f4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8011e58:	2500      	movs	r5, #0
 8011e5a:	4b15      	ldr	r3, [pc, #84]	; (8011eb0 <HAL_InitTick+0x6c>)
 8011e5c:	9502      	str	r5, [sp, #8]
 8011e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8011e60:	4c14      	ldr	r4, [pc, #80]	; (8011eb4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8011e62:	f042 0210 	orr.w	r2, r2, #16
 8011e66:	641a      	str	r2, [r3, #64]	; 0x40
 8011e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e6a:	f003 0310 	and.w	r3, r3, #16
 8011e6e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8011e70:	a901      	add	r1, sp, #4
 8011e72:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8011e74:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8011e76:	f7fe fdd7 	bl	8010a28 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8011e7a:	f7fe fdc5 	bl	8010a08 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8011e7e:	4b0e      	ldr	r3, [pc, #56]	; (8011eb8 <HAL_InitTick+0x74>)
 8011e80:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8011e82:	f240 33e7 	movw	r3, #999	; 0x3e7
 8011e86:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8011e88:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8011e8a:	4b0c      	ldr	r3, [pc, #48]	; (8011ebc <HAL_InitTick+0x78>)
 8011e8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8011e90:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8011e92:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8011e94:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8011e96:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011e98:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8011e9a:	f7ff f885 	bl	8010fa8 <HAL_TIM_Base_Init>
 8011e9e:	b920      	cbnz	r0, 8011eaa <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8011ea0:	4620      	mov	r0, r4
 8011ea2:	f7fe ff64 	bl	8010d6e <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8011ea6:	b009      	add	sp, #36	; 0x24
 8011ea8:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8011eaa:	2001      	movs	r0, #1
 8011eac:	e7fb      	b.n	8011ea6 <HAL_InitTick+0x62>
 8011eae:	bf00      	nop
 8011eb0:	40023800 	.word	0x40023800
 8011eb4:	20003fcc 	.word	0x20003fcc
 8011eb8:	40001000 	.word	0x40001000
 8011ebc:	000f4240 	.word	0x000f4240

08011ec0 <NMI_Handler>:
 8011ec0:	4770      	bx	lr

08011ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011ec2:	e7fe      	b.n	8011ec2 <HardFault_Handler>

08011ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011ec4:	e7fe      	b.n	8011ec4 <MemManage_Handler>

08011ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011ec6:	e7fe      	b.n	8011ec6 <BusFault_Handler>

08011ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011ec8:	e7fe      	b.n	8011ec8 <UsageFault_Handler>

08011eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011eca:	4770      	bx	lr

08011ecc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8011ecc:	4801      	ldr	r0, [pc, #4]	; (8011ed4 <TIM6_DAC_IRQHandler+0x8>)
 8011ece:	f7fe bf62 	b.w	8010d96 <HAL_TIM_IRQHandler>
 8011ed2:	bf00      	nop
 8011ed4:	20003fcc 	.word	0x20003fcc

08011ed8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011ed8:	490e      	ldr	r1, [pc, #56]	; (8011f14 <SystemInit+0x3c>)
 8011eda:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8011ede:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8011ee6:	4b0c      	ldr	r3, [pc, #48]	; (8011f18 <SystemInit+0x40>)
 8011ee8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011eea:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8011eec:	f042 0201 	orr.w	r2, r2, #1
 8011ef0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8011ef2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8011ef4:	681a      	ldr	r2, [r3, #0]
 8011ef6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8011efa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011efe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8011f00:	4a06      	ldr	r2, [pc, #24]	; (8011f1c <SystemInit+0x44>)
 8011f02:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8011f04:	681a      	ldr	r2, [r3, #0]
 8011f06:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011f0a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8011f0c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011f0e:	4b04      	ldr	r3, [pc, #16]	; (8011f20 <SystemInit+0x48>)
 8011f10:	608b      	str	r3, [r1, #8]
 8011f12:	4770      	bx	lr
 8011f14:	e000ed00 	.word	0xe000ed00
 8011f18:	40023800 	.word	0x40023800
 8011f1c:	24003010 	.word	0x24003010
 8011f20:	08010000 	.word	0x08010000

08011f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8011f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011f5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011f28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011f2a:	e003      	b.n	8011f34 <LoopCopyDataInit>

08011f2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011f2c:	4b0c      	ldr	r3, [pc, #48]	; (8011f60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8011f2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011f30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011f32:	3104      	adds	r1, #4

08011f34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011f34:	480b      	ldr	r0, [pc, #44]	; (8011f64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011f36:	4b0c      	ldr	r3, [pc, #48]	; (8011f68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011f38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011f3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011f3c:	d3f6      	bcc.n	8011f2c <CopyDataInit>
  ldr  r2, =_sbss
 8011f3e:	4a0b      	ldr	r2, [pc, #44]	; (8011f6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011f40:	e002      	b.n	8011f48 <LoopFillZerobss>

08011f42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8011f42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011f44:	f842 3b04 	str.w	r3, [r2], #4

08011f48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011f48:	4b09      	ldr	r3, [pc, #36]	; (8011f70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011f4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011f4c:	d3f9      	bcc.n	8011f42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8011f4e:	f7ff ffc3 	bl	8011ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011f52:	f000 f811 	bl	8011f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011f56:	f7ff feff 	bl	8011d58 <main>
  bx  lr    
 8011f5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8011f5c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8011f60:	08012040 	.word	0x08012040
  ldr  r0, =_sdata
 8011f64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8011f68:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8011f6c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8011f70:	2000400c 	.word	0x2000400c

08011f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011f74:	e7fe      	b.n	8011f74 <ADC_IRQHandler>
	...

08011f78 <__libc_init_array>:
 8011f78:	b570      	push	{r4, r5, r6, lr}
 8011f7a:	4e0d      	ldr	r6, [pc, #52]	; (8011fb0 <__libc_init_array+0x38>)
 8011f7c:	4c0d      	ldr	r4, [pc, #52]	; (8011fb4 <__libc_init_array+0x3c>)
 8011f7e:	1ba4      	subs	r4, r4, r6
 8011f80:	10a4      	asrs	r4, r4, #2
 8011f82:	2500      	movs	r5, #0
 8011f84:	42a5      	cmp	r5, r4
 8011f86:	d109      	bne.n	8011f9c <__libc_init_array+0x24>
 8011f88:	4e0b      	ldr	r6, [pc, #44]	; (8011fb8 <__libc_init_array+0x40>)
 8011f8a:	4c0c      	ldr	r4, [pc, #48]	; (8011fbc <__libc_init_array+0x44>)
 8011f8c:	f000 f820 	bl	8011fd0 <_init>
 8011f90:	1ba4      	subs	r4, r4, r6
 8011f92:	10a4      	asrs	r4, r4, #2
 8011f94:	2500      	movs	r5, #0
 8011f96:	42a5      	cmp	r5, r4
 8011f98:	d105      	bne.n	8011fa6 <__libc_init_array+0x2e>
 8011f9a:	bd70      	pop	{r4, r5, r6, pc}
 8011f9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011fa0:	4798      	blx	r3
 8011fa2:	3501      	adds	r5, #1
 8011fa4:	e7ee      	b.n	8011f84 <__libc_init_array+0xc>
 8011fa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011faa:	4798      	blx	r3
 8011fac:	3501      	adds	r5, #1
 8011fae:	e7f2      	b.n	8011f96 <__libc_init_array+0x1e>
 8011fb0:	08012038 	.word	0x08012038
 8011fb4:	08012038 	.word	0x08012038
 8011fb8:	08012038 	.word	0x08012038
 8011fbc:	0801203c 	.word	0x0801203c

08011fc0 <memset>:
 8011fc0:	4402      	add	r2, r0
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	4293      	cmp	r3, r2
 8011fc6:	d100      	bne.n	8011fca <memset+0xa>
 8011fc8:	4770      	bx	lr
 8011fca:	f803 1b01 	strb.w	r1, [r3], #1
 8011fce:	e7f9      	b.n	8011fc4 <memset+0x4>

08011fd0 <_init>:
 8011fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fd2:	bf00      	nop
 8011fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fd6:	bc08      	pop	{r3}
 8011fd8:	469e      	mov	lr, r3
 8011fda:	4770      	bx	lr

08011fdc <_fini>:
 8011fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fde:	bf00      	nop
 8011fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fe2:	bc08      	pop	{r3}
 8011fe4:	469e      	mov	lr, r3
 8011fe6:	4770      	bx	lr
