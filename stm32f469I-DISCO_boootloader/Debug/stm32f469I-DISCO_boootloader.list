
stm32f469I-DISCO_boootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000654c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800670c  0800670c  0001670c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006814  08006814  00016814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800681c  0800681c  0001681c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006820  08006820  00016820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08006824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          0000e474  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000e484  2000e484  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   00027c99  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000057cf  00000000  00000000  00047cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00012b1b  00000000  00000000  0004d4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001530  00000000  00000000  0005ffc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ea0  00000000  00000000  000614f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b41d  00000000  00000000  00063398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000079e1  00000000  00000000  0006e7b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00076196  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003e98  00000000  00000000  00076214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080066f4 	.word	0x080066f4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	080066f4 	.word	0x080066f4

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b97a 	b.w	800050c <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	468c      	mov	ip, r1
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	9e08      	ldr	r6, [sp, #32]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d151      	bne.n	80002e4 <__udivmoddi4+0xb4>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d96d      	bls.n	8000322 <__udivmoddi4+0xf2>
 8000246:	fab2 fe82 	clz	lr, r2
 800024a:	f1be 0f00 	cmp.w	lr, #0
 800024e:	d00b      	beq.n	8000268 <__udivmoddi4+0x38>
 8000250:	f1ce 0c20 	rsb	ip, lr, #32
 8000254:	fa01 f50e 	lsl.w	r5, r1, lr
 8000258:	fa20 fc0c 	lsr.w	ip, r0, ip
 800025c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000260:	ea4c 0c05 	orr.w	ip, ip, r5
 8000264:	fa00 f40e 	lsl.w	r4, r0, lr
 8000268:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800026c:	0c25      	lsrs	r5, r4, #16
 800026e:	fbbc f8fa 	udiv	r8, ip, sl
 8000272:	fa1f f987 	uxth.w	r9, r7
 8000276:	fb0a cc18 	mls	ip, sl, r8, ip
 800027a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800027e:	fb08 f309 	mul.w	r3, r8, r9
 8000282:	42ab      	cmp	r3, r5
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x6c>
 8000286:	19ed      	adds	r5, r5, r7
 8000288:	f108 32ff 	add.w	r2, r8, #4294967295
 800028c:	f080 8123 	bcs.w	80004d6 <__udivmoddi4+0x2a6>
 8000290:	42ab      	cmp	r3, r5
 8000292:	f240 8120 	bls.w	80004d6 <__udivmoddi4+0x2a6>
 8000296:	f1a8 0802 	sub.w	r8, r8, #2
 800029a:	443d      	add	r5, r7
 800029c:	1aed      	subs	r5, r5, r3
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ac:	fb00 f909 	mul.w	r9, r0, r9
 80002b0:	45a1      	cmp	r9, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x98>
 80002b4:	19e4      	adds	r4, r4, r7
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ba:	f080 810a 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80002be:	45a1      	cmp	r9, r4
 80002c0:	f240 8107 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80002c4:	3802      	subs	r0, #2
 80002c6:	443c      	add	r4, r7
 80002c8:	eba4 0409 	sub.w	r4, r4, r9
 80002cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d0:	2100      	movs	r1, #0
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d061      	beq.n	800039a <__udivmoddi4+0x16a>
 80002d6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002da:	2300      	movs	r3, #0
 80002dc:	6034      	str	r4, [r6, #0]
 80002de:	6073      	str	r3, [r6, #4]
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xc8>
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d054      	beq.n	8000396 <__udivmoddi4+0x166>
 80002ec:	2100      	movs	r1, #0
 80002ee:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f2:	4608      	mov	r0, r1
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	fab3 f183 	clz	r1, r3
 80002fc:	2900      	cmp	r1, #0
 80002fe:	f040 808e 	bne.w	800041e <__udivmoddi4+0x1ee>
 8000302:	42ab      	cmp	r3, r5
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xdc>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2d0>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb65 0503 	sbc.w	r5, r5, r3
 8000312:	2001      	movs	r0, #1
 8000314:	46ac      	mov	ip, r5
 8000316:	2e00      	cmp	r6, #0
 8000318:	d03f      	beq.n	800039a <__udivmoddi4+0x16a>
 800031a:	e886 1010 	stmia.w	r6, {r4, ip}
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	b912      	cbnz	r2, 800032a <__udivmoddi4+0xfa>
 8000324:	2701      	movs	r7, #1
 8000326:	fbb7 f7f2 	udiv	r7, r7, r2
 800032a:	fab7 fe87 	clz	lr, r7
 800032e:	f1be 0f00 	cmp.w	lr, #0
 8000332:	d134      	bne.n	800039e <__udivmoddi4+0x16e>
 8000334:	1beb      	subs	r3, r5, r7
 8000336:	0c3a      	lsrs	r2, r7, #16
 8000338:	fa1f fc87 	uxth.w	ip, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000342:	0c25      	lsrs	r5, r4, #16
 8000344:	fb02 3318 	mls	r3, r2, r8, r3
 8000348:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800034c:	fb0c f308 	mul.w	r3, ip, r8
 8000350:	42ab      	cmp	r3, r5
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x134>
 8000354:	19ed      	adds	r5, r5, r7
 8000356:	f108 30ff 	add.w	r0, r8, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x132>
 800035c:	42ab      	cmp	r3, r5
 800035e:	f200 80d1 	bhi.w	8000504 <__udivmoddi4+0x2d4>
 8000362:	4680      	mov	r8, r0
 8000364:	1aed      	subs	r5, r5, r3
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb5 f0f2 	udiv	r0, r5, r2
 800036c:	fb02 5510 	mls	r5, r2, r0, r5
 8000370:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000374:	fb0c fc00 	mul.w	ip, ip, r0
 8000378:	45a4      	cmp	ip, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x15c>
 800037c:	19e4      	adds	r4, r4, r7
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x15a>
 8000384:	45a4      	cmp	ip, r4
 8000386:	f200 80b8 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 040c 	sub.w	r4, r4, ip
 8000390:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000394:	e79d      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000396:	4631      	mov	r1, r6
 8000398:	4630      	mov	r0, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	f1ce 0420 	rsb	r4, lr, #32
 80003a2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003aa:	fa20 f804 	lsr.w	r8, r0, r4
 80003ae:	0c3a      	lsrs	r2, r7, #16
 80003b0:	fa25 f404 	lsr.w	r4, r5, r4
 80003b4:	ea48 0803 	orr.w	r8, r8, r3
 80003b8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003bc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c0:	fb02 4411 	mls	r4, r2, r1, r4
 80003c4:	fa1f fc87 	uxth.w	ip, r7
 80003c8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003cc:	fb01 f30c 	mul.w	r3, r1, ip
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x1bc>
 80003d8:	19ed      	adds	r5, r5, r7
 80003da:	f101 30ff 	add.w	r0, r1, #4294967295
 80003de:	f080 808a 	bcs.w	80004f6 <__udivmoddi4+0x2c6>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	f240 8087 	bls.w	80004f6 <__udivmoddi4+0x2c6>
 80003e8:	3902      	subs	r1, #2
 80003ea:	443d      	add	r5, r7
 80003ec:	1aeb      	subs	r3, r5, r3
 80003ee:	fa1f f588 	uxth.w	r5, r8
 80003f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003f6:	fb02 3310 	mls	r3, r2, r0, r3
 80003fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fe:	fb00 f30c 	mul.w	r3, r0, ip
 8000402:	42ab      	cmp	r3, r5
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1e6>
 8000406:	19ed      	adds	r5, r5, r7
 8000408:	f100 38ff 	add.w	r8, r0, #4294967295
 800040c:	d26f      	bcs.n	80004ee <__udivmoddi4+0x2be>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d96d      	bls.n	80004ee <__udivmoddi4+0x2be>
 8000412:	3802      	subs	r0, #2
 8000414:	443d      	add	r5, r7
 8000416:	1aeb      	subs	r3, r5, r3
 8000418:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041c:	e78f      	b.n	800033e <__udivmoddi4+0x10e>
 800041e:	f1c1 0720 	rsb	r7, r1, #32
 8000422:	fa22 f807 	lsr.w	r8, r2, r7
 8000426:	408b      	lsls	r3, r1
 8000428:	fa05 f401 	lsl.w	r4, r5, r1
 800042c:	ea48 0303 	orr.w	r3, r8, r3
 8000430:	fa20 fe07 	lsr.w	lr, r0, r7
 8000434:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000438:	40fd      	lsrs	r5, r7
 800043a:	ea4e 0e04 	orr.w	lr, lr, r4
 800043e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000442:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000446:	fb0c 5519 	mls	r5, ip, r9, r5
 800044a:	fa1f f883 	uxth.w	r8, r3
 800044e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000452:	fb09 f408 	mul.w	r4, r9, r8
 8000456:	42ac      	cmp	r4, r5
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x244>
 8000462:	18ed      	adds	r5, r5, r3
 8000464:	f109 30ff 	add.w	r0, r9, #4294967295
 8000468:	d243      	bcs.n	80004f2 <__udivmoddi4+0x2c2>
 800046a:	42ac      	cmp	r4, r5
 800046c:	d941      	bls.n	80004f2 <__udivmoddi4+0x2c2>
 800046e:	f1a9 0902 	sub.w	r9, r9, #2
 8000472:	441d      	add	r5, r3
 8000474:	1b2d      	subs	r5, r5, r4
 8000476:	fa1f fe8e 	uxth.w	lr, lr
 800047a:	fbb5 f0fc 	udiv	r0, r5, ip
 800047e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000482:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000486:	fb00 f808 	mul.w	r8, r0, r8
 800048a:	45a0      	cmp	r8, r4
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x26e>
 800048e:	18e4      	adds	r4, r4, r3
 8000490:	f100 35ff 	add.w	r5, r0, #4294967295
 8000494:	d229      	bcs.n	80004ea <__udivmoddi4+0x2ba>
 8000496:	45a0      	cmp	r8, r4
 8000498:	d927      	bls.n	80004ea <__udivmoddi4+0x2ba>
 800049a:	3802      	subs	r0, #2
 800049c:	441c      	add	r4, r3
 800049e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a2:	eba4 0408 	sub.w	r4, r4, r8
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	454c      	cmp	r4, r9
 80004ac:	46c6      	mov	lr, r8
 80004ae:	464d      	mov	r5, r9
 80004b0:	d315      	bcc.n	80004de <__udivmoddi4+0x2ae>
 80004b2:	d012      	beq.n	80004da <__udivmoddi4+0x2aa>
 80004b4:	b156      	cbz	r6, 80004cc <__udivmoddi4+0x29c>
 80004b6:	ebba 030e 	subs.w	r3, sl, lr
 80004ba:	eb64 0405 	sbc.w	r4, r4, r5
 80004be:	fa04 f707 	lsl.w	r7, r4, r7
 80004c2:	40cb      	lsrs	r3, r1
 80004c4:	431f      	orrs	r7, r3
 80004c6:	40cc      	lsrs	r4, r1
 80004c8:	6037      	str	r7, [r6, #0]
 80004ca:	6074      	str	r4, [r6, #4]
 80004cc:	2100      	movs	r1, #0
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	4618      	mov	r0, r3
 80004d4:	e6f8      	b.n	80002c8 <__udivmoddi4+0x98>
 80004d6:	4690      	mov	r8, r2
 80004d8:	e6e0      	b.n	800029c <__udivmoddi4+0x6c>
 80004da:	45c2      	cmp	sl, r8
 80004dc:	d2ea      	bcs.n	80004b4 <__udivmoddi4+0x284>
 80004de:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e2:	eb69 0503 	sbc.w	r5, r9, r3
 80004e6:	3801      	subs	r0, #1
 80004e8:	e7e4      	b.n	80004b4 <__udivmoddi4+0x284>
 80004ea:	4628      	mov	r0, r5
 80004ec:	e7d7      	b.n	800049e <__udivmoddi4+0x26e>
 80004ee:	4640      	mov	r0, r8
 80004f0:	e791      	b.n	8000416 <__udivmoddi4+0x1e6>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e7be      	b.n	8000474 <__udivmoddi4+0x244>
 80004f6:	4601      	mov	r1, r0
 80004f8:	e778      	b.n	80003ec <__udivmoddi4+0x1bc>
 80004fa:	3802      	subs	r0, #2
 80004fc:	443c      	add	r4, r7
 80004fe:	e745      	b.n	800038c <__udivmoddi4+0x15c>
 8000500:	4608      	mov	r0, r1
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xe6>
 8000504:	f1a8 0802 	sub.w	r8, r8, #2
 8000508:	443d      	add	r5, r7
 800050a:	e72b      	b.n	8000364 <__udivmoddi4+0x134>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x30>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000522:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800052a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f82f 	bl	8000590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f005 fffa 	bl	800652c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f005 ff24 	bl	8006384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800053c:	2000      	movs	r0, #0
 800053e:	bd08      	pop	{r3, pc}
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <HAL_IncTick+0x10>)
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_IncTick+0x14>)
 8000548:	6811      	ldr	r1, [r2, #0]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	440b      	add	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	2000c220 	.word	0x2000c220
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800055c:	4b01      	ldr	r3, [pc, #4]	; (8000564 <HAL_GetTick+0x8>)
 800055e:	6818      	ldr	r0, [r3, #0]
}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	2000c220 	.word	0x2000c220

08000568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000568:	b538      	push	{r3, r4, r5, lr}
 800056a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff fff6 	bl	800055c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000570:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000572:	bf1c      	itt	ne
 8000574:	4b05      	ldrne	r3, [pc, #20]	; (800058c <HAL_Delay+0x24>)
 8000576:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000578:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800057a:	bf18      	it	ne
 800057c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800057e:	f7ff ffed 	bl	800055c <HAL_GetTick>
 8000582:	1b40      	subs	r0, r0, r5
 8000584:	4284      	cmp	r4, r0
 8000586:	d8fa      	bhi.n	800057e <HAL_Delay+0x16>
  {
  }
}
 8000588:	bd38      	pop	{r3, r4, r5, pc}
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000592:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000594:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c1b      	lsrs	r3, r3, #16
 800059c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005a0:	0200      	lsls	r0, r0, #8
 80005a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005aa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005ac:	60d3      	str	r3, [r2, #12]
 80005ae:	4770      	bx	lr
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b4:	4b17      	ldr	r3, [pc, #92]	; (8000614 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005b6:	b530      	push	{r4, r5, lr}
 80005b8:	68dc      	ldr	r4, [r3, #12]
 80005ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005be:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	bf28      	it	cs
 80005c8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ca:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005cc:	f04f 0501 	mov.w	r5, #1
 80005d0:	fa05 f303 	lsl.w	r3, r5, r3
 80005d4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d8:	bf8c      	ite	hi
 80005da:	3c03      	subhi	r4, #3
 80005dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005de:	4019      	ands	r1, r3
 80005e0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e2:	fa05 f404 	lsl.w	r4, r5, r4
 80005e6:	3c01      	subs	r4, #1
 80005e8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005ea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ec:	ea42 0201 	orr.w	r2, r2, r1
 80005f0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	bfad      	iteet	ge
 80005f6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	f000 000f 	andlt.w	r0, r0, #15
 80005fe:	4b06      	ldrlt	r3, [pc, #24]	; (8000618 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	bfb5      	itete	lt
 8000606:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00
 8000618:	e000ed14 	.word	0xe000ed14

0800061c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800061c:	2800      	cmp	r0, #0
 800061e:	db08      	blt.n	8000632 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000620:	0942      	lsrs	r2, r0, #5
 8000622:	2301      	movs	r3, #1
 8000624:	f000 001f 	and.w	r0, r0, #31
 8000628:	fa03 f000 	lsl.w	r0, r3, r0
 800062c:	4b01      	ldr	r3, [pc, #4]	; (8000634 <HAL_NVIC_EnableIRQ+0x18>)
 800062e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000632:	4770      	bx	lr
 8000634:	e000e100 	.word	0xe000e100

08000638 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000638:	6803      	ldr	r3, [r0, #0]
 800063a:	b2da      	uxtb	r2, r3
 800063c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000640:	f023 0303 	bic.w	r3, r3, #3
 8000644:	2118      	movs	r1, #24
 8000646:	3a10      	subs	r2, #16
 8000648:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800064c:	4904      	ldr	r1, [pc, #16]	; (8000660 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800064e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000650:	bf88      	it	hi
 8000652:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000654:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000656:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000658:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800065a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	08006738 	.word	0x08006738

08000664 <HAL_DMA_Init>:
{
 8000664:	b570      	push	{r4, r5, r6, lr}
 8000666:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000668:	f7ff ff78 	bl	800055c <HAL_GetTick>
 800066c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800066e:	2c00      	cmp	r4, #0
 8000670:	d071      	beq.n	8000756 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000672:	2300      	movs	r3, #0
 8000674:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000678:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800067a:	2302      	movs	r3, #2
 800067c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000680:	6813      	ldr	r3, [r2, #0]
 8000682:	f023 0301 	bic.w	r3, r3, #1
 8000686:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000688:	6821      	ldr	r1, [r4, #0]
 800068a:	680b      	ldr	r3, [r1, #0]
 800068c:	07d8      	lsls	r0, r3, #31
 800068e:	d43c      	bmi.n	800070a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000690:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000692:	4d32      	ldr	r5, [pc, #200]	; (800075c <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000694:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000696:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000698:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800069a:	68a3      	ldr	r3, [r4, #8]
 800069c:	4313      	orrs	r3, r2
 800069e:	68e2      	ldr	r2, [r4, #12]
 80006a0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006a2:	6922      	ldr	r2, [r4, #16]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	6962      	ldr	r2, [r4, #20]
 80006a8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006aa:	69e2      	ldr	r2, [r4, #28]
 80006ac:	4303      	orrs	r3, r0
 80006ae:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80006b0:	6a22      	ldr	r2, [r4, #32]
 80006b2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80006b6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006b8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80006bc:	bf01      	itttt	eq
 80006be:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80006c0:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80006c2:	4335      	orreq	r5, r6
 80006c4:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80006c6:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80006c8:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006ca:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80006cc:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006d4:	d10b      	bne.n	80006ee <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80006d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80006d8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80006da:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80006dc:	b13d      	cbz	r5, 80006ee <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80006de:	b9f8      	cbnz	r0, 8000720 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80006e0:	2a01      	cmp	r2, #1
 80006e2:	d02d      	beq.n	8000740 <HAL_DMA_Init+0xdc>
 80006e4:	d301      	bcc.n	80006ea <HAL_DMA_Init+0x86>
 80006e6:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80006e8:	d101      	bne.n	80006ee <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80006ea:	01ea      	lsls	r2, r5, #7
 80006ec:	d42b      	bmi.n	8000746 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80006ee:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80006f0:	4620      	mov	r0, r4
 80006f2:	f7ff ffa1 	bl	8000638 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80006f6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80006f8:	233f      	movs	r3, #63	; 0x3f
 80006fa:	4093      	lsls	r3, r2
 80006fc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006fe:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000700:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000702:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000704:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000708:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800070a:	f7ff ff27 	bl	800055c <HAL_GetTick>
 800070e:	1b40      	subs	r0, r0, r5
 8000710:	2805      	cmp	r0, #5
 8000712:	d9b9      	bls.n	8000688 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000714:	2320      	movs	r3, #32
 8000716:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000718:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800071a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800071e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000720:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000724:	d113      	bne.n	800074e <HAL_DMA_Init+0xea>
    switch (tmp)
 8000726:	2a03      	cmp	r2, #3
 8000728:	d8e1      	bhi.n	80006ee <HAL_DMA_Init+0x8a>
 800072a:	a001      	add	r0, pc, #4	; (adr r0, 8000730 <HAL_DMA_Init+0xcc>)
 800072c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000730:	08000747 	.word	0x08000747
 8000734:	080006eb 	.word	0x080006eb
 8000738:	08000747 	.word	0x08000747
 800073c:	08000741 	.word	0x08000741
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000740:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000744:	d1d3      	bne.n	80006ee <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000746:	2340      	movs	r3, #64	; 0x40
 8000748:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800074a:	2001      	movs	r0, #1
 800074c:	e7e5      	b.n	800071a <HAL_DMA_Init+0xb6>
    switch (tmp)
 800074e:	2a02      	cmp	r2, #2
 8000750:	d9f9      	bls.n	8000746 <HAL_DMA_Init+0xe2>
 8000752:	2a03      	cmp	r2, #3
 8000754:	e7c8      	b.n	80006e8 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000756:	2001      	movs	r0, #1
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	bf00      	nop
 800075c:	f010803f 	.word	0xf010803f

08000760 <HAL_DMA_Start_IT>:
{
 8000760:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000762:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000766:	2c01      	cmp	r4, #1
 8000768:	d036      	beq.n	80007d8 <HAL_DMA_Start_IT+0x78>
 800076a:	2401      	movs	r4, #1
 800076c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000770:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000774:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8000776:	2c01      	cmp	r4, #1
 8000778:	f04f 0500 	mov.w	r5, #0
 800077c:	f04f 0402 	mov.w	r4, #2
 8000780:	d128      	bne.n	80007d4 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000782:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000786:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000788:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800078a:	6825      	ldr	r5, [r4, #0]
 800078c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000790:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000792:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000794:	6883      	ldr	r3, [r0, #8]
 8000796:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000798:	bf0e      	itee	eq
 800079a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800079c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800079e:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007a0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80007a2:	bf08      	it	eq
 80007a4:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007a6:	233f      	movs	r3, #63	; 0x3f
 80007a8:	4093      	lsls	r3, r2
 80007aa:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80007ac:	6823      	ldr	r3, [r4, #0]
 80007ae:	f043 0316 	orr.w	r3, r3, #22
 80007b2:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80007b4:	6963      	ldr	r3, [r4, #20]
 80007b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ba:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80007bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80007be:	b11b      	cbz	r3, 80007c8 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 80007c0:	6823      	ldr	r3, [r4, #0]
 80007c2:	f043 0308 	orr.w	r3, r3, #8
 80007c6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80007c8:	6823      	ldr	r3, [r4, #0]
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80007d0:	2000      	movs	r0, #0
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80007d4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80007d8:	2002      	movs	r0, #2
}
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007dc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d003      	beq.n	80007ec <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80007e8:	2001      	movs	r0, #1
 80007ea:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80007ec:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80007ee:	2305      	movs	r3, #5
 80007f0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80007f4:	6813      	ldr	r3, [r2, #0]
 80007f6:	f023 0301 	bic.w	r3, r3, #1
 80007fa:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80007fc:	2000      	movs	r0, #0
}
 80007fe:	4770      	bx	lr

08000800 <HAL_DMA_IRQHandler>:
{
 8000800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000802:	2300      	movs	r3, #0
 8000804:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000806:	4b5a      	ldr	r3, [pc, #360]	; (8000970 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000808:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800080a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800080c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800080e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000810:	2208      	movs	r2, #8
 8000812:	409a      	lsls	r2, r3
 8000814:	4216      	tst	r6, r2
{
 8000816:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000818:	d00c      	beq.n	8000834 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800081a:	6801      	ldr	r1, [r0, #0]
 800081c:	6808      	ldr	r0, [r1, #0]
 800081e:	0740      	lsls	r0, r0, #29
 8000820:	d508      	bpl.n	8000834 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000822:	6808      	ldr	r0, [r1, #0]
 8000824:	f020 0004 	bic.w	r0, r0, #4
 8000828:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800082a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800082c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800082e:	f042 0201 	orr.w	r2, r2, #1
 8000832:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000834:	2201      	movs	r2, #1
 8000836:	409a      	lsls	r2, r3
 8000838:	4216      	tst	r6, r2
 800083a:	d008      	beq.n	800084e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800083c:	6821      	ldr	r1, [r4, #0]
 800083e:	6949      	ldr	r1, [r1, #20]
 8000840:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000842:	bf41      	itttt	mi
 8000844:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000846:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000848:	f042 0202 	orrmi.w	r2, r2, #2
 800084c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800084e:	2204      	movs	r2, #4
 8000850:	409a      	lsls	r2, r3
 8000852:	4216      	tst	r6, r2
 8000854:	d008      	beq.n	8000868 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000856:	6821      	ldr	r1, [r4, #0]
 8000858:	6809      	ldr	r1, [r1, #0]
 800085a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800085c:	bf41      	itttt	mi
 800085e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000860:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000862:	f042 0204 	orrmi.w	r2, r2, #4
 8000866:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000868:	2210      	movs	r2, #16
 800086a:	409a      	lsls	r2, r3
 800086c:	4216      	tst	r6, r2
 800086e:	d010      	beq.n	8000892 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	6819      	ldr	r1, [r3, #0]
 8000874:	0709      	lsls	r1, r1, #28
 8000876:	d50c      	bpl.n	8000892 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000878:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	0350      	lsls	r0, r2, #13
 800087e:	d535      	bpl.n	80008ec <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	0319      	lsls	r1, r3, #12
 8000884:	d401      	bmi.n	800088a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000888:	e000      	b.n	800088c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800088a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800088c:	b10b      	cbz	r3, 8000892 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800088e:	4620      	mov	r0, r4
 8000890:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000892:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000894:	2220      	movs	r2, #32
 8000896:	408a      	lsls	r2, r1
 8000898:	4216      	tst	r6, r2
 800089a:	d038      	beq.n	800090e <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	6818      	ldr	r0, [r3, #0]
 80008a0:	06c6      	lsls	r6, r0, #27
 80008a2:	d534      	bpl.n	800090e <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80008a4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80008a6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80008aa:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80008ac:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80008ae:	d125      	bne.n	80008fc <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80008b0:	f022 0216 	bic.w	r2, r2, #22
 80008b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80008b6:	695a      	ldr	r2, [r3, #20]
 80008b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008bc:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80008be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008c0:	b90a      	cbnz	r2, 80008c6 <HAL_DMA_IRQHandler+0xc6>
 80008c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80008c4:	b11a      	cbz	r2, 80008ce <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	f022 0208 	bic.w	r2, r2, #8
 80008cc:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008ce:	233f      	movs	r3, #63	; 0x3f
 80008d0:	408b      	lsls	r3, r1
 80008d2:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80008d4:	2300      	movs	r3, #0
 80008d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80008da:	2301      	movs	r3, #1
 80008dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80008e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80008e2:	b10b      	cbz	r3, 80008e8 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80008e4:	4620      	mov	r0, r4
 80008e6:	4798      	blx	r3
}
 80008e8:	b003      	add	sp, #12
 80008ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80008f0:	bf5e      	ittt	pl
 80008f2:	681a      	ldrpl	r2, [r3, #0]
 80008f4:	f022 0208 	bicpl.w	r2, r2, #8
 80008f8:	601a      	strpl	r2, [r3, #0]
 80008fa:	e7c4      	b.n	8000886 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80008fc:	0350      	lsls	r0, r2, #13
 80008fe:	d528      	bpl.n	8000952 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	0319      	lsls	r1, r3, #12
 8000904:	d432      	bmi.n	800096c <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000906:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000908:	b10b      	cbz	r3, 800090e <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 800090a:	4620      	mov	r0, r4
 800090c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800090e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000910:	2b00      	cmp	r3, #0
 8000912:	d0e9      	beq.n	80008e8 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000914:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000916:	07da      	lsls	r2, r3, #31
 8000918:	d519      	bpl.n	800094e <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 800091a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800091c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800091e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000922:	6813      	ldr	r3, [r2, #0]
 8000924:	f023 0301 	bic.w	r3, r3, #1
 8000928:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800092a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800092e:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000932:	9b01      	ldr	r3, [sp, #4]
 8000934:	3301      	adds	r3, #1
 8000936:	429f      	cmp	r7, r3
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	d302      	bcc.n	8000942 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800093c:	6813      	ldr	r3, [r2, #0]
 800093e:	07db      	lsls	r3, r3, #31
 8000940:	d4f7      	bmi.n	8000932 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000942:	2300      	movs	r3, #0
 8000944:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000948:	2301      	movs	r3, #1
 800094a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800094e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000950:	e7c7      	b.n	80008e2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000958:	d108      	bne.n	800096c <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800095a:	6819      	ldr	r1, [r3, #0]
 800095c:	f021 0110 	bic.w	r1, r1, #16
 8000960:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000962:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000964:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000968:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800096c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800096e:	e7cb      	b.n	8000908 <HAL_DMA_IRQHandler+0x108>
 8000970:	2000000c 	.word	0x2000000c

08000974 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000974:	4908      	ldr	r1, [pc, #32]	; (8000998 <FLASH_Program_DoubleWord+0x24>)
{
 8000976:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000978:	690c      	ldr	r4, [r1, #16]
 800097a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800097e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000980:	690c      	ldr	r4, [r1, #16]
 8000982:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000986:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000988:	690c      	ldr	r4, [r1, #16]
 800098a:	f044 0401 	orr.w	r4, r4, #1
 800098e:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000990:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000992:	6043      	str	r3, [r0, #4]
 8000994:	bd10      	pop	{r4, pc}
 8000996:	bf00      	nop
 8000998:	40023c00 	.word	0x40023c00

0800099c <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <FLASH_Program_Word+0x20>)
 800099e:	691a      	ldr	r2, [r3, #16]
 80009a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80009a4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80009a6:	691a      	ldr	r2, [r3, #16]
 80009a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009ac:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80009ae:	691a      	ldr	r2, [r3, #16]
 80009b0:	f042 0201 	orr.w	r2, r2, #1
 80009b4:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80009b6:	6001      	str	r1, [r0, #0]
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40023c00 	.word	0x40023c00

080009c0 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <FLASH_Program_HalfWord+0x20>)
 80009c2:	691a      	ldr	r2, [r3, #16]
 80009c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80009c8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80009ca:	691a      	ldr	r2, [r3, #16]
 80009cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009d0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80009d2:	691a      	ldr	r2, [r3, #16]
 80009d4:	f042 0201 	orr.w	r2, r2, #1
 80009d8:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80009da:	8001      	strh	r1, [r0, #0]
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40023c00 	.word	0x40023c00

080009e4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80009e4:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <FLASH_SetErrorCode+0x84>)
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	06d0      	lsls	r0, r2, #27
 80009ea:	d506      	bpl.n	80009fa <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80009ec:	491f      	ldr	r1, [pc, #124]	; (8000a6c <FLASH_SetErrorCode+0x88>)
 80009ee:	69ca      	ldr	r2, [r1, #28]
 80009f0:	f042 0210 	orr.w	r2, r2, #16
 80009f4:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80009f6:	2210      	movs	r2, #16
 80009f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80009fa:	68da      	ldr	r2, [r3, #12]
 80009fc:	0691      	lsls	r1, r2, #26
 80009fe:	d506      	bpl.n	8000a0e <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000a00:	491a      	ldr	r1, [pc, #104]	; (8000a6c <FLASH_SetErrorCode+0x88>)
 8000a02:	69ca      	ldr	r2, [r1, #28]
 8000a04:	f042 0208 	orr.w	r2, r2, #8
 8000a08:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000a0a:	2220      	movs	r2, #32
 8000a0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <FLASH_SetErrorCode+0x84>)
 8000a10:	68da      	ldr	r2, [r3, #12]
 8000a12:	0652      	lsls	r2, r2, #25
 8000a14:	d506      	bpl.n	8000a24 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000a16:	4915      	ldr	r1, [pc, #84]	; (8000a6c <FLASH_SetErrorCode+0x88>)
 8000a18:	69ca      	ldr	r2, [r1, #28]
 8000a1a:	f042 0204 	orr.w	r2, r2, #4
 8000a1e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000a20:	2240      	movs	r2, #64	; 0x40
 8000a22:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000a24:	68da      	ldr	r2, [r3, #12]
 8000a26:	0610      	lsls	r0, r2, #24
 8000a28:	d506      	bpl.n	8000a38 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000a2a:	4910      	ldr	r1, [pc, #64]	; (8000a6c <FLASH_SetErrorCode+0x88>)
 8000a2c:	69ca      	ldr	r2, [r1, #28]
 8000a2e:	f042 0202 	orr.w	r2, r2, #2
 8000a32:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <FLASH_SetErrorCode+0x84>)
 8000a3a:	68da      	ldr	r2, [r3, #12]
 8000a3c:	05d1      	lsls	r1, r2, #23
 8000a3e:	d507      	bpl.n	8000a50 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000a40:	490a      	ldr	r1, [pc, #40]	; (8000a6c <FLASH_SetErrorCode+0x88>)
 8000a42:	69ca      	ldr	r2, [r1, #28]
 8000a44:	f042 0201 	orr.w	r2, r2, #1
 8000a48:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8000a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a4e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000a50:	68da      	ldr	r2, [r3, #12]
 8000a52:	0792      	lsls	r2, r2, #30
 8000a54:	d506      	bpl.n	8000a64 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000a56:	4905      	ldr	r1, [pc, #20]	; (8000a6c <FLASH_SetErrorCode+0x88>)
 8000a58:	69ca      	ldr	r2, [r1, #28]
 8000a5a:	f042 0220 	orr.w	r2, r2, #32
 8000a5e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000a60:	2202      	movs	r2, #2
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40023c00 	.word	0x40023c00
 8000a6c:	2000c224 	.word	0x2000c224

08000a70 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_FLASH_Unlock+0x1c>)
 8000a72:	691a      	ldr	r2, [r3, #16]
 8000a74:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000a76:	bfbf      	itttt	lt
 8000a78:	4a05      	ldrlt	r2, [pc, #20]	; (8000a90 <HAL_FLASH_Unlock+0x20>)
 8000a7a:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a7c:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8000a80:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000a82:	bfba      	itte	lt
 8000a84:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000a86:	0fc0      	lsrlt	r0, r0, #31
 8000a88:	2000      	movge	r0, #0
}
 8000a8a:	4770      	bx	lr
 8000a8c:	40023c00 	.word	0x40023c00
 8000a90:	45670123 	.word	0x45670123

08000a94 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8000a94:	4a03      	ldr	r2, [pc, #12]	; (8000aa4 <HAL_FLASH_Lock+0x10>)
 8000a96:	6913      	ldr	r3, [r2, #16]
 8000a98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9c:	6113      	str	r3, [r2, #16]
}
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40023c00 	.word	0x40023c00

08000aa8 <FLASH_WaitForLastOperation>:
{ 
 8000aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000aac:	4c12      	ldr	r4, [pc, #72]	; (8000af8 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000aae:	2200      	movs	r2, #0
{ 
 8000ab0:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ab2:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8000ab4:	f7ff fd52 	bl	800055c <HAL_GetTick>
 8000ab8:	4626      	mov	r6, r4
 8000aba:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000abc:	68e3      	ldr	r3, [r4, #12]
 8000abe:	03da      	lsls	r2, r3, #15
 8000ac0:	d40c      	bmi.n	8000adc <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000ac2:	68e3      	ldr	r3, [r4, #12]
 8000ac4:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000ac6:	bf44      	itt	mi
 8000ac8:	2301      	movmi	r3, #1
 8000aca:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000acc:	68f0      	ldr	r0, [r6, #12]
 8000ace:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 8000ad2:	d002      	beq.n	8000ada <FLASH_WaitForLastOperation+0x32>
    FLASH_SetErrorCode();
 8000ad4:	f7ff ff86 	bl	80009e4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000ad8:	2001      	movs	r0, #1
}  
 8000ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000adc:	1c69      	adds	r1, r5, #1
 8000ade:	d0ed      	beq.n	8000abc <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000ae0:	b90d      	cbnz	r5, 8000ae6 <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000ae6:	f7ff fd39 	bl	800055c <HAL_GetTick>
 8000aea:	1bc0      	subs	r0, r0, r7
 8000aec:	4285      	cmp	r5, r0
 8000aee:	d2e5      	bcs.n	8000abc <FLASH_WaitForLastOperation+0x14>
 8000af0:	e7f7      	b.n	8000ae2 <FLASH_WaitForLastOperation+0x3a>
 8000af2:	bf00      	nop
 8000af4:	2000c224 	.word	0x2000c224
 8000af8:	40023c00 	.word	0x40023c00

08000afc <HAL_FLASH_Program>:
{
 8000afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000b00:	4d20      	ldr	r5, [pc, #128]	; (8000b84 <HAL_FLASH_Program+0x88>)
{
 8000b02:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8000b04:	7e2b      	ldrb	r3, [r5, #24]
 8000b06:	2b01      	cmp	r3, #1
{
 8000b08:	4607      	mov	r7, r0
 8000b0a:	460e      	mov	r6, r1
 8000b0c:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8000b0e:	d035      	beq.n	8000b7c <HAL_FLASH_Program+0x80>
 8000b10:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b12:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000b16:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b18:	f7ff ffc6 	bl	8000aa8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000b1c:	b9b0      	cbnz	r0, 8000b4c <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000b1e:	b9cf      	cbnz	r7, 8000b54 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_FLASH_Program+0x8c>)
 8000b22:	691a      	ldr	r2, [r3, #16]
 8000b24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b28:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000b2a:	691a      	ldr	r2, [r3, #16]
 8000b2c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000b2e:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000b30:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8000b32:	f042 0201 	orr.w	r2, r2, #1
 8000b36:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8000b38:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b3e:	f7ff ffb3 	bl	8000aa8 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8000b42:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <HAL_FLASH_Program+0x8c>)
 8000b44:	6913      	ldr	r3, [r2, #16]
 8000b46:	f023 0301 	bic.w	r3, r3, #1
 8000b4a:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	762b      	strb	r3, [r5, #24]
  return status;
 8000b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000b54:	2f01      	cmp	r7, #1
 8000b56:	d104      	bne.n	8000b62 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000b58:	b2a1      	uxth	r1, r4
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	f7ff ff30 	bl	80009c0 <FLASH_Program_HalfWord>
 8000b60:	e7eb      	b.n	8000b3a <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000b62:	2f02      	cmp	r7, #2
 8000b64:	d104      	bne.n	8000b70 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000b66:	4621      	mov	r1, r4
 8000b68:	4630      	mov	r0, r6
 8000b6a:	f7ff ff17 	bl	800099c <FLASH_Program_Word>
 8000b6e:	e7e4      	b.n	8000b3a <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8000b70:	4622      	mov	r2, r4
 8000b72:	4643      	mov	r3, r8
 8000b74:	4630      	mov	r0, r6
 8000b76:	f7ff fefd 	bl	8000974 <FLASH_Program_DoubleWord>
 8000b7a:	e7de      	b.n	8000b3a <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8000b7c:	2002      	movs	r0, #2
}
 8000b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b82:	bf00      	nop
 8000b84:	2000c224 	.word	0x2000c224
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <FLASH_MassErase+0x34>)
 8000b8e:	691a      	ldr	r2, [r3, #16]
 8000b90:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000b94:	611a      	str	r2, [r3, #16]

  if(Banks == FLASH_BANK_BOTH)
 8000b96:	2903      	cmp	r1, #3
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8000b98:	691a      	ldr	r2, [r3, #16]
  if(Banks == FLASH_BANK_BOTH)
 8000b9a:	d10b      	bne.n	8000bb4 <FLASH_MassErase+0x28>
    FLASH->CR |= FLASH_MER_BIT;
 8000b9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  }
  else if(Banks == FLASH_BANK_1)
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8000ba0:	f042 0204 	orr.w	r2, r2, #4
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8000ba4:	611a      	str	r2, [r3, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8000ba6:	691a      	ldr	r2, [r3, #16]
 8000ba8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000bac:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000bb0:	6118      	str	r0, [r3, #16]
 8000bb2:	4770      	bx	lr
  else if(Banks == FLASH_BANK_1)
 8000bb4:	2901      	cmp	r1, #1
 8000bb6:	d0f3      	beq.n	8000ba0 <FLASH_MassErase+0x14>
    FLASH->CR |= FLASH_CR_MER2;
 8000bb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bbc:	e7f2      	b.n	8000ba4 <FLASH_MassErase+0x18>
 8000bbe:	bf00      	nop
 8000bc0:	40023c00 	.word	0x40023c00

08000bc4 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000bc4:	b139      	cbz	r1, 8000bd6 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000bc6:	2901      	cmp	r1, #1
 8000bc8:	d01f      	beq.n	8000c0a <FLASH_Erase_Sector+0x46>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000bca:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000bcc:	bf0c      	ite	eq
 8000bce:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8000bd2:	f44f 7140 	movne.w	r1, #768	; 0x300
  if(Sector > FLASH_SECTOR_11) 
  {
    Sector += 4U;
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <FLASH_Erase_Sector+0x4c>)
 8000bd8:	691a      	ldr	r2, [r3, #16]
 8000bda:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000bde:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000be0:	691a      	ldr	r2, [r3, #16]
 8000be2:	4311      	orrs	r1, r2
 8000be4:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000be6:	691a      	ldr	r2, [r3, #16]
 8000be8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000bec:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000bee:	691a      	ldr	r2, [r3, #16]
  if(Sector > FLASH_SECTOR_11) 
 8000bf0:	280b      	cmp	r0, #11
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000bf2:	f042 0202 	orr.w	r2, r2, #2
    Sector += 4U;
 8000bf6:	bf88      	it	hi
 8000bf8:	3004      	addhi	r0, #4
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000bfa:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000bfe:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000c00:	691a      	ldr	r2, [r3, #16]
 8000c02:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c06:	611a      	str	r2, [r3, #16]
 8000c08:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000c0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0e:	e7e2      	b.n	8000bd6 <FLASH_Erase_Sector+0x12>
 8000c10:	40023c00 	.word	0x40023c00

08000c14 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <FLASH_FlushCaches+0x54>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	0591      	lsls	r1, r2, #22
 8000c1a:	d50f      	bpl.n	8000c3c <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c22:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c32:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c3a:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <FLASH_FlushCaches+0x54>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	0552      	lsls	r2, r2, #21
 8000c42:	d50f      	bpl.n	8000c64 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c4a:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000c5a:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023c00 	.word	0x40023c00

08000c6c <HAL_FLASHEx_Erase>:
{
 8000c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8000c70:	4e25      	ldr	r6, [pc, #148]	; (8000d08 <HAL_FLASHEx_Erase+0x9c>)
 8000c72:	7e33      	ldrb	r3, [r6, #24]
 8000c74:	2b01      	cmp	r3, #1
{
 8000c76:	4604      	mov	r4, r0
 8000c78:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000c7a:	d042      	beq.n	8000d02 <HAL_FLASHEx_Erase+0x96>
 8000c7c:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c7e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000c82:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c84:	f7ff ff10 	bl	8000aa8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000c88:	4605      	mov	r5, r0
 8000c8a:	b9c0      	cbnz	r0, 8000cbe <HAL_FLASHEx_Erase+0x52>
    *SectorError = 0xFFFFFFFFU;
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c90:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c94:	6823      	ldr	r3, [r4, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d116      	bne.n	8000cc8 <HAL_FLASHEx_Erase+0x5c>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000c9a:	6861      	ldr	r1, [r4, #4]
 8000c9c:	7c20      	ldrb	r0, [r4, #16]
 8000c9e:	f7ff ff75 	bl	8000b8c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ca2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ca6:	f7ff feff 	bl	8000aa8 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8000caa:	4a18      	ldr	r2, [pc, #96]	; (8000d0c <HAL_FLASHEx_Erase+0xa0>)
 8000cac:	6913      	ldr	r3, [r2, #16]
 8000cae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000cb2:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cb6:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8000cb8:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 8000cba:	f7ff ffab 	bl	8000c14 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	7633      	strb	r3, [r6, #24]
}
 8000cc2:	4628      	mov	r0, r5
 8000cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000cc8:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000cca:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8000d0c <HAL_FLASHEx_Erase+0xa0>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000cce:	68e3      	ldr	r3, [r4, #12]
 8000cd0:	68a2      	ldr	r2, [r4, #8]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	d2f0      	bcs.n	8000cba <HAL_FLASHEx_Erase+0x4e>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000cd8:	7c21      	ldrb	r1, [r4, #16]
 8000cda:	4638      	mov	r0, r7
 8000cdc:	f7ff ff72 	bl	8000bc4 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ce0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ce4:	f7ff fee0 	bl	8000aa8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000ce8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8000cec:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000cf0:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8000cf4:	b118      	cbz	r0, 8000cfe <HAL_FLASHEx_Erase+0x92>
          *SectorError = index;
 8000cf6:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000cfa:	4605      	mov	r5, r0
          break;
 8000cfc:	e7dd      	b.n	8000cba <HAL_FLASHEx_Erase+0x4e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000cfe:	3701      	adds	r7, #1
 8000d00:	e7e5      	b.n	8000cce <HAL_FLASHEx_Erase+0x62>
  __HAL_LOCK(&pFlash);
 8000d02:	2502      	movs	r5, #2
 8000d04:	e7dd      	b.n	8000cc2 <HAL_FLASHEx_Erase+0x56>
 8000d06:	bf00      	nop
 8000d08:	2000c224 	.word	0x2000c224
 8000d0c:	40023c00 	.word	0x40023c00

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d14:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d16:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d18:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000ee0 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d1c:	4a6e      	ldr	r2, [pc, #440]	; (8000ed8 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d1e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000ee4 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d22:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d24:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000d26:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000d2c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d30:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000d34:	45b6      	cmp	lr, r6
 8000d36:	f040 80b6 	bne.w	8000ea6 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d3a:	684c      	ldr	r4, [r1, #4]
 8000d3c:	f024 0710 	bic.w	r7, r4, #16
 8000d40:	2f02      	cmp	r7, #2
 8000d42:	d116      	bne.n	8000d72 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000d44:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000d48:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d4c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000d50:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d54:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000d58:	f04f 0c0f 	mov.w	ip, #15
 8000d5c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000d60:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d64:	690d      	ldr	r5, [r1, #16]
 8000d66:	fa05 f50b 	lsl.w	r5, r5, fp
 8000d6a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000d6e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000d72:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d76:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000d78:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d7c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000d80:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d82:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d86:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d8a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d8e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d90:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d94:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000d96:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d9a:	d811      	bhi.n	8000dc0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000d9c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d9e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000da2:	68cf      	ldr	r7, [r1, #12]
 8000da4:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000da8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000dac:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000dae:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000db4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000db8:	409f      	lsls	r7, r3
 8000dba:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000dbe:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000dc0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc4:	688f      	ldr	r7, [r1, #8]
 8000dc6:	fa07 f70a 	lsl.w	r7, r7, sl
 8000dca:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000dcc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dce:	00e5      	lsls	r5, r4, #3
 8000dd0:	d569      	bpl.n	8000ea6 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	f04f 0b00 	mov.w	fp, #0
 8000dd6:	f8cd b00c 	str.w	fp, [sp, #12]
 8000dda:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dde:	4d3f      	ldr	r5, [pc, #252]	; (8000edc <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000de4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000de8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000dec:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000df0:	9703      	str	r7, [sp, #12]
 8000df2:	9f03      	ldr	r7, [sp, #12]
 8000df4:	f023 0703 	bic.w	r7, r3, #3
 8000df8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000dfc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e00:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e04:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e08:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000e0c:	f04f 0e0f 	mov.w	lr, #15
 8000e10:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e14:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e16:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1a:	d04b      	beq.n	8000eb4 <HAL_GPIO_Init+0x1a4>
 8000e1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e20:	42a8      	cmp	r0, r5
 8000e22:	d049      	beq.n	8000eb8 <HAL_GPIO_Init+0x1a8>
 8000e24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e28:	42a8      	cmp	r0, r5
 8000e2a:	d047      	beq.n	8000ebc <HAL_GPIO_Init+0x1ac>
 8000e2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e30:	42a8      	cmp	r0, r5
 8000e32:	d045      	beq.n	8000ec0 <HAL_GPIO_Init+0x1b0>
 8000e34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e38:	42a8      	cmp	r0, r5
 8000e3a:	d043      	beq.n	8000ec4 <HAL_GPIO_Init+0x1b4>
 8000e3c:	4548      	cmp	r0, r9
 8000e3e:	d043      	beq.n	8000ec8 <HAL_GPIO_Init+0x1b8>
 8000e40:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000e44:	42a8      	cmp	r0, r5
 8000e46:	d041      	beq.n	8000ecc <HAL_GPIO_Init+0x1bc>
 8000e48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e4c:	42a8      	cmp	r0, r5
 8000e4e:	d03f      	beq.n	8000ed0 <HAL_GPIO_Init+0x1c0>
 8000e50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e54:	42a8      	cmp	r0, r5
 8000e56:	d03d      	beq.n	8000ed4 <HAL_GPIO_Init+0x1c4>
 8000e58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e5c:	42a8      	cmp	r0, r5
 8000e5e:	bf14      	ite	ne
 8000e60:	250a      	movne	r5, #10
 8000e62:	2509      	moveq	r5, #9
 8000e64:	fa05 f50c 	lsl.w	r5, r5, ip
 8000e68:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e6c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000e6e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e70:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e72:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e76:	bf0c      	ite	eq
 8000e78:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000e7a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000e7c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000e7e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e80:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e84:	bf0c      	ite	eq
 8000e86:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000e88:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000e8a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e8e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000e92:	bf0c      	ite	eq
 8000e94:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000e96:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000e98:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000e9a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e9c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	bf54      	ite	pl
 8000ea0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000ea2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000ea4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	2b10      	cmp	r3, #16
 8000eaa:	f47f af3c 	bne.w	8000d26 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000eae:	b005      	add	sp, #20
 8000eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eb4:	465d      	mov	r5, fp
 8000eb6:	e7d5      	b.n	8000e64 <HAL_GPIO_Init+0x154>
 8000eb8:	2501      	movs	r5, #1
 8000eba:	e7d3      	b.n	8000e64 <HAL_GPIO_Init+0x154>
 8000ebc:	2502      	movs	r5, #2
 8000ebe:	e7d1      	b.n	8000e64 <HAL_GPIO_Init+0x154>
 8000ec0:	2503      	movs	r5, #3
 8000ec2:	e7cf      	b.n	8000e64 <HAL_GPIO_Init+0x154>
 8000ec4:	2504      	movs	r5, #4
 8000ec6:	e7cd      	b.n	8000e64 <HAL_GPIO_Init+0x154>
 8000ec8:	2505      	movs	r5, #5
 8000eca:	e7cb      	b.n	8000e64 <HAL_GPIO_Init+0x154>
 8000ecc:	2506      	movs	r5, #6
 8000ece:	e7c9      	b.n	8000e64 <HAL_GPIO_Init+0x154>
 8000ed0:	2507      	movs	r5, #7
 8000ed2:	e7c7      	b.n	8000e64 <HAL_GPIO_Init+0x154>
 8000ed4:	2508      	movs	r5, #8
 8000ed6:	e7c5      	b.n	8000e64 <HAL_GPIO_Init+0x154>
 8000ed8:	40013c00 	.word	0x40013c00
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40021400 	.word	0x40021400

08000ee8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ee8:	b10a      	cbz	r2, 8000eee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000eea:	6181      	str	r1, [r0, #24]
 8000eec:	4770      	bx	lr
 8000eee:	0409      	lsls	r1, r1, #16
 8000ef0:	e7fb      	b.n	8000eea <HAL_GPIO_WritePin+0x2>

08000ef2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000ef2:	6943      	ldr	r3, [r0, #20]
 8000ef4:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ef8:	bf08      	it	eq
 8000efa:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000efc:	6181      	str	r1, [r0, #24]
 8000efe:	4770      	bx	lr

08000f00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f08:	4c18      	ldr	r4, [pc, #96]	; (8000f6c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f10:	641a      	str	r2, [r3, #64]	; 0x40
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <HAL_PWREx_EnableOverDrive+0x70>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000f22:	f7ff fb1b 	bl	800055c <HAL_GetTick>
 8000f26:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f28:	6863      	ldr	r3, [r4, #4]
 8000f2a:	03da      	lsls	r2, r3, #15
 8000f2c:	d50b      	bpl.n	8000f46 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f30:	4c0e      	ldr	r4, [pc, #56]	; (8000f6c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000f36:	f7ff fb11 	bl	800055c <HAL_GetTick>
 8000f3a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f3c:	6863      	ldr	r3, [r4, #4]
 8000f3e:	039b      	lsls	r3, r3, #14
 8000f40:	d50a      	bpl.n	8000f58 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000f42:	2000      	movs	r0, #0
 8000f44:	e006      	b.n	8000f54 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f46:	f7ff fb09 	bl	800055c <HAL_GetTick>
 8000f4a:	1b40      	subs	r0, r0, r5
 8000f4c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f50:	d9ea      	bls.n	8000f28 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8000f52:	2003      	movs	r0, #3
}
 8000f54:	b003      	add	sp, #12
 8000f56:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f58:	f7ff fb00 	bl	800055c <HAL_GetTick>
 8000f5c:	1b40      	subs	r0, r0, r5
 8000f5e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f62:	d9eb      	bls.n	8000f3c <HAL_PWREx_EnableOverDrive+0x3c>
 8000f64:	e7f5      	b.n	8000f52 <HAL_PWREx_EnableOverDrive+0x52>
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40007000 	.word	0x40007000
 8000f70:	420e0040 	.word	0x420e0040
 8000f74:	420e0044 	.word	0x420e0044

08000f78 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f78:	4913      	ldr	r1, [pc, #76]	; (8000fc8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000f7a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f7c:	688b      	ldr	r3, [r1, #8]
 8000f7e:	f003 030c 	and.w	r3, r3, #12
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	d003      	beq.n	8000f8e <HAL_RCC_GetSysClockFreq+0x16>
 8000f86:	2b08      	cmp	r3, #8
 8000f88:	d003      	beq.n	8000f92 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f8a:	4810      	ldr	r0, [pc, #64]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f8c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000f8e:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000f90:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f92:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f94:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f96:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f98:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f9c:	bf14      	ite	ne
 8000f9e:	480c      	ldrne	r0, [pc, #48]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fa0:	480a      	ldreq	r0, [pc, #40]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fa2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000fa6:	bf18      	it	ne
 8000fa8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000faa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fae:	fba1 0100 	umull	r0, r1, r1, r0
 8000fb2:	f7ff f925 	bl	8000200 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000fc2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fc6:	bd08      	pop	{r3, pc}
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	00f42400 	.word	0x00f42400
 8000fd0:	017d7840 	.word	0x017d7840

08000fd4 <HAL_RCC_ClockConfig>:
{
 8000fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fd8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000fda:	4604      	mov	r4, r0
 8000fdc:	b910      	cbnz	r0, 8000fe4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000fde:	2001      	movs	r0, #1
 8000fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fe4:	4b44      	ldr	r3, [pc, #272]	; (80010f8 <HAL_RCC_ClockConfig+0x124>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	f002 020f 	and.w	r2, r2, #15
 8000fec:	428a      	cmp	r2, r1
 8000fee:	d328      	bcc.n	8001042 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ff0:	6821      	ldr	r1, [r4, #0]
 8000ff2:	078f      	lsls	r7, r1, #30
 8000ff4:	d42d      	bmi.n	8001052 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ff6:	07c8      	lsls	r0, r1, #31
 8000ff8:	d440      	bmi.n	800107c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ffa:	4b3f      	ldr	r3, [pc, #252]	; (80010f8 <HAL_RCC_ClockConfig+0x124>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	f002 020f 	and.w	r2, r2, #15
 8001002:	4295      	cmp	r5, r2
 8001004:	d366      	bcc.n	80010d4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001006:	6822      	ldr	r2, [r4, #0]
 8001008:	0751      	lsls	r1, r2, #29
 800100a:	d46c      	bmi.n	80010e6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800100c:	0713      	lsls	r3, r2, #28
 800100e:	d507      	bpl.n	8001020 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001010:	4a3a      	ldr	r2, [pc, #232]	; (80010fc <HAL_RCC_ClockConfig+0x128>)
 8001012:	6921      	ldr	r1, [r4, #16]
 8001014:	6893      	ldr	r3, [r2, #8]
 8001016:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800101a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800101e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001020:	f7ff ffaa 	bl	8000f78 <HAL_RCC_GetSysClockFreq>
 8001024:	4b35      	ldr	r3, [pc, #212]	; (80010fc <HAL_RCC_ClockConfig+0x128>)
 8001026:	4a36      	ldr	r2, [pc, #216]	; (8001100 <HAL_RCC_ClockConfig+0x12c>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800102e:	5cd3      	ldrb	r3, [r2, r3]
 8001030:	40d8      	lsrs	r0, r3
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <HAL_RCC_ClockConfig+0x130>)
 8001034:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001036:	2000      	movs	r0, #0
 8001038:	f005 fa78 	bl	800652c <HAL_InitTick>
  return HAL_OK;
 800103c:	2000      	movs	r0, #0
 800103e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001042:	b2ca      	uxtb	r2, r1
 8001044:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 030f 	and.w	r3, r3, #15
 800104c:	4299      	cmp	r1, r3
 800104e:	d1c6      	bne.n	8000fde <HAL_RCC_ClockConfig+0xa>
 8001050:	e7ce      	b.n	8000ff0 <HAL_RCC_ClockConfig+0x1c>
 8001052:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001054:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001058:	bf1e      	ittt	ne
 800105a:	689a      	ldrne	r2, [r3, #8]
 800105c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001060:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001062:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001064:	bf42      	ittt	mi
 8001066:	689a      	ldrmi	r2, [r3, #8]
 8001068:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800106c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	68a0      	ldr	r0, [r4, #8]
 8001072:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001076:	4302      	orrs	r2, r0
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	e7bc      	b.n	8000ff6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800107c:	6862      	ldr	r2, [r4, #4]
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <HAL_RCC_ClockConfig+0x128>)
 8001080:	2a01      	cmp	r2, #1
 8001082:	d11d      	bne.n	80010c0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108a:	d0a8      	beq.n	8000fde <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800108c:	4e1b      	ldr	r6, [pc, #108]	; (80010fc <HAL_RCC_ClockConfig+0x128>)
 800108e:	68b3      	ldr	r3, [r6, #8]
 8001090:	f023 0303 	bic.w	r3, r3, #3
 8001094:	4313      	orrs	r3, r2
 8001096:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001098:	f7ff fa60 	bl	800055c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800109c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80010a0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010a2:	68b3      	ldr	r3, [r6, #8]
 80010a4:	6862      	ldr	r2, [r4, #4]
 80010a6:	f003 030c 	and.w	r3, r3, #12
 80010aa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010ae:	d0a4      	beq.n	8000ffa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b0:	f7ff fa54 	bl	800055c <HAL_GetTick>
 80010b4:	1bc0      	subs	r0, r0, r7
 80010b6:	4540      	cmp	r0, r8
 80010b8:	d9f3      	bls.n	80010a2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80010ba:	2003      	movs	r0, #3
}
 80010bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010c0:	1e91      	subs	r1, r2, #2
 80010c2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010c6:	d802      	bhi.n	80010ce <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010cc:	e7dd      	b.n	800108a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ce:	f013 0f02 	tst.w	r3, #2
 80010d2:	e7da      	b.n	800108a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d4:	b2ea      	uxtb	r2, r5
 80010d6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	429d      	cmp	r5, r3
 80010e0:	f47f af7d 	bne.w	8000fde <HAL_RCC_ClockConfig+0xa>
 80010e4:	e78f      	b.n	8001006 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010e6:	4905      	ldr	r1, [pc, #20]	; (80010fc <HAL_RCC_ClockConfig+0x128>)
 80010e8:	68e0      	ldr	r0, [r4, #12]
 80010ea:	688b      	ldr	r3, [r1, #8]
 80010ec:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80010f0:	4303      	orrs	r3, r0
 80010f2:	608b      	str	r3, [r1, #8]
 80010f4:	e78a      	b.n	800100c <HAL_RCC_ClockConfig+0x38>
 80010f6:	bf00      	nop
 80010f8:	40023c00 	.word	0x40023c00
 80010fc:	40023800 	.word	0x40023800
 8001100:	080067fc 	.word	0x080067fc
 8001104:	2000000c 	.word	0x2000000c

08001108 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <HAL_RCC_GetPCLK1Freq+0x14>)
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <HAL_RCC_GetPCLK1Freq+0x18>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001112:	5cd3      	ldrb	r3, [r2, r3]
 8001114:	4a03      	ldr	r2, [pc, #12]	; (8001124 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001116:	6810      	ldr	r0, [r2, #0]
}
 8001118:	40d8      	lsrs	r0, r3
 800111a:	4770      	bx	lr
 800111c:	40023800 	.word	0x40023800
 8001120:	0800680c 	.word	0x0800680c
 8001124:	2000000c 	.word	0x2000000c

08001128 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001128:	230f      	movs	r3, #15
 800112a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_RCC_GetClockConfig+0x34>)
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	f002 0203 	and.w	r2, r2, #3
 8001134:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800113c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001144:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	08db      	lsrs	r3, r3, #3
 800114a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800114e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <HAL_RCC_GetClockConfig+0x38>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	600b      	str	r3, [r1, #0]
 800115a:	4770      	bx	lr
 800115c:	40023800 	.word	0x40023800
 8001160:	40023c00 	.word	0x40023c00

08001164 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001166:	6802      	ldr	r2, [r0, #0]
{
 8001168:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800116a:	0610      	lsls	r0, r2, #24
 800116c:	d508      	bpl.n	8001180 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800116e:	49a8      	ldr	r1, [pc, #672]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001170:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001172:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001176:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800117a:	4303      	orrs	r3, r0
 800117c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001180:	05d1      	lsls	r1, r2, #23
 8001182:	d508      	bpl.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001184:	49a2      	ldr	r1, [pc, #648]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001186:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001188:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800118c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001190:	4303      	orrs	r3, r0
 8001192:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001196:	f012 0f43 	tst.w	r2, #67	; 0x43
 800119a:	d172      	bne.n	8001282 <HAL_RCCEx_PeriphCLKConfig+0x11e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	f013 0f0c 	tst.w	r3, #12
 80011a2:	f000 80bf 	beq.w	8001324 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80011a6:	4d9b      	ldr	r5, [pc, #620]	; (8001414 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80011a8:	4e99      	ldr	r6, [pc, #612]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
    __HAL_RCC_PLLSAI_DISABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80011ae:	f7ff f9d5 	bl	800055c <HAL_GetTick>
 80011b2:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80011b4:	6833      	ldr	r3, [r6, #0]
 80011b6:	009a      	lsls	r2, r3, #2
 80011b8:	f100 80f9 	bmi.w	80013ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80011bc:	6822      	ldr	r2, [r4, #0]
 80011be:	0753      	lsls	r3, r2, #29
 80011c0:	d51a      	bpl.n	80011f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80011c2:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80011c6:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80011ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ce:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80011d2:	430b      	orrs	r3, r1
 80011d4:	6921      	ldr	r1, [r4, #16]
 80011d6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80011da:	69a1      	ldr	r1, [r4, #24]
 80011dc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80011e0:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80011e4:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80011e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80011ea:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80011ee:	3901      	subs	r1, #1
 80011f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80011f4:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80011f8:	0717      	lsls	r7, r2, #28
 80011fa:	d519      	bpl.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80011fc:	4984      	ldr	r1, [pc, #528]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80011fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001202:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8001206:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800120a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800120e:	4303      	orrs	r3, r0
 8001210:	6920      	ldr	r0, [r4, #16]
 8001212:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001216:	69e0      	ldr	r0, [r4, #28]
 8001218:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 800121c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001220:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001224:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001226:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800122a:	4303      	orrs	r3, r0
 800122c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8001230:	0616      	lsls	r6, r2, #24
 8001232:	d517      	bpl.n	8001264 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8001234:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800123a:	d113      	bne.n	8001264 <HAL_RCCEx_PeriphCLKConfig+0x100>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800123c:	4974      	ldr	r1, [pc, #464]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800123e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001242:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8001246:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800124a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800124e:	4313      	orrs	r3, r2
 8001250:	6922      	ldr	r2, [r4, #16]
 8001252:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001256:	6962      	ldr	r2, [r4, #20]
 8001258:	0852      	lsrs	r2, r2, #1
 800125a:	3a01      	subs	r2, #1
 800125c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001264:	2301      	movs	r3, #1
 8001266:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001268:	f7ff f978 	bl	800055c <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800126c:	4d68      	ldr	r5, [pc, #416]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
    tickstart = HAL_GetTick();
 800126e:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001270:	682b      	ldr	r3, [r5, #0]
 8001272:	0098      	lsls	r0, r3, #2
 8001274:	d458      	bmi.n	8001328 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001276:	f7ff f971 	bl	800055c <HAL_GetTick>
 800127a:	1b80      	subs	r0, r0, r6
 800127c:	2802      	cmp	r0, #2
 800127e:	d9f7      	bls.n	8001270 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001280:	e04d      	b.n	800131e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_PLLI2S_DISABLE();
 8001282:	4d65      	ldr	r5, [pc, #404]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001284:	4e62      	ldr	r6, [pc, #392]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800128a:	f7ff f967 	bl	800055c <HAL_GetTick>
 800128e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001290:	6833      	ldr	r3, [r6, #0]
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	d43e      	bmi.n	8001314 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001296:	6821      	ldr	r1, [r4, #0]
 8001298:	07c8      	lsls	r0, r1, #31
 800129a:	d506      	bpl.n	80012aa <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800129c:	68a3      	ldr	r3, [r4, #8]
 800129e:	6862      	ldr	r2, [r4, #4]
 80012a0:	071b      	lsls	r3, r3, #28
 80012a2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012a6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80012aa:	078a      	lsls	r2, r1, #30
 80012ac:	d515      	bpl.n	80012da <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80012ae:	4a58      	ldr	r2, [pc, #352]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80012b0:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80012b2:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80012b6:	6866      	ldr	r6, [r4, #4]
 80012b8:	061b      	lsls	r3, r3, #24
 80012ba:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80012be:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80012c2:	4303      	orrs	r3, r0
 80012c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80012c8:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80012cc:	6a23      	ldr	r3, [r4, #32]
 80012ce:	f020 001f 	bic.w	r0, r0, #31
 80012d2:	3b01      	subs	r3, #1
 80012d4:	4303      	orrs	r3, r0
 80012d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80012da:	064b      	lsls	r3, r1, #25
 80012dc:	d50a      	bpl.n	80012f4 <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80012de:	68e3      	ldr	r3, [r4, #12]
 80012e0:	6862      	ldr	r2, [r4, #4]
 80012e2:	061b      	lsls	r3, r3, #24
 80012e4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012e8:	68a2      	ldr	r2, [r4, #8]
 80012ea:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80012ee:	4a48      	ldr	r2, [pc, #288]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80012f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80012f4:	2301      	movs	r3, #1
 80012f6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80012f8:	f7ff f930 	bl	800055c <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80012fc:	4d44      	ldr	r5, [pc, #272]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
    tickstart = HAL_GetTick();
 80012fe:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001300:	682b      	ldr	r3, [r5, #0]
 8001302:	011f      	lsls	r7, r3, #4
 8001304:	f53f af4a 	bmi.w	800119c <HAL_RCCEx_PeriphCLKConfig+0x38>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001308:	f7ff f928 	bl	800055c <HAL_GetTick>
 800130c:	1b80      	subs	r0, r0, r6
 800130e:	2802      	cmp	r0, #2
 8001310:	d9f6      	bls.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8001312:	e004      	b.n	800131e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001314:	f7ff f922 	bl	800055c <HAL_GetTick>
 8001318:	1bc0      	subs	r0, r0, r7
 800131a:	2802      	cmp	r0, #2
 800131c:	d9b8      	bls.n	8001290 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        return HAL_TIMEOUT;
 800131e:	2003      	movs	r0, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
}
 8001320:	b003      	add	sp, #12
 8001322:	bdf0      	pop	{r4, r5, r6, r7, pc}
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8001324:	0618      	lsls	r0, r3, #24
 8001326:	d43d      	bmi.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	0699      	lsls	r1, r3, #26
 800132c:	d530      	bpl.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	4b37      	ldr	r3, [pc, #220]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
    PWR->CR |= PWR_CR_DBP;
 8001334:	4d39      	ldr	r5, [pc, #228]	; (800141c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001338:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001348:	682b      	ldr	r3, [r5, #0]
 800134a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001350:	f7ff f904 	bl	800055c <HAL_GetTick>
 8001354:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001356:	682b      	ldr	r3, [r5, #0]
 8001358:	05d9      	lsls	r1, r3, #23
 800135a:	d52f      	bpl.n	80013bc <HAL_RCCEx_PeriphCLKConfig+0x258>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800135c:	4d2c      	ldr	r5, [pc, #176]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800135e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001360:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001364:	d130      	bne.n	80013c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001366:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001368:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800136c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001370:	4a27      	ldr	r2, [pc, #156]	; (8001410 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001372:	d148      	bne.n	8001406 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8001374:	6891      	ldr	r1, [r2, #8]
 8001376:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800137a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800137e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001382:	4301      	orrs	r1, r0
 8001384:	6091      	str	r1, [r2, #8]
 8001386:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138c:	430b      	orrs	r3, r1
 800138e:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001390:	6820      	ldr	r0, [r4, #0]
 8001392:	f010 0010 	ands.w	r0, r0, #16
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001396:	bf1f      	itttt	ne
 8001398:	4b21      	ldrne	r3, [pc, #132]	; (8001420 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800139a:	f894 2030 	ldrbne.w	r2, [r4, #48]	; 0x30
 800139e:	601a      	strne	r2, [r3, #0]
  return HAL_OK;
 80013a0:	2000      	movne	r0, #0
 80013a2:	e7bd      	b.n	8001320 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80013a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80013aa:	d1bd      	bne.n	8001328 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 80013ac:	e6fb      	b.n	80011a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80013ae:	f7ff f8d5 	bl	800055c <HAL_GetTick>
 80013b2:	1bc0      	subs	r0, r0, r7
 80013b4:	2802      	cmp	r0, #2
 80013b6:	f67f aefd 	bls.w	80011b4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80013ba:	e7b0      	b.n	800131e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80013bc:	f7ff f8ce 	bl	800055c <HAL_GetTick>
 80013c0:	1b80      	subs	r0, r0, r6
 80013c2:	2802      	cmp	r0, #2
 80013c4:	d9c7      	bls.n	8001356 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80013c6:	e7aa      	b.n	800131e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80013c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013ca:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d0c9      	beq.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x202>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80013d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80013d4:	4a13      	ldr	r2, [pc, #76]	; (8001424 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80013d6:	2101      	movs	r1, #1
 80013d8:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80013da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80013de:	2100      	movs	r1, #0
 80013e0:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80013e2:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80013e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013e6:	07da      	lsls	r2, r3, #31
 80013e8:	d5bd      	bpl.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x202>
        tickstart = HAL_GetTick();
 80013ea:	f7ff f8b7 	bl	800055c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80013f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013f6:	079b      	lsls	r3, r3, #30
 80013f8:	d4b5      	bmi.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x202>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7ff f8af 	bl	800055c <HAL_GetTick>
 80013fe:	1b80      	subs	r0, r0, r6
 8001400:	42b8      	cmp	r0, r7
 8001402:	d9f7      	bls.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x290>
 8001404:	e78b      	b.n	800131e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001406:	6891      	ldr	r1, [r2, #8]
 8001408:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800140c:	e7ba      	b.n	8001384 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	42470070 	.word	0x42470070
 8001418:	42470068 	.word	0x42470068
 800141c:	40007000 	.word	0x40007000
 8001420:	424711e0 	.word	0x424711e0
 8001424:	42470e40 	.word	0x42470e40

08001428 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001428:	b570      	push	{r4, r5, r6, lr}

  /* Get Start Tick */
  tickstart = HAL_GetTick();

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800142a:	4c4e      	ldr	r4, [pc, #312]	; (8001564 <HAL_RCC_DeInit+0x13c>)
  tickstart = HAL_GetTick();
 800142c:	f7ff f896 	bl	800055c <HAL_GetTick>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001430:	6823      	ldr	r3, [r4, #0]
 8001432:	f043 0301 	orr.w	r3, r3, #1
  tickstart = HAL_GetTick();
 8001436:	4605      	mov	r5, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001438:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	0798      	lsls	r0, r3, #30
 800143e:	d56c      	bpl.n	800151a <HAL_RCC_DeInit+0xf2>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001446:	6023      	str	r3, [r4, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001448:	f7ff f888 	bl	800055c <HAL_GetTick>

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800144c:	2300      	movs	r3, #0
 800144e:	60a3      	str	r3, [r4, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001450:	4c44      	ldr	r4, [pc, #272]	; (8001564 <HAL_RCC_DeInit+0x13c>)
  tickstart = HAL_GetTick();
 8001452:	4605      	mov	r5, r0
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001454:	f241 3688 	movw	r6, #5000	; 0x1388
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001458:	68a3      	ldr	r3, [r4, #8]
 800145a:	f013 0f0c 	tst.w	r3, #12
 800145e:	d163      	bne.n	8001528 <HAL_RCC_DeInit+0x100>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001460:	f7ff f87c 	bl	800055c <HAL_GetTick>

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8001464:	6823      	ldr	r3, [r4, #0]
 8001466:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800146a:	6023      	str	r3, [r4, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800146c:	4c3d      	ldr	r4, [pc, #244]	; (8001564 <HAL_RCC_DeInit+0x13c>)
  tickstart = HAL_GetTick();
 800146e:	4605      	mov	r5, r0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001470:	6823      	ldr	r3, [r4, #0]
 8001472:	0399      	lsls	r1, r3, #14
 8001474:	d45e      	bmi.n	8001534 <HAL_RCC_DeInit+0x10c>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001476:	f7ff f871 	bl	800055c <HAL_GetTick>

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001480:	6023      	str	r3, [r4, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001482:	4c38      	ldr	r4, [pc, #224]	; (8001564 <HAL_RCC_DeInit+0x13c>)
  tickstart = HAL_GetTick();
 8001484:	4605      	mov	r5, r0
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001486:	6823      	ldr	r3, [r4, #0]
 8001488:	019a      	lsls	r2, r3, #6
 800148a:	d459      	bmi.n	8001540 <HAL_RCC_DeInit+0x118>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800148c:	f7ff f866 	bl	800055c <HAL_GetTick>

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8001490:	6823      	ldr	r3, [r4, #0]
 8001492:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001496:	6023      	str	r3, [r4, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8001498:	4c32      	ldr	r4, [pc, #200]	; (8001564 <HAL_RCC_DeInit+0x13c>)
  tickstart = HAL_GetTick();
 800149a:	4605      	mov	r5, r0
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	d454      	bmi.n	800154c <HAL_RCC_DeInit+0x124>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80014a2:	f7ff f85b 	bl	800055c <HAL_GetTick>

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6023      	str	r3, [r4, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80014ae:	4c2d      	ldr	r4, [pc, #180]	; (8001564 <HAL_RCC_DeInit+0x13c>)
  tickstart = HAL_GetTick();
 80014b0:	4605      	mov	r5, r0
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80014b2:	6820      	ldr	r0, [r4, #0]
 80014b4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80014b8:	d14e      	bne.n	8001558 <HAL_RCC_DeInit+0x130>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <HAL_RCC_DeInit+0x140>)
 80014bc:	6063      	str	r3, [r4, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80014be:	3b10      	subs	r3, #16
 80014c0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 80014c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80014c8:	68e3      	ldr	r3, [r4, #12]

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80014ca:	4a28      	ldr	r2, [pc, #160]	; (800156c <HAL_RCC_DeInit+0x144>)
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80014cc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80014d0:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80014d2:	68e3      	ldr	r3, [r4, #12]
 80014d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014d8:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 80014da:	68e3      	ldr	r3, [r4, #12]
 80014dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014e0:	60e3      	str	r3, [r4, #12]
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80014e2:	68e3      	ldr	r3, [r4, #12]
 80014e4:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80014e8:	60e3      	str	r3, [r4, #12]
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80014ea:	68e3      	ldr	r3, [r4, #12]
 80014ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f0:	60e3      	str	r3, [r4, #12]
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 80014f2:	68e3      	ldr	r3, [r4, #12]
 80014f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014f8:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80014fa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	6763      	str	r3, [r4, #116]	; 0x74
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001502:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001508:	6763      	str	r3, [r4, #116]	; 0x74
  SystemCoreClock = HSI_VALUE;
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_RCC_DeInit+0x148>)
 800150c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150e:	f005 f80d 	bl	800652c <HAL_InitTick>
      return HAL_TIMEOUT;
 8001512:	3000      	adds	r0, #0
 8001514:	bf18      	it	ne
 8001516:	2001      	movne	r0, #1
  }
  else
  {
    return HAL_OK;
  }
}
 8001518:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff f81f 	bl	800055c <HAL_GetTick>
 800151e:	1b40      	subs	r0, r0, r5
 8001520:	2802      	cmp	r0, #2
 8001522:	d98a      	bls.n	800143a <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 8001524:	2003      	movs	r0, #3
 8001526:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001528:	f7ff f818 	bl	800055c <HAL_GetTick>
 800152c:	1b40      	subs	r0, r0, r5
 800152e:	42b0      	cmp	r0, r6
 8001530:	d992      	bls.n	8001458 <HAL_RCC_DeInit+0x30>
 8001532:	e7f7      	b.n	8001524 <HAL_RCC_DeInit+0xfc>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff f812 	bl	800055c <HAL_GetTick>
 8001538:	1b40      	subs	r0, r0, r5
 800153a:	2864      	cmp	r0, #100	; 0x64
 800153c:	d998      	bls.n	8001470 <HAL_RCC_DeInit+0x48>
 800153e:	e7f1      	b.n	8001524 <HAL_RCC_DeInit+0xfc>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff f80c 	bl	800055c <HAL_GetTick>
 8001544:	1b40      	subs	r0, r0, r5
 8001546:	2802      	cmp	r0, #2
 8001548:	d99d      	bls.n	8001486 <HAL_RCC_DeInit+0x5e>
 800154a:	e7eb      	b.n	8001524 <HAL_RCC_DeInit+0xfc>
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800154c:	f7ff f806 	bl	800055c <HAL_GetTick>
 8001550:	1b40      	subs	r0, r0, r5
 8001552:	2802      	cmp	r0, #2
 8001554:	d9a2      	bls.n	800149c <HAL_RCC_DeInit+0x74>
 8001556:	e7e5      	b.n	8001524 <HAL_RCC_DeInit+0xfc>
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001558:	f7ff f800 	bl	800055c <HAL_GetTick>
 800155c:	1b40      	subs	r0, r0, r5
 800155e:	2802      	cmp	r0, #2
 8001560:	d9a7      	bls.n	80014b2 <HAL_RCC_DeInit+0x8a>
 8001562:	e7df      	b.n	8001524 <HAL_RCC_DeInit+0xfc>
 8001564:	40023800 	.word	0x40023800
 8001568:	24003010 	.word	0x24003010
 800156c:	00f42400 	.word	0x00f42400
 8001570:	2000000c 	.word	0x2000000c

08001574 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001574:	6803      	ldr	r3, [r0, #0]
{
 8001576:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157a:	07dd      	lsls	r5, r3, #31
{
 800157c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157e:	d410      	bmi.n	80015a2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001580:	6823      	ldr	r3, [r4, #0]
 8001582:	0798      	lsls	r0, r3, #30
 8001584:	d45b      	bmi.n	800163e <HAL_RCC_OscConfig+0xca>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	071a      	lsls	r2, r3, #28
 800158a:	f100 809d 	bmi.w	80016c8 <HAL_RCC_OscConfig+0x154>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	075b      	lsls	r3, r3, #29
 8001592:	f100 80bb 	bmi.w	800170c <HAL_RCC_OscConfig+0x198>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001596:	69a2      	ldr	r2, [r4, #24]
 8001598:	2a00      	cmp	r2, #0
 800159a:	f040 811c 	bne.w	80017d6 <HAL_RCC_OscConfig+0x262>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800159e:	2000      	movs	r0, #0
 80015a0:	e015      	b.n	80015ce <HAL_RCC_OscConfig+0x5a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015a2:	4ba7      	ldr	r3, [pc, #668]	; (8001840 <HAL_RCC_OscConfig+0x2cc>)
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	f002 020c 	and.w	r2, r2, #12
 80015aa:	2a04      	cmp	r2, #4
 80015ac:	d007      	beq.n	80015be <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015b4:	2a08      	cmp	r2, #8
 80015b6:	d10d      	bne.n	80015d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	0259      	lsls	r1, r3, #9
 80015bc:	d50a      	bpl.n	80015d4 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015be:	4ba0      	ldr	r3, [pc, #640]	; (8001840 <HAL_RCC_OscConfig+0x2cc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	039a      	lsls	r2, r3, #14
 80015c4:	d5dc      	bpl.n	8001580 <HAL_RCC_OscConfig+0xc>
 80015c6:	6863      	ldr	r3, [r4, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1d9      	bne.n	8001580 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80015cc:	2001      	movs	r0, #1
}
 80015ce:	b002      	add	sp, #8
 80015d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d4:	6863      	ldr	r3, [r4, #4]
 80015d6:	4d9a      	ldr	r5, [pc, #616]	; (8001840 <HAL_RCC_OscConfig+0x2cc>)
 80015d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015dc:	d111      	bne.n	8001602 <HAL_RCC_OscConfig+0x8e>
 80015de:	682b      	ldr	r3, [r5, #0]
 80015e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015e6:	f7fe ffb9 	bl	800055c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4d95      	ldr	r5, [pc, #596]	; (8001840 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80015ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	682b      	ldr	r3, [r5, #0]
 80015f0:	039b      	lsls	r3, r3, #14
 80015f2:	d4c5      	bmi.n	8001580 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f4:	f7fe ffb2 	bl	800055c <HAL_GetTick>
 80015f8:	1b80      	subs	r0, r0, r6
 80015fa:	2864      	cmp	r0, #100	; 0x64
 80015fc:	d9f7      	bls.n	80015ee <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80015fe:	2003      	movs	r0, #3
 8001600:	e7e5      	b.n	80015ce <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001602:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001606:	d104      	bne.n	8001612 <HAL_RCC_OscConfig+0x9e>
 8001608:	682b      	ldr	r3, [r5, #0]
 800160a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160e:	602b      	str	r3, [r5, #0]
 8001610:	e7e5      	b.n	80015de <HAL_RCC_OscConfig+0x6a>
 8001612:	682a      	ldr	r2, [r5, #0]
 8001614:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001618:	602a      	str	r2, [r5, #0]
 800161a:	682a      	ldr	r2, [r5, #0]
 800161c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001620:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1df      	bne.n	80015e6 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8001626:	f7fe ff99 	bl	800055c <HAL_GetTick>
 800162a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162c:	682b      	ldr	r3, [r5, #0]
 800162e:	039f      	lsls	r7, r3, #14
 8001630:	d5a6      	bpl.n	8001580 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001632:	f7fe ff93 	bl	800055c <HAL_GetTick>
 8001636:	1b80      	subs	r0, r0, r6
 8001638:	2864      	cmp	r0, #100	; 0x64
 800163a:	d9f7      	bls.n	800162c <HAL_RCC_OscConfig+0xb8>
 800163c:	e7df      	b.n	80015fe <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800163e:	4b80      	ldr	r3, [pc, #512]	; (8001840 <HAL_RCC_OscConfig+0x2cc>)
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	f012 0f0c 	tst.w	r2, #12
 8001646:	d007      	beq.n	8001658 <HAL_RCC_OscConfig+0xe4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800164e:	2a08      	cmp	r2, #8
 8001650:	d111      	bne.n	8001676 <HAL_RCC_OscConfig+0x102>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	025e      	lsls	r6, r3, #9
 8001656:	d40e      	bmi.n	8001676 <HAL_RCC_OscConfig+0x102>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001658:	4b79      	ldr	r3, [pc, #484]	; (8001840 <HAL_RCC_OscConfig+0x2cc>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	0795      	lsls	r5, r2, #30
 800165e:	d502      	bpl.n	8001666 <HAL_RCC_OscConfig+0xf2>
 8001660:	68e2      	ldr	r2, [r4, #12]
 8001662:	2a01      	cmp	r2, #1
 8001664:	d1b2      	bne.n	80015cc <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	6921      	ldr	r1, [r4, #16]
 800166a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800166e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001672:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001674:	e787      	b.n	8001586 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001676:	68e2      	ldr	r2, [r4, #12]
 8001678:	4b72      	ldr	r3, [pc, #456]	; (8001844 <HAL_RCC_OscConfig+0x2d0>)
 800167a:	b1b2      	cbz	r2, 80016aa <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_ENABLE();
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001680:	f7fe ff6c 	bl	800055c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001684:	4d6e      	ldr	r5, [pc, #440]	; (8001840 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001686:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	682b      	ldr	r3, [r5, #0]
 800168a:	0798      	lsls	r0, r3, #30
 800168c:	d507      	bpl.n	800169e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168e:	682b      	ldr	r3, [r5, #0]
 8001690:	6922      	ldr	r2, [r4, #16]
 8001692:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001696:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800169a:	602b      	str	r3, [r5, #0]
 800169c:	e773      	b.n	8001586 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169e:	f7fe ff5d 	bl	800055c <HAL_GetTick>
 80016a2:	1b80      	subs	r0, r0, r6
 80016a4:	2802      	cmp	r0, #2
 80016a6:	d9ef      	bls.n	8001688 <HAL_RCC_OscConfig+0x114>
 80016a8:	e7a9      	b.n	80015fe <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80016aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016ac:	f7fe ff56 	bl	800055c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b0:	4d63      	ldr	r5, [pc, #396]	; (8001840 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80016b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b4:	682b      	ldr	r3, [r5, #0]
 80016b6:	0799      	lsls	r1, r3, #30
 80016b8:	f57f af65 	bpl.w	8001586 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016bc:	f7fe ff4e 	bl	800055c <HAL_GetTick>
 80016c0:	1b80      	subs	r0, r0, r6
 80016c2:	2802      	cmp	r0, #2
 80016c4:	d9f6      	bls.n	80016b4 <HAL_RCC_OscConfig+0x140>
 80016c6:	e79a      	b.n	80015fe <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016c8:	6962      	ldr	r2, [r4, #20]
 80016ca:	4b5f      	ldr	r3, [pc, #380]	; (8001848 <HAL_RCC_OscConfig+0x2d4>)
 80016cc:	b17a      	cbz	r2, 80016ee <HAL_RCC_OscConfig+0x17a>
      __HAL_RCC_LSI_ENABLE();
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016d2:	f7fe ff43 	bl	800055c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d6:	4d5a      	ldr	r5, [pc, #360]	; (8001840 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80016d8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016da:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016dc:	079f      	lsls	r7, r3, #30
 80016de:	f53f af56 	bmi.w	800158e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e2:	f7fe ff3b 	bl	800055c <HAL_GetTick>
 80016e6:	1b80      	subs	r0, r0, r6
 80016e8:	2802      	cmp	r0, #2
 80016ea:	d9f6      	bls.n	80016da <HAL_RCC_OscConfig+0x166>
 80016ec:	e787      	b.n	80015fe <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80016ee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016f0:	f7fe ff34 	bl	800055c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	4d52      	ldr	r5, [pc, #328]	; (8001840 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80016f6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016fa:	0798      	lsls	r0, r3, #30
 80016fc:	f57f af47 	bpl.w	800158e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001700:	f7fe ff2c 	bl	800055c <HAL_GetTick>
 8001704:	1b80      	subs	r0, r0, r6
 8001706:	2802      	cmp	r0, #2
 8001708:	d9f6      	bls.n	80016f8 <HAL_RCC_OscConfig+0x184>
 800170a:	e778      	b.n	80015fe <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170c:	4b4c      	ldr	r3, [pc, #304]	; (8001840 <HAL_RCC_OscConfig+0x2cc>)
 800170e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001710:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001714:	d128      	bne.n	8001768 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	9201      	str	r2, [sp, #4]
 8001718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800171a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800171e:	641a      	str	r2, [r3, #64]	; 0x40
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800172a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	4d47      	ldr	r5, [pc, #284]	; (800184c <HAL_RCC_OscConfig+0x2d8>)
 800172e:	682b      	ldr	r3, [r5, #0]
 8001730:	05d9      	lsls	r1, r3, #23
 8001732:	d51b      	bpl.n	800176c <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001734:	68a3      	ldr	r3, [r4, #8]
 8001736:	4d42      	ldr	r5, [pc, #264]	; (8001840 <HAL_RCC_OscConfig+0x2cc>)
 8001738:	2b01      	cmp	r3, #1
 800173a:	d127      	bne.n	800178c <HAL_RCC_OscConfig+0x218>
 800173c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001744:	f7fe ff0a 	bl	800055c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001748:	4d3d      	ldr	r5, [pc, #244]	; (8001840 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 800174a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001750:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001752:	079b      	lsls	r3, r3, #30
 8001754:	d539      	bpl.n	80017ca <HAL_RCC_OscConfig+0x256>
    if(pwrclkchanged == SET)
 8001756:	2e00      	cmp	r6, #0
 8001758:	f43f af1d 	beq.w	8001596 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800175c:	4a38      	ldr	r2, [pc, #224]	; (8001840 <HAL_RCC_OscConfig+0x2cc>)
 800175e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	e716      	b.n	8001596 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001768:	2600      	movs	r6, #0
 800176a:	e7df      	b.n	800172c <HAL_RCC_OscConfig+0x1b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001772:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001774:	f7fe fef2 	bl	800055c <HAL_GetTick>
 8001778:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177a:	682b      	ldr	r3, [r5, #0]
 800177c:	05da      	lsls	r2, r3, #23
 800177e:	d4d9      	bmi.n	8001734 <HAL_RCC_OscConfig+0x1c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001780:	f7fe feec 	bl	800055c <HAL_GetTick>
 8001784:	1bc0      	subs	r0, r0, r7
 8001786:	2802      	cmp	r0, #2
 8001788:	d9f7      	bls.n	800177a <HAL_RCC_OscConfig+0x206>
 800178a:	e738      	b.n	80015fe <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178c:	2b05      	cmp	r3, #5
 800178e:	d104      	bne.n	800179a <HAL_RCC_OscConfig+0x226>
 8001790:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	672b      	str	r3, [r5, #112]	; 0x70
 8001798:	e7d0      	b.n	800173c <HAL_RCC_OscConfig+0x1c8>
 800179a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800179c:	f022 0201 	bic.w	r2, r2, #1
 80017a0:	672a      	str	r2, [r5, #112]	; 0x70
 80017a2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80017a4:	f022 0204 	bic.w	r2, r2, #4
 80017a8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1ca      	bne.n	8001744 <HAL_RCC_OscConfig+0x1d0>
      tickstart = HAL_GetTick();
 80017ae:	f7fe fed5 	bl	800055c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80017b6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017ba:	0798      	lsls	r0, r3, #30
 80017bc:	d5cb      	bpl.n	8001756 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7fe fecd 	bl	800055c <HAL_GetTick>
 80017c2:	1bc0      	subs	r0, r0, r7
 80017c4:	4540      	cmp	r0, r8
 80017c6:	d9f7      	bls.n	80017b8 <HAL_RCC_OscConfig+0x244>
 80017c8:	e719      	b.n	80015fe <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7fe fec7 	bl	800055c <HAL_GetTick>
 80017ce:	1bc0      	subs	r0, r0, r7
 80017d0:	4540      	cmp	r0, r8
 80017d2:	d9bd      	bls.n	8001750 <HAL_RCC_OscConfig+0x1dc>
 80017d4:	e713      	b.n	80015fe <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017d6:	4d1a      	ldr	r5, [pc, #104]	; (8001840 <HAL_RCC_OscConfig+0x2cc>)
 80017d8:	68ab      	ldr	r3, [r5, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b08      	cmp	r3, #8
 80017e0:	f43f aef4 	beq.w	80015cc <HAL_RCC_OscConfig+0x58>
 80017e4:	4e1a      	ldr	r6, [pc, #104]	; (8001850 <HAL_RCC_OscConfig+0x2dc>)
 80017e6:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80017ea:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ec:	d138      	bne.n	8001860 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 80017ee:	f7fe feb5 	bl	800055c <HAL_GetTick>
 80017f2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f4:	682b      	ldr	r3, [r5, #0]
 80017f6:	0199      	lsls	r1, r3, #6
 80017f8:	d42c      	bmi.n	8001854 <HAL_RCC_OscConfig+0x2e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fa:	6a22      	ldr	r2, [r4, #32]
 80017fc:	69e3      	ldr	r3, [r4, #28]
 80017fe:	4313      	orrs	r3, r2
 8001800:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001802:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001806:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001808:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800180c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800180e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001812:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001814:	4c0a      	ldr	r4, [pc, #40]	; (8001840 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001816:	0852      	lsrs	r2, r2, #1
 8001818:	3a01      	subs	r2, #1
 800181a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800181e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001820:	2301      	movs	r3, #1
 8001822:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001824:	f7fe fe9a 	bl	800055c <HAL_GetTick>
 8001828:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	019a      	lsls	r2, r3, #6
 800182e:	f53f aeb6 	bmi.w	800159e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001832:	f7fe fe93 	bl	800055c <HAL_GetTick>
 8001836:	1b40      	subs	r0, r0, r5
 8001838:	2802      	cmp	r0, #2
 800183a:	d9f6      	bls.n	800182a <HAL_RCC_OscConfig+0x2b6>
 800183c:	e6df      	b.n	80015fe <HAL_RCC_OscConfig+0x8a>
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	42470000 	.word	0x42470000
 8001848:	42470e80 	.word	0x42470e80
 800184c:	40007000 	.word	0x40007000
 8001850:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001854:	f7fe fe82 	bl	800055c <HAL_GetTick>
 8001858:	1bc0      	subs	r0, r0, r7
 800185a:	2802      	cmp	r0, #2
 800185c:	d9ca      	bls.n	80017f4 <HAL_RCC_OscConfig+0x280>
 800185e:	e6ce      	b.n	80015fe <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001860:	f7fe fe7c 	bl	800055c <HAL_GetTick>
 8001864:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	682b      	ldr	r3, [r5, #0]
 8001868:	019b      	lsls	r3, r3, #6
 800186a:	f57f ae98 	bpl.w	800159e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186e:	f7fe fe75 	bl	800055c <HAL_GetTick>
 8001872:	1b00      	subs	r0, r0, r4
 8001874:	2802      	cmp	r0, #2
 8001876:	d9f6      	bls.n	8001866 <HAL_RCC_OscConfig+0x2f2>
 8001878:	e6c1      	b.n	80015fe <HAL_RCC_OscConfig+0x8a>
 800187a:	bf00      	nop

0800187c <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800187c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001886:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001888:	4770      	bx	lr

0800188a <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800188a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	4605      	mov	r5, r0
 8001892:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7fe fe62 	bl	800055c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8001898:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 800189a:	4681      	mov	r9, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800189c:	2108      	movs	r1, #8
 800189e:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80018a4:	f000 ffbb 	bl	800281e <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 80018a8:	4604      	mov	r4, r0
 80018aa:	bb40      	cbnz	r0, 80018fe <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80018ac:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80018ae:	6828      	ldr	r0, [r5, #0]
 80018b0:	0409      	lsls	r1, r1, #16
 80018b2:	f001 f8bf 	bl	8002a34 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 80018b6:	4604      	mov	r4, r0
 80018b8:	bb08      	cbnz	r0, 80018fe <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 80018c0:	2308      	movs	r3, #8
 80018c2:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80018c4:	2330      	movs	r3, #48	; 0x30
 80018c6:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80018c8:	2302      	movs	r3, #2
 80018ca:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80018cc:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80018ce:	2301      	movs	r3, #1
  SDIO_ConfigData(hsd->Instance, &config);
 80018d0:	a902      	add	r1, sp, #8
 80018d2:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80018d4:	9307      	str	r3, [sp, #28]
  SDIO_ConfigData(hsd->Instance, &config);
 80018d6:	f000 ff8f 	bl	80027f8 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80018da:	6828      	ldr	r0, [r5, #0]
 80018dc:	f001 f8db 	bl	8002a96 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 80018e0:	4604      	mov	r4, r0
 80018e2:	b960      	cbnz	r0, 80018fe <SD_FindSCR+0x74>
 80018e4:	4607      	mov	r7, r0
  {
    return errorstate;
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80018e6:	f240 482a 	movw	r8, #1066	; 0x42a
 80018ea:	6828      	ldr	r0, [r5, #0]
 80018ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80018ee:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80018f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80018f4:	d007      	beq.n	8001906 <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80018f6:	0719      	lsls	r1, r3, #28
 80018f8:	d518      	bpl.n	800192c <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80018fa:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80018fc:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
  }

  return HAL_SD_ERROR_NONE;
}
 80018fe:	4620      	mov	r0, r4
 8001900:	b009      	add	sp, #36	; 0x24
 8001902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8001906:	029b      	lsls	r3, r3, #10
 8001908:	d507      	bpl.n	800191a <SD_FindSCR+0x90>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800190a:	f000 feb7 	bl	800267c <SDIO_ReadFIFO>
 800190e:	ab08      	add	r3, sp, #32
 8001910:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 8001914:	3701      	adds	r7, #1
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8001916:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800191a:	f7fe fe1f 	bl	800055c <HAL_GetTick>
 800191e:	eba0 0009 	sub.w	r0, r0, r9
 8001922:	3001      	adds	r0, #1
 8001924:	d1e1      	bne.n	80018ea <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 8001926:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800192a:	e7e8      	b.n	80018fe <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800192c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800192e:	079a      	lsls	r2, r3, #30
 8001930:	d501      	bpl.n	8001936 <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8001932:	2402      	movs	r4, #2
 8001934:	e7e2      	b.n	80018fc <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001936:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001938:	069b      	lsls	r3, r3, #26
 800193a:	d501      	bpl.n	8001940 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800193c:	2420      	movs	r4, #32
 800193e:	e7dd      	b.n	80018fc <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001940:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8001944:	6383      	str	r3, [r0, #56]	; 0x38
 8001946:	9b00      	ldr	r3, [sp, #0]
 8001948:	ba1b      	rev	r3, r3
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800194a:	6073      	str	r3, [r6, #4]
 800194c:	9b01      	ldr	r3, [sp, #4]
 800194e:	ba1b      	rev	r3, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8001950:	6033      	str	r3, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8001952:	e7d4      	b.n	80018fe <SD_FindSCR+0x74>

08001954 <HAL_SD_ReadBlocks_DMA>:
{
 8001954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001958:	4616      	mov	r6, r2
 800195a:	b087      	sub	sp, #28
 800195c:	4605      	mov	r5, r0
 800195e:	4698      	mov	r8, r3
  if(NULL == pData)
 8001960:	460a      	mov	r2, r1
 8001962:	b939      	cbnz	r1, 8001974 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001964:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001966:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800196a:	63ab      	str	r3, [r5, #56]	; 0x38
    return HAL_ERROR;
 800196c:	2001      	movs	r0, #1
}
 800196e:	b007      	add	sp, #28
 8001970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8001974:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001978:	b2c4      	uxtb	r4, r0
 800197a:	2c01      	cmp	r4, #1
 800197c:	d168      	bne.n	8001a50 <HAL_SD_ReadBlocks_DMA+0xfc>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800197e:	6def      	ldr	r7, [r5, #92]	; 0x5c
 8001980:	eb06 0008 	add.w	r0, r6, r8
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001984:	2300      	movs	r3, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001986:	42b8      	cmp	r0, r7
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001988:	63ab      	str	r3, [r5, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800198a:	d903      	bls.n	8001994 <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800198c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800198e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001992:	e7ea      	b.n	800196a <HAL_SD_ReadBlocks_DMA+0x16>
    hsd->Instance->DCTRL = 0U;
 8001994:	682f      	ldr	r7, [r5, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8001996:	2103      	movs	r1, #3
 8001998:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800199e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80019a0:	492c      	ldr	r1, [pc, #176]	; (8001a54 <HAL_SD_ReadBlocks_DMA+0x100>)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80019a2:	f440 7095 	orr.w	r0, r0, #298	; 0x12a
 80019a6:	63f8      	str	r0, [r7, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80019a8:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80019aa:	ea4f 2948 	mov.w	r9, r8, lsl #9
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80019ae:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80019b0:	4929      	ldr	r1, [pc, #164]	; (8001a58 <HAL_SD_ReadBlocks_DMA+0x104>)
 80019b2:	64c1      	str	r1, [r0, #76]	; 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 80019b4:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80019b6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80019ba:	ea4f 0399 	mov.w	r3, r9, lsr #2
 80019be:	f7fe fecf 	bl	8000760 <HAL_DMA_Start_IT>
    __HAL_SD_DMA_ENABLE(hsd);
 80019c2:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <HAL_SD_ReadBlocks_DMA+0x108>)
    SDIO_ConfigData(hsd->Instance, &config);
 80019c4:	6828      	ldr	r0, [r5, #0]
    __HAL_SD_DMA_ENABLE(hsd);
 80019c6:	601c      	str	r4, [r3, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80019c8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80019ca:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80019d0:	e88d 0208 	stmia.w	sp, {r3, r9}
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80019d4:	f04f 0390 	mov.w	r3, #144	; 0x90
 80019d8:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80019da:	f04f 0302 	mov.w	r3, #2
 80019de:	9303      	str	r3, [sp, #12]
    SDIO_ConfigData(hsd->Instance, &config);
 80019e0:	4669      	mov	r1, sp
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80019e2:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDIO_DPSM_ENABLE;
 80019e6:	f04f 0401 	mov.w	r4, #1
      BlockAdd *= 512U;
 80019ea:	bf18      	it	ne
 80019ec:	0276      	lslne	r6, r6, #9
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80019ee:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80019f0:	9405      	str	r4, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 80019f2:	f000 ff01 	bl	80027f8 <SDIO_ConfigData>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80019f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019fa:	6828      	ldr	r0, [r5, #0]
 80019fc:	f000 ff0f 	bl	800281e <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001a00:	b148      	cbz	r0, 8001a16 <HAL_SD_ReadBlocks_DMA+0xc2>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8001a02:	682b      	ldr	r3, [r5, #0]
 8001a04:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001a08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001a0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001a0c:	4318      	orrs	r0, r3
 8001a0e:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001a10:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 8001a14:	e7aa      	b.n	800196c <HAL_SD_ReadBlocks_DMA+0x18>
    if(NumberOfBlocks > 1U)
 8001a16:	f1b8 0f01 	cmp.w	r8, #1
 8001a1a:	d912      	bls.n	8001a42 <HAL_SD_ReadBlocks_DMA+0xee>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001a1c:	2382      	movs	r3, #130	; 0x82
 8001a1e:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8001a20:	4631      	mov	r1, r6
 8001a22:	6828      	ldr	r0, [r5, #0]
 8001a24:	f000 ff2b 	bl	800287e <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001a28:	2800      	cmp	r0, #0
 8001a2a:	d0a0      	beq.n	800196e <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8001a2c:	682b      	ldr	r3, [r5, #0]
 8001a2e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001a32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001a34:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001a36:	4318      	orrs	r0, r3
 8001a38:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
      return HAL_ERROR;
 8001a40:	e795      	b.n	800196e <HAL_SD_ReadBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001a42:	2381      	movs	r3, #129	; 0x81
 8001a44:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8001a46:	4631      	mov	r1, r6
 8001a48:	6828      	ldr	r0, [r5, #0]
 8001a4a:	f000 ff00 	bl	800284e <SDMMC_CmdReadSingleBlock>
 8001a4e:	e7eb      	b.n	8001a28 <HAL_SD_ReadBlocks_DMA+0xd4>
    return HAL_BUSY;
 8001a50:	2002      	movs	r0, #2
 8001a52:	e78c      	b.n	800196e <HAL_SD_ReadBlocks_DMA+0x1a>
 8001a54:	08001b63 	.word	0x08001b63
 8001a58:	080020c1 	.word	0x080020c1
 8001a5c:	4225858c 	.word	0x4225858c

08001a60 <HAL_SD_WriteBlocks_DMA>:
{
 8001a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a64:	4604      	mov	r4, r0
 8001a66:	b086      	sub	sp, #24
 8001a68:	4615      	mov	r5, r2
 8001a6a:	461e      	mov	r6, r3
  if(NULL == pData)
 8001a6c:	460f      	mov	r7, r1
 8001a6e:	b939      	cbnz	r1, 8001a80 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001a70:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001a72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a76:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8001a78:	2001      	movs	r0, #1
}
 8001a7a:	b006      	add	sp, #24
 8001a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8001a80:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001a84:	b2c0      	uxtb	r0, r0
 8001a86:	2801      	cmp	r0, #1
 8001a88:	d162      	bne.n	8001b50 <HAL_SD_WriteBlocks_DMA+0xf0>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001a8a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001a8c:	18eb      	adds	r3, r5, r3
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a8e:	2200      	movs	r2, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001a90:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a92:	63a2      	str	r2, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001a94:	d904      	bls.n	8001aa0 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001a96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8001a9e:	e7ec      	b.n	8001a7a <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->Instance->DCTRL = 0U;
 8001aa0:	6820      	ldr	r0, [r4, #0]
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8001aa2:	492c      	ldr	r1, [pc, #176]	; (8001b54 <HAL_SD_WriteBlocks_DMA+0xf4>)
    hsd->State = HAL_SD_STATE_BUSY;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001aaa:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
 8001aac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001aae:	f043 031a 	orr.w	r3, r3, #26
 8001ab2:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8001ab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ab6:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8001ab8:	4927      	ldr	r1, [pc, #156]	; (8001b58 <HAL_SD_WriteBlocks_DMA+0xf8>)
 8001aba:	64d9      	str	r1, [r3, #76]	; 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 8001abc:	651a      	str	r2, [r3, #80]	; 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001abe:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001ac0:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001ac4:	2b01      	cmp	r3, #1
      BlockAdd *= 512U;
 8001ac6:	bf18      	it	ne
 8001ac8:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001aca:	f000 fea8 	bl	800281e <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ace:	b150      	cbz	r0, 8001ae6 <HAL_SD_WriteBlocks_DMA+0x86>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001ad6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001ad8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ada:	4318      	orrs	r0, r3
 8001adc:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8001ae4:	e7c9      	b.n	8001a7a <HAL_SD_WriteBlocks_DMA+0x1a>
    if(NumberOfBlocks > 1U)
 8001ae6:	2e01      	cmp	r6, #1
 8001ae8:	d90f      	bls.n	8001b0a <HAL_SD_WriteBlocks_DMA+0xaa>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001aea:	23a0      	movs	r3, #160	; 0xa0
 8001aec:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8001aee:	4629      	mov	r1, r5
 8001af0:	6820      	ldr	r0, [r4, #0]
 8001af2:	f000 fef4 	bl	80028de <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8001af6:	4605      	mov	r5, r0
 8001af8:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8001afa:	b168      	cbz	r0, 8001b18 <HAL_SD_WriteBlocks_DMA+0xb8>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8001afc:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8001b00:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001b02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001b04:	4305      	orrs	r5, r0
 8001b06:	63a5      	str	r5, [r4, #56]	; 0x38
 8001b08:	e7e9      	b.n	8001ade <HAL_SD_WriteBlocks_DMA+0x7e>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001b0a:	2390      	movs	r3, #144	; 0x90
 8001b0c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8001b0e:	4629      	mov	r1, r5
 8001b10:	6820      	ldr	r0, [r4, #0]
 8001b12:	f000 fecc 	bl	80028ae <SDMMC_CmdWriteSingleBlock>
 8001b16:	e7ee      	b.n	8001af6 <HAL_SD_WriteBlocks_DMA+0x96>
    __HAL_SD_DMA_ENABLE(hsd);
 8001b18:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <HAL_SD_WriteBlocks_DMA+0xfc>)
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8001b1a:	6c20      	ldr	r0, [r4, #64]	; 0x40
    __HAL_SD_DMA_ENABLE(hsd);
 8001b1c:	f04f 0801 	mov.w	r8, #1
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8001b20:	0276      	lsls	r6, r6, #9
    __HAL_SD_DMA_ENABLE(hsd);
 8001b22:	f8c3 8000 	str.w	r8, [r3]
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8001b26:	3280      	adds	r2, #128	; 0x80
 8001b28:	08b3      	lsrs	r3, r6, #2
 8001b2a:	4639      	mov	r1, r7
 8001b2c:	f7fe fe18 	bl	8000760 <HAL_DMA_Start_IT>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001b34:	e88d 0048 	stmia.w	sp, {r3, r6}
    SDIO_ConfigData(hsd->Instance, &config);
 8001b38:	4669      	mov	r1, sp
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001b3a:	2390      	movs	r3, #144	; 0x90
    SDIO_ConfigData(hsd->Instance, &config);
 8001b3c:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001b3e:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001b40:	9503      	str	r5, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001b42:	9504      	str	r5, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001b44:	f8cd 8014 	str.w	r8, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8001b48:	f000 fe56 	bl	80027f8 <SDIO_ConfigData>
    return HAL_OK;
 8001b4c:	4628      	mov	r0, r5
 8001b4e:	e794      	b.n	8001a7a <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 8001b50:	2002      	movs	r0, #2
 8001b52:	e792      	b.n	8001a7a <HAL_SD_WriteBlocks_DMA+0x1a>
 8001b54:	0800187d 	.word	0x0800187d
 8001b58:	080020c1 	.word	0x080020c1
 8001b5c:	4225858c 	.word	0x4225858c

08001b60 <HAL_SD_ErrorCallback>:
 8001b60:	4770      	bx	lr

08001b62 <SD_DMAReceiveCplt>:
{
 8001b62:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8001b64:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8001b66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b68:	2b82      	cmp	r3, #130	; 0x82
 8001b6a:	d109      	bne.n	8001b80 <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001b6c:	6820      	ldr	r0, [r4, #0]
 8001b6e:	f000 fecf 	bl	8002910 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001b72:	b128      	cbz	r0, 8001b80 <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 8001b74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b76:	4318      	orrs	r0, r3
 8001b78:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f7ff fff0 	bl	8001b60 <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b84:	f022 0208 	bic.w	r2, r2, #8
 8001b88:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b8a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_RxCpltCallback(hsd);
 8001b96:	4620      	mov	r0, r4
 8001b98:	f004 f845 	bl	8005c26 <HAL_SD_RxCpltCallback>
 8001b9c:	bd10      	pop	{r4, pc}

08001b9e <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8001b9e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8001ba0:	0f9a      	lsrs	r2, r3, #30
 8001ba2:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8001ba4:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8001ba8:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8001baa:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8001bae:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8001bb0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8001bb4:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8001bb6:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8001bba:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8001bbc:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8001bbe:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8001bc0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001bc2:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8001bc8:	88ca      	ldrh	r2, [r1, #6]
{
 8001bca:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8001bd2:	4322      	orrs	r2, r4
 8001bd4:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8001bd6:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8001bda:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8001bdc:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8001be0:	09d4      	lsrs	r4, r2, #7
 8001be2:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8001be4:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8001be8:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8001bea:	f3c2 1440 	ubfx	r4, r2, #5, #1
 8001bee:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8001bf0:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8001bf4:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8001bf6:	2400      	movs	r4, #0
 8001bf8:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8001bfa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001bfc:	2c00      	cmp	r4, #0
 8001bfe:	f040 8083 	bne.w	8001d08 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8001c02:	0292      	lsls	r2, r2, #10
 8001c04:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8001c08:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2U;
 8001c0a:	690a      	ldr	r2, [r1, #16]
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8001c12:	4313      	orrs	r3, r2
 8001c14:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8001c16:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8001c18:	690b      	ldr	r3, [r1, #16]
 8001c1a:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8001c1e:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8001c20:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8001c24:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8001c26:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8001c2a:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8001c2c:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8001c30:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8001c32:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8001c36:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8001c38:	0bd3      	lsrs	r3, r2, #15
 8001c3a:	f003 0306 	and.w	r3, r3, #6
 8001c3e:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8001c40:	7e0c      	ldrb	r4, [r1, #24]
 8001c42:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001c46:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8001c4a:	4322      	orrs	r2, r4
 8001c4c:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001c4e:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8001c50:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001c52:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8001c54:	3402      	adds	r4, #2
 8001c56:	40a2      	lsls	r2, r4
 8001c58:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8001c5a:	7a0d      	ldrb	r5, [r1, #8]
 8001c5c:	2401      	movs	r4, #1
 8001c5e:	40ac      	lsls	r4, r5
 8001c60:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8001c62:	0a64      	lsrs	r4, r4, #9
 8001c64:	4362      	muls	r2, r4
 8001c66:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8001c68:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8001c6c:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8001c6e:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8001c78:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8001c7a:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8001c7c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8001c7e:	7e8a      	ldrb	r2, [r1, #26]
 8001c80:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 8001c84:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8001c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8001c8a:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8001c8c:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8001c8e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8001c90:	0fda      	lsrs	r2, r3, #31
 8001c92:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8001c94:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8001c98:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8001c9a:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8001c9e:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8001ca0:	0d9a      	lsrs	r2, r3, #22
 8001ca2:	f002 020c 	and.w	r2, r2, #12
 8001ca6:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8001ca8:	7fca      	ldrb	r2, [r1, #31]
 8001caa:	f3c3 5081 	ubfx	r0, r3, #22, #2
 8001cae:	4302      	orrs	r2, r0
 8001cb0:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8001cb2:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8001cb6:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0U;
 8001cba:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8001cbc:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0U;
 8001cc0:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8001cc4:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8001cc8:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8001ccc:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8001cd0:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8001cd4:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8001cd8:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8001cdc:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8001ce0:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8001ce4:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8001ce8:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8001cec:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8001cf0:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8001cf4:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03U);
 8001cf8:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8001cfc:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8001d00:	2301      	movs	r3, #1
 8001d02:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8001d06:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8001d08:	2c01      	cmp	r4, #1
 8001d0a:	d11a      	bne.n	8001d42 <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8001d0c:	041b      	lsls	r3, r3, #16
 8001d0e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8001d12:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8001d14:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8U);
 8001d16:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8001d18:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8U);
 8001d1a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001d1e:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8001d20:	690c      	ldr	r4, [r1, #16]
 8001d22:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8001d26:	4322      	orrs	r2, r4
 8001d28:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8001d2a:	690a      	ldr	r2, [r1, #16]
 8001d2c:	0292      	lsls	r2, r2, #10
 8001d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d32:	6542      	str	r2, [r0, #84]	; 0x54
 8001d34:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8001d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001d3e:	6582      	str	r2, [r0, #88]	; 0x58
 8001d40:	e794      	b.n	8001c6c <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8001d42:	6803      	ldr	r3, [r0, #0]
 8001d44:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d48:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001d4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d50:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd30      	pop	{r4, r5, pc}

08001d5c <HAL_SD_InitCard>:
{
 8001d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d5e:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001d60:	2500      	movs	r5, #0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001d62:	2376      	movs	r3, #118	; 0x76
 8001d64:	930c      	str	r3, [sp, #48]	; 0x30
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001d66:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d68:	950b      	str	r5, [sp, #44]	; 0x2c
  SDIO_Init(hsd->Instance, Init);
 8001d6a:	ab0a      	add	r3, sp, #40	; 0x28
{
 8001d6c:	4604      	mov	r4, r0
  SDIO_Init(hsd->Instance, Init);
 8001d6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d72:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  __HAL_SD_DISABLE(hsd); 
 8001d76:	4e6f      	ldr	r6, [pc, #444]	; (8001f34 <HAL_SD_InitCard+0x1d8>)
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001d78:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001d7a:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001d7c:	9509      	str	r5, [sp, #36]	; 0x24
  SDIO_Init(hsd->Instance, Init);
 8001d7e:	ab07      	add	r3, sp, #28
 8001d80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d82:	6820      	ldr	r0, [r4, #0]
 8001d84:	f000 fc5e 	bl	8002644 <SDIO_Init>
  __HAL_SD_ENABLE(hsd);
 8001d88:	2701      	movs	r7, #1
  __HAL_SD_DISABLE(hsd); 
 8001d8a:	6035      	str	r5, [r6, #0]
  SDIO_PowerState_ON(hsd->Instance);
 8001d8c:	6820      	ldr	r0, [r4, #0]
 8001d8e:	f000 fc7d 	bl	800268c <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8001d92:	6037      	str	r7, [r6, #0]
  HAL_Delay(2U);
 8001d94:	2002      	movs	r0, #2
 8001d96:	f7fe fbe7 	bl	8000568 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001d9a:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8001d9c:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001d9e:	f000 fde9 	bl	8002974 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001da2:	4606      	mov	r6, r0
 8001da4:	b968      	cbnz	r0, 8001dc2 <HAL_SD_InitCard+0x66>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8001da6:	6820      	ldr	r0, [r4, #0]
 8001da8:	f000 fe0c 	bl	80029c4 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001dac:	b380      	cbz	r0, 8001e10 <HAL_SD_InitCard+0xb4>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8001dae:	64a6      	str	r6, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8001db0:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001db4:	9b06      	ldr	r3, [sp, #24]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	42ab      	cmp	r3, r5
 8001dba:	9206      	str	r2, [sp, #24]
 8001dbc:	d108      	bne.n	8001dd0 <HAL_SD_InitCard+0x74>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8001dbe:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001dc8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001dca:	430e      	orrs	r6, r1
 8001dcc:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001dce:	e081      	b.n	8001ed4 <HAL_SD_InitCard+0x178>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	6820      	ldr	r0, [r4, #0]
 8001dd4:	f000 fe2e 	bl	8002a34 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001dd8:	4601      	mov	r1, r0
 8001dda:	b110      	cbz	r0, 8001de2 <HAL_SD_InitCard+0x86>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001ddc:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8001de0:	e7ef      	b.n	8001dc2 <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8001de2:	6820      	ldr	r0, [r4, #0]
 8001de4:	f000 fe3e 	bl	8002a64 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001de8:	4601      	mov	r1, r0
 8001dea:	2800      	cmp	r0, #0
 8001dec:	d1f6      	bne.n	8001ddc <HAL_SD_InitCard+0x80>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001dee:	6820      	ldr	r0, [r4, #0]
 8001df0:	f000 fc67 	bl	80026c2 <SDIO_GetResponse>
    while(validvoltage == 0U)
 8001df4:	2800      	cmp	r0, #0
 8001df6:	dadd      	bge.n	8001db4 <HAL_SD_InitCard+0x58>
    hsd->SdCard.CardType = CARD_SDSC;
 8001df8:	2300      	movs	r3, #0
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8001dfa:	6463      	str	r3, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8001dfc:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8001e04:	f000 fc46 	bl	8002694 <SDIO_GetPowerState>
 8001e08:	bb10      	cbnz	r0, 8001e50 <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8001e0a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8001e0e:	e06b      	b.n	8001ee8 <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8001e10:	64a7      	str	r7, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8001e12:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001e16:	9b06      	ldr	r3, [sp, #24]
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	42ab      	cmp	r3, r5
 8001e1c:	9206      	str	r2, [sp, #24]
 8001e1e:	d0ce      	beq.n	8001dbe <HAL_SD_InitCard+0x62>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8001e20:	2100      	movs	r1, #0
 8001e22:	6820      	ldr	r0, [r4, #0]
 8001e24:	f000 fe06 	bl	8002a34 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001e28:	4606      	mov	r6, r0
 8001e2a:	2800      	cmp	r0, #0
 8001e2c:	d1c9      	bne.n	8001dc2 <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8001e2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e32:	6820      	ldr	r0, [r4, #0]
 8001e34:	f000 fe16 	bl	8002a64 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001e38:	4606      	mov	r6, r0
 8001e3a:	2800      	cmp	r0, #0
 8001e3c:	d1c1      	bne.n	8001dc2 <HAL_SD_InitCard+0x66>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001e3e:	4601      	mov	r1, r0
 8001e40:	6820      	ldr	r0, [r4, #0]
 8001e42:	f000 fc3e 	bl	80026c2 <SDIO_GetResponse>
    while(validvoltage == 0U)
 8001e46:	0fc3      	lsrs	r3, r0, #31
 8001e48:	d0e5      	beq.n	8001e16 <HAL_SD_InitCard+0xba>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8001e4a:	0042      	lsls	r2, r0, #1
 8001e4c:	d5d4      	bpl.n	8001df8 <HAL_SD_InitCard+0x9c>
 8001e4e:	e7d4      	b.n	8001dfa <HAL_SD_InitCard+0x9e>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8001e50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d01a      	beq.n	8001e8c <HAL_SD_InitCard+0x130>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8001e56:	6820      	ldr	r0, [r4, #0]
 8001e58:	f000 fe35 	bl	8002ac6 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e5c:	4605      	mov	r5, r0
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	d142      	bne.n	8001ee8 <HAL_SD_InitCard+0x18c>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001e62:	4601      	mov	r1, r0
 8001e64:	6820      	ldr	r0, [r4, #0]
 8001e66:	f000 fc2c 	bl	80026c2 <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001e6a:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001e6c:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001e6e:	6820      	ldr	r0, [r4, #0]
 8001e70:	f000 fc27 	bl	80026c2 <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001e74:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001e76:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001e78:	6820      	ldr	r0, [r4, #0]
 8001e7a:	f000 fc22 	bl	80026c2 <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8001e7e:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001e80:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8001e82:	6820      	ldr	r0, [r4, #0]
 8001e84:	f000 fc1d 	bl	80026c2 <SDIO_GetResponse>
 8001e88:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8001e8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d122      	bne.n	8001ed8 <HAL_SD_InitCard+0x17c>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8001e92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d12e      	bne.n	8001ef6 <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8001e98:	2104      	movs	r1, #4
 8001e9a:	6820      	ldr	r0, [r4, #0]
 8001e9c:	f000 fc11 	bl	80026c2 <SDIO_GetResponse>
 8001ea0:	0d00      	lsrs	r0, r0, #20
 8001ea2:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8001ea4:	a90d      	add	r1, sp, #52	; 0x34
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f7ff fe79 	bl	8001b9e <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8001eac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001eae:	6820      	ldr	r0, [r4, #0]
 8001eb0:	0412      	lsls	r2, r2, #16
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f000 fd46 	bl	8002944 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001eb8:	4605      	mov	r5, r0
 8001eba:	b9a8      	cbnz	r0, 8001ee8 <HAL_SD_InitCard+0x18c>
  SDIO_Init(hsd->Instance, hsd->Init);
 8001ebc:	f104 0310 	add.w	r3, r4, #16
 8001ec0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ec4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001ec8:	1d23      	adds	r3, r4, #4
 8001eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ecc:	6820      	ldr	r0, [r4, #0]
 8001ece:	f000 fbb9 	bl	8002644 <SDIO_Init>
  return HAL_OK;
 8001ed2:	4628      	mov	r0, r5
}
 8001ed4:	b019      	add	sp, #100	; 0x64
 8001ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8001ed8:	f10d 0116 	add.w	r1, sp, #22
 8001edc:	6820      	ldr	r0, [r4, #0]
 8001ede:	f000 fe1d 	bl	8002b1c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ee2:	4605      	mov	r5, r0
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	d0d4      	beq.n	8001e92 <HAL_SD_InitCard+0x136>
    hsd->State = HAL_SD_STATE_READY;
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001eee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ef0:	431d      	orrs	r5, r3
 8001ef2:	63a5      	str	r5, [r4, #56]	; 0x38
 8001ef4:	e7ee      	b.n	8001ed4 <HAL_SD_InitCard+0x178>
    hsd->SdCard.RelCardAdd = sd_rca;
 8001ef6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8001efa:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001efc:	6820      	ldr	r0, [r4, #0]
 8001efe:	0409      	lsls	r1, r1, #16
 8001f00:	f000 fdf6 	bl	8002af0 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001f04:	4605      	mov	r5, r0
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d1ee      	bne.n	8001ee8 <HAL_SD_InitCard+0x18c>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001f0a:	4601      	mov	r1, r0
 8001f0c:	6820      	ldr	r0, [r4, #0]
 8001f0e:	f000 fbd8 	bl	80026c2 <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001f12:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001f14:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001f16:	6820      	ldr	r0, [r4, #0]
 8001f18:	f000 fbd3 	bl	80026c2 <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001f1c:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001f1e:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001f20:	6820      	ldr	r0, [r4, #0]
 8001f22:	f000 fbce 	bl	80026c2 <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8001f26:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001f28:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8001f2a:	6820      	ldr	r0, [r4, #0]
 8001f2c:	f000 fbc9 	bl	80026c2 <SDIO_GetResponse>
 8001f30:	6720      	str	r0, [r4, #112]	; 0x70
 8001f32:	e7b1      	b.n	8001e98 <HAL_SD_InitCard+0x13c>
 8001f34:	422580a0 	.word	0x422580a0

08001f38 <HAL_SD_Init>:
{
 8001f38:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	b1a0      	cbz	r0, 8001f68 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 8001f3e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8001f42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f46:	b913      	cbnz	r3, 8001f4e <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 8001f48:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8001f4a:	f004 fa3d 	bl	80063c8 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8001f54:	4620      	mov	r0, r4
 8001f56:	f7ff ff01 	bl	8001d5c <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f5a:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 8001f5c:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f5e:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8001f60:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8001f62:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8001f66:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f68:	2001      	movs	r0, #1
}
 8001f6a:	bd10      	pop	{r4, pc}

08001f6c <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8001f6c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001f6e:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8001f70:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001f72:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8001f74:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001f76:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8001f78:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f7a:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8001f7c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001f7e:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8001f80:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001f82:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8001f84:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001f86:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8001f88:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001f8a:	61cb      	str	r3, [r1, #28]
}
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	4770      	bx	lr

08001f90 <HAL_SD_ConfigWideBusOperation>:
{
 8001f90:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8001f92:	2303      	movs	r3, #3
 8001f94:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8001f98:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001f9a:	2b03      	cmp	r3, #3
{
 8001f9c:	b08a      	sub	sp, #40	; 0x28
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8001fa2:	d002      	beq.n	8001faa <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8001fa4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001fa8:	d103      	bne.n	8001fb2 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001faa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	e056      	b.n	8002060 <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8001fb2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001fb6:	d12d      	bne.n	8002014 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2U] = {0U, 0U};
 8001fb8:	2100      	movs	r1, #0
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8001fba:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 8001fbc:	9104      	str	r1, [sp, #16]
 8001fbe:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8001fc0:	f000 fb7f 	bl	80026c2 <SDIO_GetResponse>
 8001fc4:	0180      	lsls	r0, r0, #6
 8001fc6:	d420      	bmi.n	800200a <HAL_SD_ConfigWideBusOperation+0x7a>
  errorstate = SD_FindSCR(hsd, scr);
 8001fc8:	a904      	add	r1, sp, #16
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7ff fc5d 	bl	800188a <SD_FindSCR>
  if(errorstate != HAL_OK)
 8001fd0:	b960      	cbnz	r0, 8001fec <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8001fd2:	9b05      	ldr	r3, [sp, #20]
 8001fd4:	0359      	lsls	r1, r3, #13
 8001fd6:	d51a      	bpl.n	800200e <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001fd8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001fda:	6820      	ldr	r0, [r4, #0]
 8001fdc:	0409      	lsls	r1, r1, #16
 8001fde:	f000 fd29 	bl	8002a34 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8001fe2:	b918      	cbnz	r0, 8001fec <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	6820      	ldr	r0, [r4, #0]
 8001fe8:	f000 fe1c 	bl	8002c24 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8001fec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fee:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8001ff0:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8001ff2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001ff4:	2d00      	cmp	r5, #0
 8001ff6:	d035      	beq.n	8002064 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	f240 52ff 	movw	r2, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 8001ffe:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002000:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002002:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8002006:	b00a      	add	sp, #40	; 0x28
 8002008:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800200a:	4630      	mov	r0, r6
 800200c:	e7ee      	b.n	8001fec <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800200e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002012:	e7eb      	b.n	8001fec <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002014:	bb09      	cbnz	r1, 800205a <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002016:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 8002018:	9104      	str	r1, [sp, #16]
 800201a:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800201c:	f000 fb51 	bl	80026c2 <SDIO_GetResponse>
 8002020:	0182      	lsls	r2, r0, #6
 8002022:	d414      	bmi.n	800204e <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 8002024:	a904      	add	r1, sp, #16
 8002026:	4620      	mov	r0, r4
 8002028:	f7ff fc2f 	bl	800188a <SD_FindSCR>
  if(errorstate != HAL_OK)
 800202c:	b960      	cbnz	r0, 8002048 <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800202e:	9b05      	ldr	r3, [sp, #20]
 8002030:	03db      	lsls	r3, r3, #15
 8002032:	d50f      	bpl.n	8002054 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002034:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002036:	6820      	ldr	r0, [r4, #0]
 8002038:	0409      	lsls	r1, r1, #16
 800203a:	f000 fcfb 	bl	8002a34 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800203e:	b918      	cbnz	r0, 8002048 <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002040:	4601      	mov	r1, r0
 8002042:	6820      	ldr	r0, [r4, #0]
 8002044:	f000 fdee 	bl	8002c24 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8002048:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800204a:	4308      	orrs	r0, r1
 800204c:	e7d0      	b.n	8001ff0 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800204e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002052:	e7f9      	b.n	8002048 <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002054:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002058:	e7f6      	b.n	8002048 <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800205a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800205c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002060:	63a3      	str	r3, [r4, #56]	; 0x38
 8002062:	e7c6      	b.n	8001ff2 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002064:	6863      	ldr	r3, [r4, #4]
 8002066:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002068:	68a3      	ldr	r3, [r4, #8]
 800206a:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800206c:	68e3      	ldr	r3, [r4, #12]
 800206e:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002070:	6963      	ldr	r3, [r4, #20]
 8002072:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002074:	69a3      	ldr	r3, [r4, #24]
 8002076:	9309      	str	r3, [sp, #36]	; 0x24
    Init.BusWide             = WideMode;
 8002078:	9607      	str	r6, [sp, #28]
    SDIO_Init(hsd->Instance, Init);
 800207a:	ab0a      	add	r3, sp, #40	; 0x28
 800207c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002080:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002084:	ab04      	add	r3, sp, #16
 8002086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002088:	6820      	ldr	r0, [r4, #0]
 800208a:	f000 fadb 	bl	8002644 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 800208e:	2301      	movs	r3, #1
 8002090:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8002094:	4628      	mov	r0, r5
 8002096:	e7b6      	b.n	8002006 <HAL_SD_ConfigWideBusOperation+0x76>

08002098 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002098:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 800209a:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800209c:	0409      	lsls	r1, r1, #16
{
 800209e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80020a0:	6800      	ldr	r0, [r0, #0]
 80020a2:	f000 fd8f 	bl	8002bc4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 80020a6:	4601      	mov	r1, r0
 80020a8:	b928      	cbnz	r0, 80020b6 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80020aa:	6820      	ldr	r0, [r4, #0]
 80020ac:	f000 fb09 	bl	80026c2 <SDIO_GetResponse>
  return cardstate;
 80020b0:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80020b4:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80020b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020b8:	4319      	orrs	r1, r3
 80020ba:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 80020bc:	2000      	movs	r0, #0
 80020be:	e7f7      	b.n	80020b0 <HAL_SD_GetCardState+0x18>

080020c0 <SD_DMAError>:
{
 80020c0:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80020c2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 80020c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80020c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d003      	beq.n	80020d4 <SD_DMAError+0x14>
 80020cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d11b      	bne.n	800210c <SD_DMAError+0x4c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80020da:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80020dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020de:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80020e2:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80020e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020ea:	63a3      	str	r3, [r4, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80020ec:	4620      	mov	r0, r4
 80020ee:	f7ff ffd3 	bl	8002098 <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80020f2:	3805      	subs	r0, #5
 80020f4:	b2c0      	uxtb	r0, r0
 80020f6:	2801      	cmp	r0, #1
 80020f8:	d805      	bhi.n	8002106 <SD_DMAError+0x46>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80020fa:	6820      	ldr	r0, [r4, #0]
 80020fc:	f000 fc08 	bl	8002910 <SDMMC_CmdStopTransfer>
 8002100:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002102:	4318      	orrs	r0, r3
 8002104:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State= HAL_SD_STATE_READY;
 8002106:	2301      	movs	r3, #1
 8002108:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_ErrorCallback(hsd);
 800210c:	4620      	mov	r0, r4
 800210e:	f7ff fd27 	bl	8001b60 <HAL_SD_ErrorCallback>
 8002112:	bd10      	pop	{r4, pc}

08002114 <SD_DMATxAbort>:
{
 8002114:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002116:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->hdmatx != NULL)
 8002118:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800211a:	b10b      	cbz	r3, 8002120 <SD_DMATxAbort+0xc>
    hsd->hdmatx = NULL;
 800211c:	2300      	movs	r3, #0
 800211e:	6423      	str	r3, [r4, #64]	; 0x40
  if(hsd->hdmarx == NULL)
 8002120:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002122:	b9c5      	cbnz	r5, 8002156 <SD_DMATxAbort+0x42>
    CardState = HAL_SD_GetCardState(hsd);
 8002124:	4620      	mov	r0, r4
 8002126:	f7ff ffb7 	bl	8002098 <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800212a:	3805      	subs	r0, #5
    hsd->State = HAL_SD_STATE_READY;
 800212c:	2301      	movs	r3, #1
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800212e:	b2c0      	uxtb	r0, r0
 8002130:	4298      	cmp	r0, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002132:	63a5      	str	r5, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002134:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002138:	d80d      	bhi.n	8002156 <SD_DMATxAbort+0x42>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800213a:	6820      	ldr	r0, [r4, #0]
 800213c:	f000 fbe8 	bl	8002910 <SDMMC_CmdStopTransfer>
 8002140:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002142:	4318      	orrs	r0, r3
 8002144:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002146:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8002148:	4620      	mov	r0, r4
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800214a:	b113      	cbz	r3, 8002152 <SD_DMATxAbort+0x3e>
        HAL_SD_AbortCallback(hsd);
 800214c:	f003 fd63 	bl	8005c16 <HAL_SD_AbortCallback>
 8002150:	bd38      	pop	{r3, r4, r5, pc}
        HAL_SD_ErrorCallback(hsd);
 8002152:	f7ff fd05 	bl	8001b60 <HAL_SD_ErrorCallback>
 8002156:	bd38      	pop	{r3, r4, r5, pc}

08002158 <SD_DMARxAbort>:
{
 8002158:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800215a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->hdmarx != NULL)
 800215c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800215e:	b10b      	cbz	r3, 8002164 <SD_DMARxAbort+0xc>
    hsd->hdmarx = NULL;
 8002160:	2300      	movs	r3, #0
 8002162:	63e3      	str	r3, [r4, #60]	; 0x3c
  if(hsd->hdmatx == NULL)
 8002164:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002166:	b9c5      	cbnz	r5, 800219a <SD_DMARxAbort+0x42>
    CardState = HAL_SD_GetCardState(hsd);
 8002168:	4620      	mov	r0, r4
 800216a:	f7ff ff95 	bl	8002098 <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800216e:	3805      	subs	r0, #5
    hsd->State = HAL_SD_STATE_READY;
 8002170:	2301      	movs	r3, #1
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002172:	b2c0      	uxtb	r0, r0
 8002174:	4298      	cmp	r0, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002176:	63a5      	str	r5, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002178:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800217c:	d80d      	bhi.n	800219a <SD_DMARxAbort+0x42>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800217e:	6820      	ldr	r0, [r4, #0]
 8002180:	f000 fbc6 	bl	8002910 <SDMMC_CmdStopTransfer>
 8002184:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002186:	4318      	orrs	r0, r3
 8002188:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800218a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 800218c:	4620      	mov	r0, r4
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800218e:	b113      	cbz	r3, 8002196 <SD_DMARxAbort+0x3e>
        HAL_SD_AbortCallback(hsd);
 8002190:	f003 fd41 	bl	8005c16 <HAL_SD_AbortCallback>
 8002194:	bd38      	pop	{r3, r4, r5, pc}
        HAL_SD_ErrorCallback(hsd);
 8002196:	f7ff fce3 	bl	8001b60 <HAL_SD_ErrorCallback>
 800219a:	bd38      	pop	{r3, r4, r5, pc}

0800219c <HAL_SD_IRQHandler>:
{
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 80021a0:	6800      	ldr	r0, [r0, #0]
 80021a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80021a4:	05db      	lsls	r3, r3, #23
 80021a6:	d54d      	bpl.n	8002244 <HAL_SD_IRQHandler+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 80021a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ac:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80021ae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80021b0:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 80021b4:	63c3      	str	r3, [r0, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80021b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021b8:	f013 0f08 	tst.w	r3, #8
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 80021bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80021be:	d01e      	beq.n	80021fe <HAL_SD_IRQHandler+0x62>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 80021c0:	079e      	lsls	r6, r3, #30
 80021c2:	d402      	bmi.n	80021ca <HAL_SD_IRQHandler+0x2e>
 80021c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021c6:	069d      	lsls	r5, r3, #26
 80021c8:	d508      	bpl.n	80021dc <HAL_SD_IRQHandler+0x40>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80021ca:	f000 fba1 	bl	8002910 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80021ce:	b128      	cbz	r0, 80021dc <HAL_SD_IRQHandler+0x40>
          hsd->ErrorCode |= errorstate;
 80021d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021d2:	4318      	orrs	r0, r3
 80021d4:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80021d6:	4620      	mov	r0, r4
 80021d8:	f7ff fcc2 	bl	8001b60 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80021e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021e4:	2301      	movs	r3, #1
 80021e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80021ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021ec:	07d9      	lsls	r1, r3, #31
        HAL_SD_RxCpltCallback(hsd);
 80021ee:	4620      	mov	r0, r4
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80021f0:	d402      	bmi.n	80021f8 <HAL_SD_IRQHandler+0x5c>
 80021f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021f4:	079a      	lsls	r2, r3, #30
 80021f6:	d522      	bpl.n	800223e <HAL_SD_IRQHandler+0xa2>
        HAL_SD_RxCpltCallback(hsd);
 80021f8:	f003 fd15 	bl	8005c26 <HAL_SD_RxCpltCallback>
 80021fc:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80021fe:	061b      	lsls	r3, r3, #24
 8002200:	f140 809b 	bpl.w	800233a <HAL_SD_IRQHandler+0x19e>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8002204:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002206:	069e      	lsls	r6, r3, #26
 8002208:	d508      	bpl.n	800221c <HAL_SD_IRQHandler+0x80>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800220a:	f000 fb81 	bl	8002910 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800220e:	b128      	cbz	r0, 800221c <HAL_SD_IRQHandler+0x80>
          hsd->ErrorCode |= errorstate;
 8002210:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002212:	4318      	orrs	r0, r3
 8002214:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002216:	4620      	mov	r0, r4
 8002218:	f7ff fca2 	bl	8001b60 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 800221c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800221e:	07dd      	lsls	r5, r3, #31
 8002220:	f100 808b 	bmi.w	800233a <HAL_SD_IRQHandler+0x19e>
 8002224:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002226:	0798      	lsls	r0, r3, #30
 8002228:	f100 8087 	bmi.w	800233a <HAL_SD_IRQHandler+0x19e>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800222c:	6822      	ldr	r2, [r4, #0]
 800222e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002230:	f023 0308 	bic.w	r3, r3, #8
 8002234:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002236:	2301      	movs	r3, #1
 8002238:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800223c:	4620      	mov	r0, r4
 800223e:	f003 fcee 	bl	8005c1e <HAL_SD_TxCpltCallback>
 8002242:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8002244:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002246:	0459      	lsls	r1, r3, #17
 8002248:	d510      	bpl.n	800226c <HAL_SD_IRQHandler+0xd0>
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
  uint32_t count = 0U;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800224a:	6a25      	ldr	r5, [r4, #32]
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 800224c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002250:	6383      	str	r3, [r0, #56]	; 0x38
 8002252:	f105 0620 	add.w	r6, r5, #32
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8002256:	4629      	mov	r1, r5
 8002258:	6820      	ldr	r0, [r4, #0]
 800225a:	3504      	adds	r5, #4
 800225c:	f000 fa11 	bl	8002682 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8002260:	42ae      	cmp	r6, r5
 8002262:	d1f8      	bne.n	8002256 <HAL_SD_IRQHandler+0xba>
  }
  
  hsd->pTxBuffPtr += 8U;
 8002264:	6a23      	ldr	r3, [r4, #32]
 8002266:	3320      	adds	r3, #32
 8002268:	6223      	str	r3, [r4, #32]
 800226a:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800226c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800226e:	041a      	lsls	r2, r3, #16
 8002270:	d510      	bpl.n	8002294 <HAL_SD_IRQHandler+0xf8>
  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8002272:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8002274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002278:	1f2e      	subs	r6, r5, #4
 800227a:	6383      	str	r3, [r0, #56]	; 0x38
 800227c:	351c      	adds	r5, #28
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 800227e:	6820      	ldr	r0, [r4, #0]
 8002280:	f000 f9fc 	bl	800267c <SDIO_ReadFIFO>
 8002284:	f846 0f04 	str.w	r0, [r6, #4]!
  for(count = 0U; count < 8U; count++)
 8002288:	42ae      	cmp	r6, r5
 800228a:	d1f8      	bne.n	800227e <HAL_SD_IRQHandler+0xe2>
  hsd->pRxBuffPtr += 8U;
 800228c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800228e:	3320      	adds	r3, #32
 8002290:	62a3      	str	r3, [r4, #40]	; 0x28
 8002292:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR) != RESET)
 8002294:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002296:	f013 0f3a 	tst.w	r3, #58	; 0x3a
 800229a:	d04e      	beq.n	800233a <HAL_SD_IRQHandler+0x19e>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 800229c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800229e:	079b      	lsls	r3, r3, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 80022a0:	bf42      	ittt	mi
 80022a2:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 80022a4:	f043 0302 	orrmi.w	r3, r3, #2
 80022a8:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 80022aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80022ac:	071e      	lsls	r6, r3, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 80022ae:	bf42      	ittt	mi
 80022b0:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 80022b2:	f043 0308 	orrmi.w	r3, r3, #8
 80022b6:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 80022b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80022ba:	069d      	lsls	r5, r3, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 80022bc:	bf42      	ittt	mi
 80022be:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 80022c0:	f043 0320 	orrmi.w	r3, r3, #32
 80022c4:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 80022c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80022c8:	06d9      	lsls	r1, r3, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 80022ca:	bf42      	ittt	mi
 80022cc:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 80022ce:	f043 0310 	orrmi.w	r3, r3, #16
 80022d2:	63a3      	strmi	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022d4:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80022d8:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80022da:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80022dc:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 80022e0:	63c3      	str	r3, [r0, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80022e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022e4:	061a      	lsls	r2, r3, #24
 80022e6:	d51f      	bpl.n	8002328 <HAL_SD_IRQHandler+0x18c>
      if(hsd->hdmatx != NULL)
 80022e8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80022ea:	b148      	cbz	r0, 8002300 <HAL_SD_IRQHandler+0x164>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <HAL_SD_IRQHandler+0x1a0>)
 80022ee:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80022f0:	f7fe fa74 	bl	80007dc <HAL_DMA_Abort_IT>
 80022f4:	b308      	cbz	r0, 800233a <HAL_SD_IRQHandler+0x19e>
          SD_DMATxAbort(hsd->hdmatx);
 80022f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 80022f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          SD_DMATxAbort(hsd->hdmatx);
 80022fc:	f7ff bf0a 	b.w	8002114 <SD_DMATxAbort>
      else if(hsd->hdmarx != NULL)
 8002300:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002302:	b148      	cbz	r0, 8002318 <HAL_SD_IRQHandler+0x17c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_SD_IRQHandler+0x1a4>)
 8002306:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002308:	f7fe fa68 	bl	80007dc <HAL_DMA_Abort_IT>
 800230c:	b1a8      	cbz	r0, 800233a <HAL_SD_IRQHandler+0x19e>
          SD_DMARxAbort(hsd->hdmarx);
 800230e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8002310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          SD_DMARxAbort(hsd->hdmarx);
 8002314:	f7ff bf20 	b.w	8002158 <SD_DMARxAbort>
        hsd->State = HAL_SD_STATE_READY;
 8002318:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800231a:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800231c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8002320:	4620      	mov	r0, r4
 8002322:	f003 fc78 	bl	8005c16 <HAL_SD_AbortCallback>
 8002326:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8002328:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800232a:	071b      	lsls	r3, r3, #28
 800232c:	d505      	bpl.n	800233a <HAL_SD_IRQHandler+0x19e>
      hsd->State = HAL_SD_STATE_READY;
 800232e:	2301      	movs	r3, #1
 8002330:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8002334:	4620      	mov	r0, r4
 8002336:	f7ff fc13 	bl	8001b60 <HAL_SD_ErrorCallback>
 800233a:	bd70      	pop	{r4, r5, r6, pc}
 800233c:	08002115 	.word	0x08002115
 8002340:	08002159 	.word	0x08002159

08002344 <HAL_TIM_Base_MspInit>:
 8002344:	4770      	bx	lr

08002346 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002346:	6803      	ldr	r3, [r0, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002356:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8002358:	bf1e      	ittt	ne
 800235a:	681a      	ldrne	r2, [r3, #0]
 800235c:	f042 0201 	orrne.w	r2, r2, #1
 8002360:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002362:	2000      	movs	r0, #0
 8002364:	4770      	bx	lr

08002366 <HAL_TIM_OC_DelayElapsedCallback>:
 8002366:	4770      	bx	lr

08002368 <HAL_TIM_IC_CaptureCallback>:
 8002368:	4770      	bx	lr

0800236a <HAL_TIM_PWM_PulseFinishedCallback>:
 800236a:	4770      	bx	lr

0800236c <HAL_TIM_TriggerCallback>:
 800236c:	4770      	bx	lr

0800236e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800236e:	6803      	ldr	r3, [r0, #0]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	0791      	lsls	r1, r2, #30
{
 8002374:	b510      	push	{r4, lr}
 8002376:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002378:	d50e      	bpl.n	8002398 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	0792      	lsls	r2, r2, #30
 800237e:	d50b      	bpl.n	8002398 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002380:	f06f 0202 	mvn.w	r2, #2
 8002384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002386:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002388:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800238a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800238c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800238e:	d077      	beq.n	8002480 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002390:	f7ff ffea 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002394:	2300      	movs	r3, #0
 8002396:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	0750      	lsls	r0, r2, #29
 800239e:	d510      	bpl.n	80023c2 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	0751      	lsls	r1, r2, #29
 80023a4:	d50d      	bpl.n	80023c2 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023a6:	f06f 0204 	mvn.w	r2, #4
 80023aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023ac:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ae:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023b0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023b4:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023b8:	d068      	beq.n	800248c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80023ba:	f7ff ffd5 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023be:	2300      	movs	r3, #0
 80023c0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	0712      	lsls	r2, r2, #28
 80023c8:	d50f      	bpl.n	80023ea <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	0710      	lsls	r0, r2, #28
 80023ce:	d50c      	bpl.n	80023ea <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023d0:	f06f 0208 	mvn.w	r2, #8
 80023d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023d6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023d8:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023da:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023dc:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023de:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023e0:	d05a      	beq.n	8002498 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80023e2:	f7ff ffc1 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e6:	2300      	movs	r3, #0
 80023e8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	06d2      	lsls	r2, r2, #27
 80023f0:	d510      	bpl.n	8002414 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	06d0      	lsls	r0, r2, #27
 80023f6:	d50d      	bpl.n	8002414 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023f8:	f06f 0210 	mvn.w	r2, #16
 80023fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023fe:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002400:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002402:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002406:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002408:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800240a:	d04b      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800240c:	f7ff ffac 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002410:	2300      	movs	r3, #0
 8002412:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	07d1      	lsls	r1, r2, #31
 800241a:	d508      	bpl.n	800242e <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	07d2      	lsls	r2, r2, #31
 8002420:	d505      	bpl.n	800242e <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002422:	f06f 0201 	mvn.w	r2, #1
 8002426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002428:	4620      	mov	r0, r4
 800242a:	f003 fe65 	bl	80060f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	0610      	lsls	r0, r2, #24
 8002434:	d508      	bpl.n	8002448 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	0611      	lsls	r1, r2, #24
 800243a:	d505      	bpl.n	8002448 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800243c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002442:	4620      	mov	r0, r4
 8002444:	f000 f8b7 	bl	80025b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002448:	6823      	ldr	r3, [r4, #0]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	0652      	lsls	r2, r2, #25
 800244e:	d508      	bpl.n	8002462 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	0650      	lsls	r0, r2, #25
 8002454:	d505      	bpl.n	8002462 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002456:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800245a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800245c:	4620      	mov	r0, r4
 800245e:	f7ff ff85 	bl	800236c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	0691      	lsls	r1, r2, #26
 8002468:	d522      	bpl.n	80024b0 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	0692      	lsls	r2, r2, #26
 800246e:	d51f      	bpl.n	80024b0 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002470:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002474:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002476:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800247c:	f000 b89a 	b.w	80025b4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002480:	f7ff ff71 	bl	8002366 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	4620      	mov	r0, r4
 8002486:	f7ff ff70 	bl	800236a <HAL_TIM_PWM_PulseFinishedCallback>
 800248a:	e783      	b.n	8002394 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248c:	f7ff ff6b 	bl	8002366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002490:	4620      	mov	r0, r4
 8002492:	f7ff ff6a 	bl	800236a <HAL_TIM_PWM_PulseFinishedCallback>
 8002496:	e792      	b.n	80023be <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002498:	f7ff ff65 	bl	8002366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800249c:	4620      	mov	r0, r4
 800249e:	f7ff ff64 	bl	800236a <HAL_TIM_PWM_PulseFinishedCallback>
 80024a2:	e7a0      	b.n	80023e6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a4:	f7ff ff5f 	bl	8002366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a8:	4620      	mov	r0, r4
 80024aa:	f7ff ff5e 	bl	800236a <HAL_TIM_PWM_PulseFinishedCallback>
 80024ae:	e7af      	b.n	8002410 <HAL_TIM_IRQHandler+0xa2>
 80024b0:	bd10      	pop	{r4, pc}
	...

080024b4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024b4:	4a30      	ldr	r2, [pc, #192]	; (8002578 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80024b6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024b8:	4290      	cmp	r0, r2
 80024ba:	d012      	beq.n	80024e2 <TIM_Base_SetConfig+0x2e>
 80024bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80024c0:	d00f      	beq.n	80024e2 <TIM_Base_SetConfig+0x2e>
 80024c2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80024c6:	4290      	cmp	r0, r2
 80024c8:	d00b      	beq.n	80024e2 <TIM_Base_SetConfig+0x2e>
 80024ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024ce:	4290      	cmp	r0, r2
 80024d0:	d007      	beq.n	80024e2 <TIM_Base_SetConfig+0x2e>
 80024d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024d6:	4290      	cmp	r0, r2
 80024d8:	d003      	beq.n	80024e2 <TIM_Base_SetConfig+0x2e>
 80024da:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80024de:	4290      	cmp	r0, r2
 80024e0:	d119      	bne.n	8002516 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80024e2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80024e8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ea:	4a23      	ldr	r2, [pc, #140]	; (8002578 <TIM_Base_SetConfig+0xc4>)
 80024ec:	4290      	cmp	r0, r2
 80024ee:	d029      	beq.n	8002544 <TIM_Base_SetConfig+0x90>
 80024f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80024f4:	d026      	beq.n	8002544 <TIM_Base_SetConfig+0x90>
 80024f6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80024fa:	4290      	cmp	r0, r2
 80024fc:	d022      	beq.n	8002544 <TIM_Base_SetConfig+0x90>
 80024fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002502:	4290      	cmp	r0, r2
 8002504:	d01e      	beq.n	8002544 <TIM_Base_SetConfig+0x90>
 8002506:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800250a:	4290      	cmp	r0, r2
 800250c:	d01a      	beq.n	8002544 <TIM_Base_SetConfig+0x90>
 800250e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002512:	4290      	cmp	r0, r2
 8002514:	d016      	beq.n	8002544 <TIM_Base_SetConfig+0x90>
 8002516:	4a19      	ldr	r2, [pc, #100]	; (800257c <TIM_Base_SetConfig+0xc8>)
 8002518:	4290      	cmp	r0, r2
 800251a:	d013      	beq.n	8002544 <TIM_Base_SetConfig+0x90>
 800251c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002520:	4290      	cmp	r0, r2
 8002522:	d00f      	beq.n	8002544 <TIM_Base_SetConfig+0x90>
 8002524:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002528:	4290      	cmp	r0, r2
 800252a:	d00b      	beq.n	8002544 <TIM_Base_SetConfig+0x90>
 800252c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002530:	4290      	cmp	r0, r2
 8002532:	d007      	beq.n	8002544 <TIM_Base_SetConfig+0x90>
 8002534:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002538:	4290      	cmp	r0, r2
 800253a:	d003      	beq.n	8002544 <TIM_Base_SetConfig+0x90>
 800253c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002540:	4290      	cmp	r0, r2
 8002542:	d103      	bne.n	800254c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002544:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800254a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800254c:	694a      	ldr	r2, [r1, #20]
 800254e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002552:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002554:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002556:	688b      	ldr	r3, [r1, #8]
 8002558:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800255a:	680b      	ldr	r3, [r1, #0]
 800255c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <TIM_Base_SetConfig+0xc4>)
 8002560:	4298      	cmp	r0, r3
 8002562:	d003      	beq.n	800256c <TIM_Base_SetConfig+0xb8>
 8002564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002568:	4298      	cmp	r0, r3
 800256a:	d101      	bne.n	8002570 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800256c:	690b      	ldr	r3, [r1, #16]
 800256e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002570:	2301      	movs	r3, #1
 8002572:	6143      	str	r3, [r0, #20]
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40010000 	.word	0x40010000
 800257c:	40014000 	.word	0x40014000

08002580 <HAL_TIM_Base_Init>:
{
 8002580:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002582:	4604      	mov	r4, r0
 8002584:	b1a0      	cbz	r0, 80025b0 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002586:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800258a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800258e:	b91b      	cbnz	r3, 8002598 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002590:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002594:	f7ff fed6 	bl	8002344 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	2302      	movs	r3, #2
 800259a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800259e:	6820      	ldr	r0, [r4, #0]
 80025a0:	1d21      	adds	r1, r4, #4
 80025a2:	f7ff ff87 	bl	80024b4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80025a6:	2301      	movs	r3, #1
 80025a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80025ac:	2000      	movs	r0, #0
 80025ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025b0:	2001      	movs	r0, #1
}
 80025b2:	bd10      	pop	{r4, pc}

080025b4 <HAL_TIMEx_CommutCallback>:
 80025b4:	4770      	bx	lr

080025b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025b6:	4770      	bx	lr

080025b8 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <SDMMC_GetCmdResp2+0x48>)
 80025ba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80025c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80025c8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80025ca:	f113 33ff 	adds.w	r3, r3, #4294967295
 80025ce:	d314      	bcc.n	80025fa <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80025d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80025d2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80025d6:	d0f8      	beq.n	80025ca <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80025d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80025da:	075b      	lsls	r3, r3, #29
 80025dc:	d503      	bpl.n	80025e6 <SDMMC_GetCmdResp2+0x2e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80025de:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80025e0:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80025e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80025e8:	f013 0301 	ands.w	r3, r3, #1
 80025ec:	d001      	beq.n	80025f2 <SDMMC_GetCmdResp2+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80025ee:	2301      	movs	r3, #1
 80025f0:	e7f6      	b.n	80025e0 <SDMMC_GetCmdResp2+0x28>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80025f2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80025f6:	6382      	str	r2, [r0, #56]	; 0x38
 80025f8:	e7f3      	b.n	80025e2 <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80025fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80025fe:	e7f0      	b.n	80025e2 <SDMMC_GetCmdResp2+0x2a>
 8002600:	2000000c 	.word	0x2000000c

08002604 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <SDMMC_GetCmdResp3+0x3c>)
 8002606:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002610:	f241 3388 	movw	r3, #5000	; 0x1388
 8002614:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8002616:	f113 33ff 	adds.w	r3, r3, #4294967295
 800261a:	d30e      	bcc.n	800263a <SDMMC_GetCmdResp3+0x36>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800261c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800261e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002622:	d0f8      	beq.n	8002616 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002624:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002626:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800262a:	bf15      	itete	ne
 800262c:	2304      	movne	r3, #4
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800262e:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002632:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8002634:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002636:	4618      	mov	r0, r3
 8002638:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800263a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800263e:	4770      	bx	lr
 8002640:	2000000c 	.word	0x2000000c

08002644 <SDIO_Init>:
{
 8002644:	b084      	sub	sp, #16
 8002646:	b510      	push	{r4, lr}
 8002648:	ac03      	add	r4, sp, #12
 800264a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800264e:	9904      	ldr	r1, [sp, #16]
 8002650:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002652:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8002654:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8002656:	9905      	ldr	r1, [sp, #20]
 8002658:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 800265a:	9906      	ldr	r1, [sp, #24]
 800265c:	430b      	orrs	r3, r1
             Init.BusWide             |\
 800265e:	9907      	ldr	r1, [sp, #28]
 8002660:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8002662:	9908      	ldr	r1, [sp, #32]
}
 8002664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002668:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 800266c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800266e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002672:	4313      	orrs	r3, r2
 8002674:	6043      	str	r3, [r0, #4]
}
 8002676:	b004      	add	sp, #16
 8002678:	2000      	movs	r0, #0
 800267a:	4770      	bx	lr

0800267c <SDIO_ReadFIFO>:
 800267c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8002680:	4770      	bx	lr

08002682 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8002682:	680b      	ldr	r3, [r1, #0]
 8002684:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8002688:	2000      	movs	r0, #0
 800268a:	4770      	bx	lr

0800268c <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800268c:	2303      	movs	r3, #3
 800268e:	6003      	str	r3, [r0, #0]
}
 8002690:	2000      	movs	r0, #0
 8002692:	4770      	bx	lr

08002694 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002694:	6800      	ldr	r0, [r0, #0]
}
 8002696:	f000 0003 	and.w	r0, r0, #3
 800269a:	4770      	bx	lr

0800269c <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 800269c:	680b      	ldr	r3, [r1, #0]
{
 800269e:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 80026a0:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80026a2:	688c      	ldr	r4, [r1, #8]
 80026a4:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80026a6:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80026a8:	4323      	orrs	r3, r4
                       Command->Response         |\
 80026aa:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 80026ac:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 80026ae:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80026b0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 80026b4:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80026b6:	f022 020f 	bic.w	r2, r2, #15
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60c3      	str	r3, [r0, #12]
}
 80026be:	2000      	movs	r0, #0
 80026c0:	bd10      	pop	{r4, pc}

080026c2 <SDIO_GetResponse>:
{
 80026c2:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80026c4:	3014      	adds	r0, #20
 80026c6:	4401      	add	r1, r0
  __IO uint32_t tmp = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80026cc:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80026ce:	9b01      	ldr	r3, [sp, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
}  
 80026d2:	b002      	add	sp, #8
 80026d4:	4770      	bx	lr
	...

080026d8 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80026d8:	4b45      	ldr	r3, [pc, #276]	; (80027f0 <SDMMC_GetCmdResp1+0x118>)
{
 80026da:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 80026e2:	fbb3 f3f4 	udiv	r3, r3, r4
 80026e6:	435a      	muls	r2, r3
    if (count-- == 0U)
 80026e8:	2a00      	cmp	r2, #0
 80026ea:	d04a      	beq.n	8002782 <SDMMC_GetCmdResp1+0xaa>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80026ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80026ee:	f013 0f45 	tst.w	r3, #69	; 0x45
 80026f2:	f102 32ff 	add.w	r2, r2, #4294967295
 80026f6:	d0f7      	beq.n	80026e8 <SDMMC_GetCmdResp1+0x10>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80026f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80026fa:	075c      	lsls	r4, r3, #29
 80026fc:	d503      	bpl.n	8002706 <SDMMC_GetCmdResp1+0x2e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80026fe:	2304      	movs	r3, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002700:	6383      	str	r3, [r0, #56]	; 0x38
}
 8002702:	4618      	mov	r0, r3
 8002704:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002706:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002708:	f013 0301 	ands.w	r3, r3, #1
 800270c:	d001      	beq.n	8002712 <SDMMC_GetCmdResp1+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800270e:	2301      	movs	r3, #1
 8002710:	e7f6      	b.n	8002700 <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDIOx->RESPCMD);
 8002712:	6902      	ldr	r2, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	4291      	cmp	r1, r2
 8002718:	d136      	bne.n	8002788 <SDMMC_GetCmdResp1+0xb0>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800271a:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800271e:	4619      	mov	r1, r3
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8002720:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002722:	f7ff ffce 	bl	80026c2 <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002726:	4b33      	ldr	r3, [pc, #204]	; (80027f4 <SDMMC_GetCmdResp1+0x11c>)
 8002728:	4003      	ands	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0e9      	beq.n	8002702 <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800272e:	2800      	cmp	r0, #0
 8002730:	db2c      	blt.n	800278c <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002732:	0042      	lsls	r2, r0, #1
 8002734:	d42d      	bmi.n	8002792 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002736:	0084      	lsls	r4, r0, #2
 8002738:	d42d      	bmi.n	8002796 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800273a:	00c1      	lsls	r1, r0, #3
 800273c:	d42d      	bmi.n	800279a <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800273e:	0102      	lsls	r2, r0, #4
 8002740:	d42e      	bmi.n	80027a0 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002742:	0144      	lsls	r4, r0, #5
 8002744:	d42f      	bmi.n	80027a6 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002746:	01c1      	lsls	r1, r0, #7
 8002748:	d430      	bmi.n	80027ac <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800274a:	0202      	lsls	r2, r0, #8
 800274c:	d431      	bmi.n	80027b2 <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800274e:	0244      	lsls	r4, r0, #9
 8002750:	d432      	bmi.n	80027b8 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002752:	0281      	lsls	r1, r0, #10
 8002754:	d433      	bmi.n	80027be <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002756:	02c2      	lsls	r2, r0, #11
 8002758:	d434      	bmi.n	80027c4 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800275a:	0344      	lsls	r4, r0, #13
 800275c:	d435      	bmi.n	80027ca <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800275e:	0381      	lsls	r1, r0, #14
 8002760:	d436      	bmi.n	80027d0 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002762:	03c2      	lsls	r2, r0, #15
 8002764:	d437      	bmi.n	80027d6 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002766:	0404      	lsls	r4, r0, #16
 8002768:	d438      	bmi.n	80027dc <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800276a:	0441      	lsls	r1, r0, #17
 800276c:	d439      	bmi.n	80027e2 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800276e:	0482      	lsls	r2, r0, #18
 8002770:	d43a      	bmi.n	80027e8 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002772:	f010 0f08 	tst.w	r0, #8
 8002776:	bf14      	ite	ne
 8002778:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800277c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8002780:	e7bf      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8002782:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002786:	e7bc      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002788:	2301      	movs	r3, #1
 800278a:	e7ba      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800278c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002790:	e7b7      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002792:	2340      	movs	r3, #64	; 0x40
 8002794:	e7b5      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	e7b3      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800279a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800279e:	e7b0      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80027a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a4:	e7ad      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80027a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027aa:	e7aa      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80027ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027b0:	e7a7      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80027b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b6:	e7a4      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80027b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027bc:	e7a1      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80027be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027c2:	e79e      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 80027c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027c8:	e79b      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80027ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ce:	e798      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80027d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027d4:	e795      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80027d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80027da:	e792      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80027dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027e0:	e78f      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80027e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027e6:	e78c      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 80027e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027ec:	e789      	b.n	8002702 <SDMMC_GetCmdResp1+0x2a>
 80027ee:	bf00      	nop
 80027f0:	2000000c 	.word	0x2000000c
 80027f4:	fdffe008 	.word	0xfdffe008

080027f8 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 80027f8:	680b      	ldr	r3, [r1, #0]
{
 80027fa:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 80027fc:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 80027fe:	684b      	ldr	r3, [r1, #4]
 8002800:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002802:	68cc      	ldr	r4, [r1, #12]
 8002804:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002806:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002808:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 800280a:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 800280c:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 800280e:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8002810:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002812:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8002816:	4313      	orrs	r3, r2
 8002818:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800281a:	2000      	movs	r0, #0
 800281c:	bd10      	pop	{r4, pc}

0800281e <SDMMC_CmdBlockLength>:
{
 800281e:	b530      	push	{r4, r5, lr}
 8002820:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002822:	2340      	movs	r3, #64	; 0x40
 8002824:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002826:	2300      	movs	r3, #0
{
 8002828:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800282a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800282c:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800282e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002830:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002836:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002838:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800283a:	f7ff ff2f 	bl	800269c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800283e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002842:	4621      	mov	r1, r4
 8002844:	4628      	mov	r0, r5
 8002846:	f7ff ff47 	bl	80026d8 <SDMMC_GetCmdResp1>
}
 800284a:	b007      	add	sp, #28
 800284c:	bd30      	pop	{r4, r5, pc}

0800284e <SDMMC_CmdReadSingleBlock>:
{
 800284e:	b530      	push	{r4, r5, lr}
 8002850:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002852:	2340      	movs	r3, #64	; 0x40
 8002854:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002856:	2300      	movs	r3, #0
{
 8002858:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800285a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800285c:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800285e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002860:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002866:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002868:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800286a:	f7ff ff17 	bl	800269c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4621      	mov	r1, r4
 8002874:	4628      	mov	r0, r5
 8002876:	f7ff ff2f 	bl	80026d8 <SDMMC_GetCmdResp1>
}
 800287a:	b007      	add	sp, #28
 800287c:	bd30      	pop	{r4, r5, pc}

0800287e <SDMMC_CmdReadMultiBlock>:
{
 800287e:	b530      	push	{r4, r5, lr}
 8002880:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002882:	2340      	movs	r3, #64	; 0x40
 8002884:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002886:	2300      	movs	r3, #0
{
 8002888:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800288a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800288c:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800288e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002890:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002896:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002898:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800289a:	f7ff feff 	bl	800269c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800289e:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a2:	4621      	mov	r1, r4
 80028a4:	4628      	mov	r0, r5
 80028a6:	f7ff ff17 	bl	80026d8 <SDMMC_GetCmdResp1>
}
 80028aa:	b007      	add	sp, #28
 80028ac:	bd30      	pop	{r4, r5, pc}

080028ae <SDMMC_CmdWriteSingleBlock>:
{
 80028ae:	b530      	push	{r4, r5, lr}
 80028b0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80028b2:	2340      	movs	r3, #64	; 0x40
 80028b4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80028b6:	2300      	movs	r3, #0
{
 80028b8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80028ba:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80028bc:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80028be:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80028c0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80028c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80028c8:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80028ca:	f7ff fee7 	bl	800269c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4621      	mov	r1, r4
 80028d4:	4628      	mov	r0, r5
 80028d6:	f7ff feff 	bl	80026d8 <SDMMC_GetCmdResp1>
}
 80028da:	b007      	add	sp, #28
 80028dc:	bd30      	pop	{r4, r5, pc}

080028de <SDMMC_CmdWriteMultiBlock>:
{
 80028de:	b530      	push	{r4, r5, lr}
 80028e0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80028e2:	2340      	movs	r3, #64	; 0x40
 80028e4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80028e6:	2300      	movs	r3, #0
{
 80028e8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80028ea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80028ec:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80028ee:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80028f0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80028f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80028f8:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80028fa:	f7ff fecf 	bl	800269c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80028fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002902:	4621      	mov	r1, r4
 8002904:	4628      	mov	r0, r5
 8002906:	f7ff fee7 	bl	80026d8 <SDMMC_GetCmdResp1>
}
 800290a:	b007      	add	sp, #28
 800290c:	bd30      	pop	{r4, r5, pc}
	...

08002910 <SDMMC_CmdStopTransfer>:
{
 8002910:	b530      	push	{r4, r5, lr}
 8002912:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8002914:	2300      	movs	r3, #0
{
 8002916:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8002918:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800291a:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800291c:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800291e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002920:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002922:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002926:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002928:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800292a:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800292c:	f7ff feb6 	bl	800269c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8002930:	4a03      	ldr	r2, [pc, #12]	; (8002940 <SDMMC_CmdStopTransfer+0x30>)
 8002932:	4621      	mov	r1, r4
 8002934:	4628      	mov	r0, r5
 8002936:	f7ff fecf 	bl	80026d8 <SDMMC_GetCmdResp1>
}
 800293a:	b007      	add	sp, #28
 800293c:	bd30      	pop	{r4, r5, pc}
 800293e:	bf00      	nop
 8002940:	05f5e100 	.word	0x05f5e100

08002944 <SDMMC_CmdSelDesel>:
{
 8002944:	b530      	push	{r4, r5, lr}
 8002946:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002948:	2340      	movs	r3, #64	; 0x40
 800294a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800294c:	2300      	movs	r3, #0
{
 800294e:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002950:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002952:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002954:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002956:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800295a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800295c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800295e:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002960:	f7ff fe9c 	bl	800269c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8002964:	f241 3288 	movw	r2, #5000	; 0x1388
 8002968:	4621      	mov	r1, r4
 800296a:	4628      	mov	r0, r5
 800296c:	f7ff feb4 	bl	80026d8 <SDMMC_GetCmdResp1>
}
 8002970:	b007      	add	sp, #28
 8002972:	bd30      	pop	{r4, r5, pc}

08002974 <SDMMC_CmdGoIdleState>:
{
 8002974:	b510      	push	{r4, lr}
 8002976:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800297c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800297e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002980:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002982:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002988:	9305      	str	r3, [sp, #20]
{
 800298a:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800298c:	f7ff fe86 	bl	800269c <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <SDMMC_CmdGoIdleState+0x4c>)
 8002992:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	fbb3 f2f2 	udiv	r2, r3, r2
 800299c:	f241 3388 	movw	r3, #5000	; 0x1388
 80029a0:	4353      	muls	r3, r2
    if (count-- == 0U)
 80029a2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80029a6:	d308      	bcc.n	80029ba <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80029a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80029aa:	0612      	lsls	r2, r2, #24
 80029ac:	d5f9      	bpl.n	80029a2 <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80029ae:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80029b2:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80029b4:	2000      	movs	r0, #0
}
 80029b6:	b006      	add	sp, #24
 80029b8:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 80029ba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 80029be:	e7fa      	b.n	80029b6 <SDMMC_CmdGoIdleState+0x42>
 80029c0:	2000000c 	.word	0x2000000c

080029c4 <SDMMC_CmdOperCond>:
{
 80029c4:	b510      	push	{r4, lr}
 80029c6:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80029c8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80029cc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80029ce:	2308      	movs	r3, #8
 80029d0:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80029d2:	2340      	movs	r3, #64	; 0x40
 80029d4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80029d6:	2300      	movs	r3, #0
 80029d8:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80029da:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80029dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029e0:	9305      	str	r3, [sp, #20]
{
 80029e2:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80029e4:	f7ff fe5a 	bl	800269c <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <SDMMC_CmdOperCond+0x6c>)
 80029ea:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80029f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80029f8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80029fa:	f113 33ff 	adds.w	r3, r3, #4294967295
 80029fe:	d314      	bcc.n	8002a2a <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8002a00:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002a02:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002a06:	d0f8      	beq.n	80029fa <SDMMC_CmdOperCond+0x36>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002a08:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002a0a:	f012 0204 	ands.w	r2, r2, #4
 8002a0e:	d004      	beq.n	8002a1a <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8002a10:	2340      	movs	r3, #64	; 0x40
 8002a12:	63a3      	str	r3, [r4, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002a14:	2004      	movs	r0, #4
}
 8002a16:	b006      	add	sp, #24
 8002a18:	bd10      	pop	{r4, pc}
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8002a1a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002a1c:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8002a20:	d0f9      	beq.n	8002a16 <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8002a22:	2340      	movs	r3, #64	; 0x40
 8002a24:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002a26:	4610      	mov	r0, r2
 8002a28:	e7f5      	b.n	8002a16 <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8002a2a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002a2e:	e7f2      	b.n	8002a16 <SDMMC_CmdOperCond+0x52>
 8002a30:	2000000c 	.word	0x2000000c

08002a34 <SDMMC_CmdAppCommand>:
{
 8002a34:	b530      	push	{r4, r5, lr}
 8002a36:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a38:	2340      	movs	r3, #64	; 0x40
 8002a3a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a3c:	2300      	movs	r3, #0
{
 8002a3e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002a40:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002a42:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a44:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a46:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a4c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002a4e:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a50:	f7ff fe24 	bl	800269c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8002a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a58:	4621      	mov	r1, r4
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	f7ff fe3c 	bl	80026d8 <SDMMC_GetCmdResp1>
}
 8002a60:	b007      	add	sp, #28
 8002a62:	bd30      	pop	{r4, r5, pc}

08002a64 <SDMMC_CmdAppOperCommand>:
{
 8002a64:	b510      	push	{r4, lr}
 8002a66:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002a68:	2329      	movs	r3, #41	; 0x29
 8002a6a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8002a6c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a70:	2340      	movs	r3, #64	; 0x40
 8002a72:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8002a74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a78:	2300      	movs	r3, #0
{
 8002a7a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8002a7c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a7e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a80:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a86:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a88:	f7ff fe08 	bl	800269c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f7ff fdb9 	bl	8002604 <SDMMC_GetCmdResp3>
}
 8002a92:	b006      	add	sp, #24
 8002a94:	bd10      	pop	{r4, pc}

08002a96 <SDMMC_CmdSendSCR>:
{
 8002a96:	b530      	push	{r4, r5, lr}
 8002a98:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8002a9a:	2300      	movs	r3, #0
{
 8002a9c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8002a9e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8002aa0:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002aa2:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002aa4:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002aa6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002aac:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002aae:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8002ab0:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ab2:	f7ff fdf3 	bl	800269c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8002ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aba:	4621      	mov	r1, r4
 8002abc:	4628      	mov	r0, r5
 8002abe:	f7ff fe0b 	bl	80026d8 <SDMMC_GetCmdResp1>
}
 8002ac2:	b007      	add	sp, #28
 8002ac4:	bd30      	pop	{r4, r5, pc}

08002ac6 <SDMMC_CmdSendCID>:
{
 8002ac6:	b510      	push	{r4, lr}
 8002ac8:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8002aca:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002acc:	2202      	movs	r2, #2
{
 8002ace:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8002ad0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002ad2:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ad4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002ad6:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002adc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002ade:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ae0:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ae2:	f7ff fddb 	bl	800269c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	f7ff fd66 	bl	80025b8 <SDMMC_GetCmdResp2>
}
 8002aec:	b006      	add	sp, #24
 8002aee:	bd10      	pop	{r4, pc}

08002af0 <SDMMC_CmdSendCSD>:
{
 8002af0:	b510      	push	{r4, lr}
 8002af2:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002af4:	2309      	movs	r3, #9
 8002af6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002af8:	23c0      	movs	r3, #192	; 0xc0
 8002afa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002afc:	2300      	movs	r3, #0
{
 8002afe:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002b00:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b02:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b04:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b0a:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b0c:	f7ff fdc6 	bl	800269c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7ff fd51 	bl	80025b8 <SDMMC_GetCmdResp2>
}
 8002b16:	b006      	add	sp, #24
 8002b18:	bd10      	pop	{r4, pc}
	...

08002b1c <SDMMC_CmdSetRelAdd>:
{
 8002b1c:	b530      	push	{r4, r5, lr}
 8002b1e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8002b20:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002b22:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0U;
 8002b24:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002b26:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b28:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b2a:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 8002b30:	460d      	mov	r5, r1
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b32:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b34:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b36:	9305      	str	r3, [sp, #20]
{
 8002b38:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b3a:	f7ff fdaf 	bl	800269c <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <SDMMC_CmdSetRelAdd+0xa4>)
 8002b40:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b4e:	4353      	muls	r3, r2
    if (count-- == 0U)
 8002b50:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002b54:	d32b      	bcc.n	8002bae <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8002b56:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002b58:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002b5c:	d0f8      	beq.n	8002b50 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002b5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b60:	075a      	lsls	r2, r3, #29
 8002b62:	d503      	bpl.n	8002b6c <SDMMC_CmdSetRelAdd+0x50>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002b64:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002b66:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8002b68:	b007      	add	sp, #28
 8002b6a:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b6e:	f011 0101 	ands.w	r1, r1, #1
 8002b72:	d001      	beq.n	8002b78 <SDMMC_CmdSetRelAdd+0x5c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002b74:	2001      	movs	r0, #1
 8002b76:	e7f6      	b.n	8002b66 <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDIOx->RESPCMD);
 8002b78:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d119      	bne.n	8002bb4 <SDMMC_CmdSetRelAdd+0x98>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8002b80:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002b84:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002b86:	4620      	mov	r0, r4
 8002b88:	f7ff fd9b 	bl	80026c2 <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8002b8c:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8002b90:	d103      	bne.n	8002b9a <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8002b92:	0c00      	lsrs	r0, r0, #16
 8002b94:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 8002b96:	4618      	mov	r0, r3
 8002b98:	e7e6      	b.n	8002b68 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8002b9a:	0443      	lsls	r3, r0, #17
 8002b9c:	d40c      	bmi.n	8002bb8 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002b9e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8002ba2:	bf14      	ite	ne
 8002ba4:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8002ba8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8002bac:	e7dc      	b.n	8002b68 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 8002bae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002bb2:	e7d9      	b.n	8002b68 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	e7d7      	b.n	8002b68 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002bb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002bbc:	e7d4      	b.n	8002b68 <SDMMC_CmdSetRelAdd+0x4c>
 8002bbe:	bf00      	nop
 8002bc0:	2000000c 	.word	0x2000000c

08002bc4 <SDMMC_CmdSendStatus>:
{
 8002bc4:	b530      	push	{r4, r5, lr}
 8002bc6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002bc8:	2340      	movs	r3, #64	; 0x40
 8002bca:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002bcc:	2300      	movs	r3, #0
{
 8002bce:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002bd0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002bd2:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002bd4:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002bd6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bdc:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002bde:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002be0:	f7ff fd5c 	bl	800269c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8002be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be8:	4621      	mov	r1, r4
 8002bea:	4628      	mov	r0, r5
 8002bec:	f7ff fd74 	bl	80026d8 <SDMMC_GetCmdResp1>
}
 8002bf0:	b007      	add	sp, #28
 8002bf2:	bd30      	pop	{r4, r5, pc}

08002bf4 <SDMMC_CmdSwitch>:
{
 8002bf4:	b530      	push	{r4, r5, lr}
 8002bf6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002bf8:	2340      	movs	r3, #64	; 0x40
 8002bfa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002bfc:	2300      	movs	r3, #0
{
 8002bfe:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8002c00:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8002c02:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c04:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c06:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c0c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8002c0e:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c10:	f7ff fd44 	bl	800269c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SWITCH, SDIO_CMDTIMEOUT);
 8002c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c18:	4621      	mov	r1, r4
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	f7ff fd5c 	bl	80026d8 <SDMMC_GetCmdResp1>
}
 8002c20:	b007      	add	sp, #28
 8002c22:	bd30      	pop	{r4, r5, pc}

08002c24 <SDMMC_CmdBusWidth>:
 8002c24:	f7ff bfe6 	b.w	8002bf4 <SDMMC_CmdSwitch>

08002c28 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <disk_status+0x10>)
 8002c2a:	181a      	adds	r2, r3, r0
 8002c2c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002c30:	7a10      	ldrb	r0, [r2, #8]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4718      	bx	r3
 8002c38:	20000054 	.word	0x20000054

08002c3c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <disk_initialize+0x1c>)
 8002c3e:	5c1a      	ldrb	r2, [r3, r0]
 8002c40:	b942      	cbnz	r2, 8002c54 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8002c42:	2201      	movs	r2, #1
 8002c44:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002c46:	181a      	adds	r2, r3, r0
 8002c48:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002c4c:	7a10      	ldrb	r0, [r2, #8]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4718      	bx	r3
  }
  return stat;
}
 8002c54:	2000      	movs	r0, #0
 8002c56:	4770      	bx	lr
 8002c58:	20000054 	.word	0x20000054

08002c5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002c5c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002c5e:	4c05      	ldr	r4, [pc, #20]	; (8002c74 <disk_read+0x18>)
 8002c60:	1825      	adds	r5, r4, r0
 8002c62:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8002c66:	6860      	ldr	r0, [r4, #4]
 8002c68:	6884      	ldr	r4, [r0, #8]
 8002c6a:	7a28      	ldrb	r0, [r5, #8]
 8002c6c:	46a4      	mov	ip, r4
  return res;
}
 8002c6e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002c70:	4760      	bx	ip
 8002c72:	bf00      	nop
 8002c74:	20000054 	.word	0x20000054

08002c78 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002c78:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002c7a:	4c05      	ldr	r4, [pc, #20]	; (8002c90 <disk_write+0x18>)
 8002c7c:	1825      	adds	r5, r4, r0
 8002c7e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8002c82:	6860      	ldr	r0, [r4, #4]
 8002c84:	68c4      	ldr	r4, [r0, #12]
 8002c86:	7a28      	ldrb	r0, [r5, #8]
 8002c88:	46a4      	mov	ip, r4
  return res;
}
 8002c8a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002c8c:	4760      	bx	ip
 8002c8e:	bf00      	nop
 8002c90:	20000054 	.word	0x20000054

08002c94 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <disk_ioctl+0x18>)
{
 8002c96:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002c98:	181c      	adds	r4, r3, r0
 8002c9a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002c9e:	7a20      	ldrb	r0, [r4, #8]
 8002ca0:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8002ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	4718      	bx	r3
 8002caa:	bf00      	nop
 8002cac:	20000054 	.word	0x20000054

08002cb0 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8002cb0:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8002cb2:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8002cb4:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8002cb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8002cba:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002cbe:	4770      	bx	lr

08002cc0 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8002cc0:	0a0b      	lsrs	r3, r1, #8
 8002cc2:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002cc4:	7043      	strb	r3, [r0, #1]
 8002cc6:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8002cc8:	0e09      	lsrs	r1, r1, #24
 8002cca:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8002ccc:	70c1      	strb	r1, [r0, #3]
 8002cce:	4770      	bx	lr

08002cd0 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002cd0:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8002cd2:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8002cd6:	4290      	cmp	r0, r2
 8002cd8:	d1fb      	bne.n	8002cd2 <mem_set+0x2>
}
 8002cda:	4770      	bx	lr

08002cdc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002cdc:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <chk_lock+0x58>)
 8002cde:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002ce0:	2500      	movs	r5, #0
 8002ce2:	462a      	mov	r2, r5
 8002ce4:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 8002ce6:	681e      	ldr	r6, [r3, #0]
 8002ce8:	b1a6      	cbz	r6, 8002d14 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002cea:	6807      	ldr	r7, [r0, #0]
 8002cec:	42be      	cmp	r6, r7
 8002cee:	d112      	bne.n	8002d16 <chk_lock+0x3a>
 8002cf0:	685f      	ldr	r7, [r3, #4]
 8002cf2:	6886      	ldr	r6, [r0, #8]
 8002cf4:	42b7      	cmp	r7, r6
 8002cf6:	d10e      	bne.n	8002d16 <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 8002cf8:	689f      	ldr	r7, [r3, #8]
 8002cfa:	6946      	ldr	r6, [r0, #20]
 8002cfc:	42b7      	cmp	r7, r6
 8002cfe:	d10a      	bne.n	8002d16 <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002d00:	b9b1      	cbnz	r1, 8002d30 <chk_lock+0x54>
 8002d02:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8002d06:	8993      	ldrh	r3, [r2, #12]
 8002d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0c:	bf14      	ite	ne
 8002d0e:	2000      	movne	r0, #0
 8002d10:	2010      	moveq	r0, #16
 8002d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8002d14:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002d16:	3201      	adds	r2, #1
 8002d18:	2a02      	cmp	r2, #2
 8002d1a:	f103 0310 	add.w	r3, r3, #16
 8002d1e:	d1e2      	bne.n	8002ce6 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002d20:	b10d      	cbz	r5, 8002d26 <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002d22:	2000      	movs	r0, #0
 8002d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002d26:	2902      	cmp	r1, #2
 8002d28:	bf0c      	ite	eq
 8002d2a:	2000      	moveq	r0, #0
 8002d2c:	2012      	movne	r0, #18
 8002d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002d30:	2010      	movs	r0, #16
 8002d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d34:	20000030 	.word	0x20000030

08002d38 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002d38:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <inc_lock+0x74>)
 8002d3a:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8002d3c:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002d3e:	2300      	movs	r3, #0
 8002d40:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 8002d42:	6814      	ldr	r4, [r2, #0]
 8002d44:	42ac      	cmp	r4, r5
 8002d46:	d107      	bne.n	8002d58 <inc_lock+0x20>
 8002d48:	6857      	ldr	r7, [r2, #4]
 8002d4a:	6884      	ldr	r4, [r0, #8]
 8002d4c:	42a7      	cmp	r7, r4
 8002d4e:	d103      	bne.n	8002d58 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 8002d50:	6897      	ldr	r7, [r2, #8]
 8002d52:	6944      	ldr	r4, [r0, #20]
 8002d54:	42a7      	cmp	r7, r4
 8002d56:	d01d      	beq.n	8002d94 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002d58:	3301      	adds	r3, #1
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	f102 0210 	add.w	r2, r2, #16
 8002d60:	d1ef      	bne.n	8002d42 <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002d62:	6833      	ldr	r3, [r6, #0]
 8002d64:	b113      	cbz	r3, 8002d6c <inc_lock+0x34>
 8002d66:	6933      	ldr	r3, [r6, #16]
 8002d68:	b9eb      	cbnz	r3, 8002da6 <inc_lock+0x6e>
 8002d6a:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8002d6c:	011c      	lsls	r4, r3, #4
 8002d6e:	1932      	adds	r2, r6, r4
 8002d70:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 8002d72:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 8002d74:	6940      	ldr	r0, [r0, #20]
 8002d76:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8002d78:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8002d7a:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8002d7c:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002d7e:	b979      	cbnz	r1, 8002da0 <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002d80:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8002d84:	8992      	ldrh	r2, [r2, #12]
 8002d86:	3201      	adds	r2, #1
 8002d88:	b292      	uxth	r2, r2
 8002d8a:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 8002d8e:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002d90:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 8002d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002d94:	2900      	cmp	r1, #0
 8002d96:	d0f3      	beq.n	8002d80 <inc_lock+0x48>
 8002d98:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8002d9c:	8992      	ldrh	r2, [r2, #12]
 8002d9e:	b912      	cbnz	r2, 8002da6 <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002da4:	e7f1      	b.n	8002d8a <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002da6:	2000      	movs	r0, #0
 8002da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000030 	.word	0x20000030

08002db0 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002db0:	3801      	subs	r0, #1
 8002db2:	2801      	cmp	r0, #1
 8002db4:	d80e      	bhi.n	8002dd4 <dec_lock+0x24>
		n = Files[i].ctr;
 8002db6:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <dec_lock+0x2c>)
 8002db8:	0103      	lsls	r3, r0, #4
 8002dba:	18d1      	adds	r1, r2, r3
 8002dbc:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 8002dbe:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8002dc2:	b280      	uxth	r0, r0
 8002dc4:	b108      	cbz	r0, 8002dca <dec_lock+0x1a>
 8002dc6:	1e48      	subs	r0, r1, #1
 8002dc8:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 8002dca:	18d1      	adds	r1, r2, r3
 8002dcc:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002dce:	b918      	cbnz	r0, 8002dd8 <dec_lock+0x28>
 8002dd0:	50d0      	str	r0, [r2, r3]
 8002dd2:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002dd4:	2002      	movs	r0, #2
 8002dd6:	4770      	bx	lr
		res = FR_OK;
 8002dd8:	2000      	movs	r0, #0
	}
	return res;
}
 8002dda:	4770      	bx	lr
 8002ddc:	20000030 	.word	0x20000030

08002de0 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002de0:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;
 8002de2:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002de4:	3b02      	subs	r3, #2
 8002de6:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8002de8:	bf3d      	ittte	cc
 8002dea:	8943      	ldrhcc	r3, [r0, #10]
 8002dec:	6b00      	ldrcc	r0, [r0, #48]	; 0x30
 8002dee:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002df2:	2000      	movcs	r0, #0
}
 8002df4:	4770      	bx	lr

08002df6 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002df6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 8002df8:	b510      	push	{r4, lr}
	FATFS *fs = fp->obj.fs;
 8002dfa:	6804      	ldr	r4, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8002dfc:	3204      	adds	r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8002dfe:	89a3      	ldrh	r3, [r4, #12]
 8002e00:	fbb1 f1f3 	udiv	r1, r1, r3
 8002e04:	8963      	ldrh	r3, [r4, #10]
 8002e06:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002e0a:	6810      	ldr	r0, [r2, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8002e0c:	b130      	cbz	r0, 8002e1c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8002e0e:	4281      	cmp	r1, r0
 8002e10:	d302      	bcc.n	8002e18 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8002e12:	1a09      	subs	r1, r1, r0
 8002e14:	3208      	adds	r2, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002e16:	e7f8      	b.n	8002e0a <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8002e18:	6850      	ldr	r0, [r2, #4]
 8002e1a:	4408      	add	r0, r1
}
 8002e1c:	bd10      	pop	{r4, pc}

08002e1e <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002e1e:	6802      	ldr	r2, [r0, #0]
{
 8002e20:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8002e22:	b152      	cbz	r2, 8002e3a <get_ldnumber+0x1c>
 8002e24:	4611      	mov	r1, r2
 8002e26:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002e28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e2c:	2c20      	cmp	r4, #32
 8002e2e:	d90c      	bls.n	8002e4a <get_ldnumber+0x2c>
 8002e30:	2c3a      	cmp	r4, #58	; 0x3a
 8002e32:	d1f8      	bne.n	8002e26 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8002e34:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002e36:	428b      	cmp	r3, r1
 8002e38:	d002      	beq.n	8002e40 <get_ldnumber+0x22>
	int vol = -1;
 8002e3a:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8002e3e:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002e40:	7812      	ldrb	r2, [r2, #0]
 8002e42:	2a30      	cmp	r2, #48	; 0x30
 8002e44:	d1f9      	bne.n	8002e3a <get_ldnumber+0x1c>
					*path = ++tt;
 8002e46:	3301      	adds	r3, #1
 8002e48:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	bd10      	pop	{r4, pc}

08002e4e <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002e4e:	3801      	subs	r0, #1
 8002e50:	440a      	add	r2, r1
			*d++ = *s++;
 8002e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e56:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8002e5a:	4291      	cmp	r1, r2
 8002e5c:	d1f9      	bne.n	8002e52 <mem_cpy.part.0+0x4>
}
 8002e5e:	4770      	bx	lr

08002e60 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8002e60:	7eca      	ldrb	r2, [r1, #27]
 8002e62:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8002e64:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8002e66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8002e6a:	bf01      	itttt	eq
 8002e6c:	7d48      	ldrbeq	r0, [r1, #21]
 8002e6e:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8002e70:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8002e74:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	4770      	bx	lr

08002e7c <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8002e7c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8002e80:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8002e82:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8002e84:	7803      	ldrb	r3, [r0, #0]
 8002e86:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002e88:	bf01      	itttt	eq
 8002e8a:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8002e8c:	750a      	strbeq	r2, [r1, #20]
 8002e8e:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8002e90:	754a      	strbeq	r2, [r1, #21]
 8002e92:	4770      	bx	lr

08002e94 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8002e96:	6b45      	ldr	r5, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002e98:	f100 0738 	add.w	r7, r0, #56	; 0x38
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8002e9c:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	462a      	mov	r2, r5
 8002ea2:	4639      	mov	r1, r7
 8002ea4:	7840      	ldrb	r0, [r0, #1]
 8002ea6:	f7ff fee7 	bl	8002c78 <disk_write>
 8002eaa:	b9a0      	cbnz	r0, 8002ed6 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002eac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002eae:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
 8002eb0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002eb2:	1aeb      	subs	r3, r5, r3
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d301      	bcc.n	8002ebc <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 8002eb8:	2000      	movs	r0, #0
 8002eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002ebc:	78a6      	ldrb	r6, [r4, #2]
 8002ebe:	2e01      	cmp	r6, #1
 8002ec0:	d9fa      	bls.n	8002eb8 <sync_window.part.4+0x24>
					wsect += fs->fsize;
 8002ec2:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8002ec4:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8002ec6:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8002ec8:	462a      	mov	r2, r5
 8002eca:	2301      	movs	r3, #1
 8002ecc:	4639      	mov	r1, r7
 8002ece:	f7ff fed3 	bl	8002c78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002ed2:	3e01      	subs	r6, #1
 8002ed4:	e7f3      	b.n	8002ebe <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 8002ed6:	2001      	movs	r0, #1
}
 8002ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002eda <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002eda:	78c3      	ldrb	r3, [r0, #3]
 8002edc:	b10b      	cbz	r3, 8002ee2 <sync_window+0x8>
 8002ede:	f7ff bfd9 	b.w	8002e94 <sync_window.part.4>
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	4770      	bx	lr

08002ee6 <sync_fs>:
{
 8002ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee8:	4604      	mov	r4, r0
	res = sync_window(fs);
 8002eea:	f7ff fff6 	bl	8002eda <sync_window>
 8002eee:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8002ef0:	2800      	cmp	r0, #0
 8002ef2:	d141      	bne.n	8002f78 <sync_fs+0x92>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002ef4:	7823      	ldrb	r3, [r4, #0]
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d136      	bne.n	8002f68 <sync_fs+0x82>
 8002efa:	7927      	ldrb	r7, [r4, #4]
 8002efc:	2f01      	cmp	r7, #1
 8002efe:	d133      	bne.n	8002f68 <sync_fs+0x82>
			mem_set(fs->win, 0, SS(fs));
 8002f00:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8002f04:	4601      	mov	r1, r0
 8002f06:	89a2      	ldrh	r2, [r4, #12]
 8002f08:	4630      	mov	r0, r6
 8002f0a:	f7ff fee1 	bl	8002cd0 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8002f0e:	2355      	movs	r3, #85	; 0x55
 8002f10:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
	*ptr++ = (BYTE)val;
 8002f14:	23aa      	movs	r3, #170	; 0xaa
 8002f16:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
	*ptr++ = (BYTE)val; val >>= 8;
 8002f1a:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8002f1c:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8002f1e:	2172      	movs	r1, #114	; 0x72
 8002f20:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 8002f24:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	*ptr++ = (BYTE)val; val >>= 8;
 8002f28:	2361      	movs	r3, #97	; 0x61
 8002f2a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	*ptr++ = (BYTE)val;
 8002f2e:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
	*ptr++ = (BYTE)val; val >>= 8;
 8002f32:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
	*ptr++ = (BYTE)val;
 8002f36:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 8002f3a:	f884 121c 	strb.w	r1, [r4, #540]	; 0x21c
	*ptr++ = (BYTE)val; val >>= 8;
 8002f3e:	f884 121d 	strb.w	r1, [r4, #541]	; 0x21d
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8002f42:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8002f46:	69a1      	ldr	r1, [r4, #24]
 8002f48:	f7ff feba 	bl	8002cc0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002f4c:	6961      	ldr	r1, [r4, #20]
 8002f4e:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8002f52:	f7ff feb5 	bl	8002cc0 <st_dword>
			fs->winsect = fs->volbase + 1;
 8002f56:	6a62      	ldr	r2, [r4, #36]	; 0x24
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8002f58:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8002f5a:	3201      	adds	r2, #1
 8002f5c:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8002f5e:	463b      	mov	r3, r7
 8002f60:	4631      	mov	r1, r6
 8002f62:	f7ff fe89 	bl	8002c78 <disk_write>
			fs->fsi_flag = 0;
 8002f66:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8002f68:	2200      	movs	r2, #0
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	7860      	ldrb	r0, [r4, #1]
 8002f6e:	f7ff fe91 	bl	8002c94 <disk_ioctl>
 8002f72:	3000      	adds	r0, #0
 8002f74:	bf18      	it	ne
 8002f76:	2001      	movne	r0, #1
}
 8002f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f7a <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002f7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f7c:	428b      	cmp	r3, r1
{
 8002f7e:	b570      	push	{r4, r5, r6, lr}
 8002f80:	4606      	mov	r6, r0
 8002f82:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002f84:	d012      	beq.n	8002fac <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8002f86:	f7ff ffa8 	bl	8002eda <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002f8a:	4604      	mov	r4, r0
 8002f8c:	b960      	cbnz	r0, 8002fa8 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002f8e:	462a      	mov	r2, r5
 8002f90:	2301      	movs	r3, #1
 8002f92:	f106 0138 	add.w	r1, r6, #56	; 0x38
 8002f96:	7870      	ldrb	r0, [r6, #1]
 8002f98:	f7ff fe60 	bl	8002c5c <disk_read>
 8002f9c:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8002f9e:	bf1c      	itt	ne
 8002fa0:	f04f 35ff 	movne.w	r5, #4294967295
 8002fa4:	2401      	movne	r4, #1
			fs->winsect = sector;
 8002fa6:	6375      	str	r5, [r6, #52]	; 0x34
}
 8002fa8:	4620      	mov	r0, r4
 8002faa:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8002fac:	2400      	movs	r4, #0
 8002fae:	e7fb      	b.n	8002fa8 <move_window+0x2e>

08002fb0 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002fb0:	2300      	movs	r3, #0
{
 8002fb2:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002fb4:	70c3      	strb	r3, [r0, #3]
 8002fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fba:	6343      	str	r3, [r0, #52]	; 0x34
{
 8002fbc:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002fbe:	f7ff ffdc 	bl	8002f7a <move_window>
 8002fc2:	bb30      	cbnz	r0, 8003012 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8002fc4:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8002fc8:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
 8002fcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002fd0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d11e      	bne.n	8003016 <check_fs+0x66>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8002fd8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002fdc:	2be9      	cmp	r3, #233	; 0xe9
 8002fde:	d005      	beq.n	8002fec <check_fs+0x3c>
 8002fe0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fe2:	4a10      	ldr	r2, [pc, #64]	; (8003024 <check_fs+0x74>)
 8002fe4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d116      	bne.n	800301a <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8002fec:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8002ff0:	f7ff fe5e 	bl	8002cb0 <ld_dword>
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <check_fs+0x78>)
 8002ff6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002ffa:	4298      	cmp	r0, r3
 8002ffc:	d00f      	beq.n	800301e <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8002ffe:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 8003002:	f7ff fe55 	bl	8002cb0 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <check_fs+0x7c>)
 8003008:	4298      	cmp	r0, r3
 800300a:	bf14      	ite	ne
 800300c:	2002      	movne	r0, #2
 800300e:	2000      	moveq	r0, #0
 8003010:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003012:	2004      	movs	r0, #4
 8003014:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003016:	2003      	movs	r0, #3
 8003018:	bd10      	pop	{r4, pc}
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800301a:	2002      	movs	r0, #2
 800301c:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800301e:	2000      	movs	r0, #0
}
 8003020:	bd10      	pop	{r4, pc}
 8003022:	bf00      	nop
 8003024:	009000eb 	.word	0x009000eb
 8003028:	00544146 	.word	0x00544146
 800302c:	33544146 	.word	0x33544146

08003030 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003030:	2901      	cmp	r1, #1
{
 8003032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003036:	4604      	mov	r4, r0
 8003038:	460d      	mov	r5, r1
 800303a:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800303c:	f240 808a 	bls.w	8003154 <put_fat+0x124>
 8003040:	69c3      	ldr	r3, [r0, #28]
 8003042:	4299      	cmp	r1, r3
 8003044:	f080 8086 	bcs.w	8003154 <put_fat+0x124>
		switch (fs->fs_type) {
 8003048:	7803      	ldrb	r3, [r0, #0]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d049      	beq.n	80030e2 <put_fat+0xb2>
 800304e:	2b03      	cmp	r3, #3
 8003050:	d060      	beq.n	8003114 <put_fat+0xe4>
 8003052:	2b01      	cmp	r3, #1
 8003054:	d17e      	bne.n	8003154 <put_fat+0x124>
			bc = (UINT)clst; bc += bc / 2;
 8003056:	eb01 0a51 	add.w	sl, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800305a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800305c:	8983      	ldrh	r3, [r0, #12]
 800305e:	fbba f3f3 	udiv	r3, sl, r3
 8003062:	4419      	add	r1, r3
 8003064:	f7ff ff89 	bl	8002f7a <move_window>
 8003068:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 800306a:	bb78      	cbnz	r0, 80030cc <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 800306c:	89a3      	ldrh	r3, [r4, #12]
 800306e:	fbba f2f3 	udiv	r2, sl, r3
 8003072:	f104 0838 	add.w	r8, r4, #56	; 0x38
 8003076:	fb03 a212 	mls	r2, r3, r2, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800307a:	f015 0501 	ands.w	r5, r5, #1
 800307e:	bf1f      	itttt	ne
 8003080:	f818 3002 	ldrbne.w	r3, [r8, r2]
 8003084:	f003 010f 	andne.w	r1, r3, #15
 8003088:	013b      	lslne	r3, r7, #4
 800308a:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 800308e:	bf14      	ite	ne
 8003090:	430b      	orrne	r3, r1
 8003092:	b2fb      	uxtbeq	r3, r7
 8003094:	f808 3002 	strb.w	r3, [r8, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003098:	6aa1      	ldr	r1, [r4, #40]	; 0x28
			fs->wflag = 1;
 800309a:	2301      	movs	r3, #1
 800309c:	70e3      	strb	r3, [r4, #3]
			p = fs->win + bc++ % SS(fs);
 800309e:	f10a 0901 	add.w	r9, sl, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80030a2:	89a3      	ldrh	r3, [r4, #12]
 80030a4:	fbb9 f3f3 	udiv	r3, r9, r3
 80030a8:	4620      	mov	r0, r4
 80030aa:	4419      	add	r1, r3
 80030ac:	f7ff ff65 	bl	8002f7a <move_window>
			if (res != FR_OK) break;
 80030b0:	4606      	mov	r6, r0
 80030b2:	b958      	cbnz	r0, 80030cc <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 80030b4:	89a3      	ldrh	r3, [r4, #12]
 80030b6:	fbb9 f2f3 	udiv	r2, r9, r3
 80030ba:	fb03 9212 	mls	r2, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80030be:	b145      	cbz	r5, 80030d2 <put_fat+0xa2>
 80030c0:	f3c7 1707 	ubfx	r7, r7, #4, #8
 80030c4:	f808 7002 	strb.w	r7, [r8, r2]
			fs->wflag = 1;
 80030c8:	2301      	movs	r3, #1
 80030ca:	70e3      	strb	r3, [r4, #3]
}
 80030cc:	4630      	mov	r0, r6
 80030ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80030d2:	f818 3002 	ldrb.w	r3, [r8, r2]
 80030d6:	f3c7 2703 	ubfx	r7, r7, #8, #4
 80030da:	f023 030f 	bic.w	r3, r3, #15
 80030de:	431f      	orrs	r7, r3
 80030e0:	e7f0      	b.n	80030c4 <put_fat+0x94>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80030e2:	8983      	ldrh	r3, [r0, #12]
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ea:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80030ec:	4419      	add	r1, r3
 80030ee:	f7ff ff44 	bl	8002f7a <move_window>
			if (res != FR_OK) break;
 80030f2:	4606      	mov	r6, r0
 80030f4:	2800      	cmp	r0, #0
 80030f6:	d1e9      	bne.n	80030cc <put_fat+0x9c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80030f8:	89a1      	ldrh	r1, [r4, #12]
 80030fa:	006d      	lsls	r5, r5, #1
 80030fc:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8003100:	fbb5 f3f1 	udiv	r3, r5, r1
 8003104:	fb01 5513 	mls	r5, r1, r3, r5
 8003108:	1953      	adds	r3, r2, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800310a:	5557      	strb	r7, [r2, r5]
 800310c:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8003110:	705f      	strb	r7, [r3, #1]
 8003112:	e7d9      	b.n	80030c8 <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003114:	8983      	ldrh	r3, [r0, #12]
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	fbb1 f3f3 	udiv	r3, r1, r3
 800311c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800311e:	4419      	add	r1, r3
 8003120:	f7ff ff2b 	bl	8002f7a <move_window>
			if (res != FR_OK) break;
 8003124:	4606      	mov	r6, r0
 8003126:	2800      	cmp	r0, #0
 8003128:	d1d0      	bne.n	80030cc <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800312a:	89a1      	ldrh	r1, [r4, #12]
 800312c:	00ad      	lsls	r5, r5, #2
 800312e:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8003132:	fbb5 f2f1 	udiv	r2, r5, r1
 8003136:	fb01 5512 	mls	r5, r1, r2, r5
 800313a:	441d      	add	r5, r3
 800313c:	4628      	mov	r0, r5
 800313e:	f7ff fdb7 	bl	8002cb0 <ld_dword>
 8003142:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8003146:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800314a:	4339      	orrs	r1, r7
 800314c:	4628      	mov	r0, r5
 800314e:	f7ff fdb7 	bl	8002cc0 <st_dword>
 8003152:	e7b9      	b.n	80030c8 <put_fat+0x98>
	FRESULT res = FR_INT_ERR;
 8003154:	2602      	movs	r6, #2
 8003156:	e7b9      	b.n	80030cc <put_fat+0x9c>

08003158 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003158:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800315a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315c:	4604      	mov	r4, r0
 800315e:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003160:	d968      	bls.n	8003234 <get_fat.isra.8+0xdc>
 8003162:	69c3      	ldr	r3, [r0, #28]
 8003164:	4299      	cmp	r1, r3
 8003166:	d265      	bcs.n	8003234 <get_fat.isra.8+0xdc>
		switch (fs->fs_type) {
 8003168:	7803      	ldrb	r3, [r0, #0]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d032      	beq.n	80031d4 <get_fat.isra.8+0x7c>
 800316e:	2b03      	cmp	r3, #3
 8003170:	d048      	beq.n	8003204 <get_fat.isra.8+0xac>
 8003172:	2b01      	cmp	r3, #1
 8003174:	d15e      	bne.n	8003234 <get_fat.isra.8+0xdc>
			bc = (UINT)clst; bc += bc / 2;
 8003176:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800317a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800317c:	8983      	ldrh	r3, [r0, #12]
 800317e:	fbb5 f3f3 	udiv	r3, r5, r3
 8003182:	4419      	add	r1, r3
 8003184:	f7ff fef9 	bl	8002f7a <move_window>
 8003188:	b110      	cbz	r0, 8003190 <get_fat.isra.8+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800318a:	f04f 30ff 	mov.w	r0, #4294967295
 800318e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8003190:	89a1      	ldrh	r1, [r4, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003192:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			wc = fs->win[bc++ % SS(fs)];
 8003194:	fbb5 f2f1 	udiv	r2, r5, r1
 8003198:	fb01 5212 	mls	r2, r1, r2, r5
 800319c:	4422      	add	r2, r4
 800319e:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80031a0:	4620      	mov	r0, r4
 80031a2:	fbb7 f1f1 	udiv	r1, r7, r1
 80031a6:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];
 80031a8:	f892 5038 	ldrb.w	r5, [r2, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80031ac:	f7ff fee5 	bl	8002f7a <move_window>
 80031b0:	2800      	cmp	r0, #0
 80031b2:	d1ea      	bne.n	800318a <get_fat.isra.8+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 80031b4:	89a2      	ldrh	r2, [r4, #12]
 80031b6:	fbb7 f3f2 	udiv	r3, r7, r2
 80031ba:	fb02 7313 	mls	r3, r2, r3, r7
 80031be:	441c      	add	r4, r3
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80031c0:	07f3      	lsls	r3, r6, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80031c2:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 80031c6:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80031ca:	bf4c      	ite	mi
 80031cc:	0900      	lsrmi	r0, r0, #4
 80031ce:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80031d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80031d4:	8983      	ldrh	r3, [r0, #12]
 80031d6:	085b      	lsrs	r3, r3, #1
 80031d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031dc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80031de:	4419      	add	r1, r3
 80031e0:	f7ff fecb 	bl	8002f7a <move_window>
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d1d0      	bne.n	800318a <get_fat.isra.8+0x32>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80031e8:	89a1      	ldrh	r1, [r4, #12]
 80031ea:	0076      	lsls	r6, r6, #1
 80031ec:	f104 0238 	add.w	r2, r4, #56	; 0x38
 80031f0:	fbb6 f3f1 	udiv	r3, r6, r1
 80031f4:	fb01 6613 	mls	r6, r1, r3, r6
 80031f8:	1993      	adds	r3, r2, r6
	rv = rv << 8 | ptr[0];
 80031fa:	5d90      	ldrb	r0, [r2, r6]
 80031fc:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80031fe:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003204:	8983      	ldrh	r3, [r0, #12]
 8003206:	089b      	lsrs	r3, r3, #2
 8003208:	fbb1 f3f3 	udiv	r3, r1, r3
 800320c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800320e:	4419      	add	r1, r3
 8003210:	f7ff feb3 	bl	8002f7a <move_window>
 8003214:	2800      	cmp	r0, #0
 8003216:	d1b8      	bne.n	800318a <get_fat.isra.8+0x32>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003218:	89a2      	ldrh	r2, [r4, #12]
 800321a:	00b6      	lsls	r6, r6, #2
 800321c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8003220:	fbb6 f3f2 	udiv	r3, r6, r2
 8003224:	fb02 6613 	mls	r6, r2, r3, r6
 8003228:	4430      	add	r0, r6
 800322a:	f7ff fd41 	bl	8002cb0 <ld_dword>
 800322e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8003232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8003234:	2001      	movs	r0, #1
}
 8003236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003238 <create_chain>:
{
 8003238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800323c:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800323e:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8003240:	460f      	mov	r7, r1
 8003242:	b971      	cbnz	r1, 8003262 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003244:	696e      	ldr	r6, [r5, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003246:	b1f6      	cbz	r6, 8003286 <create_chain+0x4e>
 8003248:	69eb      	ldr	r3, [r5, #28]
 800324a:	429e      	cmp	r6, r3
 800324c:	bf28      	it	cs
 800324e:	2601      	movcs	r6, #1
 8003250:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003252:	69eb      	ldr	r3, [r5, #28]
			ncl++;							/* Next cluster */
 8003254:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003256:	429c      	cmp	r4, r3
 8003258:	d318      	bcc.n	800328c <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 800325a:	2e01      	cmp	r6, #1
 800325c:	d815      	bhi.n	800328a <create_chain+0x52>
 800325e:	2400      	movs	r4, #0
 8003260:	e009      	b.n	8003276 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003262:	4628      	mov	r0, r5
 8003264:	f7ff ff78 	bl	8003158 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003268:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800326a:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800326c:	d937      	bls.n	80032de <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800326e:	1c43      	adds	r3, r0, #1
 8003270:	d104      	bne.n	800327c <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003272:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003276:	4620      	mov	r0, r4
 8003278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800327c:	69eb      	ldr	r3, [r5, #28]
 800327e:	4298      	cmp	r0, r3
 8003280:	d3f9      	bcc.n	8003276 <create_chain+0x3e>
 8003282:	463e      	mov	r6, r7
 8003284:	e7e4      	b.n	8003250 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003286:	2601      	movs	r6, #1
 8003288:	e7e2      	b.n	8003250 <create_chain+0x18>
				ncl = 2;
 800328a:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800328c:	4621      	mov	r1, r4
 800328e:	f8d8 0000 	ldr.w	r0, [r8]
 8003292:	f7ff ff61 	bl	8003158 <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 8003296:	b130      	cbz	r0, 80032a6 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003298:	2801      	cmp	r0, #1
 800329a:	d020      	beq.n	80032de <create_chain+0xa6>
 800329c:	3001      	adds	r0, #1
 800329e:	d0e8      	beq.n	8003272 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 80032a0:	42b4      	cmp	r4, r6
 80032a2:	d1d6      	bne.n	8003252 <create_chain+0x1a>
 80032a4:	e7db      	b.n	800325e <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80032a6:	f04f 32ff 	mov.w	r2, #4294967295
 80032aa:	4621      	mov	r1, r4
 80032ac:	4628      	mov	r0, r5
 80032ae:	f7ff febf 	bl	8003030 <put_fat>
		if (res == FR_OK && clst != 0) {
 80032b2:	b990      	cbnz	r0, 80032da <create_chain+0xa2>
 80032b4:	b957      	cbnz	r7, 80032cc <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80032b6:	69ea      	ldr	r2, [r5, #28]
 80032b8:	69ab      	ldr	r3, [r5, #24]
		fs->last_clst = ncl;
 80032ba:	616c      	str	r4, [r5, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80032bc:	3a02      	subs	r2, #2
 80032be:	4293      	cmp	r3, r2
 80032c0:	d90f      	bls.n	80032e2 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 80032c2:	792b      	ldrb	r3, [r5, #4]
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	712b      	strb	r3, [r5, #4]
 80032ca:	e7d4      	b.n	8003276 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80032cc:	4622      	mov	r2, r4
 80032ce:	4639      	mov	r1, r7
 80032d0:	4628      	mov	r0, r5
 80032d2:	f7ff fead 	bl	8003030 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80032d6:	2800      	cmp	r0, #0
 80032d8:	d0ed      	beq.n	80032b6 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80032da:	2801      	cmp	r0, #1
 80032dc:	d0c9      	beq.n	8003272 <create_chain+0x3a>
 80032de:	2401      	movs	r4, #1
 80032e0:	e7c9      	b.n	8003276 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80032e2:	3b01      	subs	r3, #1
 80032e4:	61ab      	str	r3, [r5, #24]
 80032e6:	e7ec      	b.n	80032c2 <create_chain+0x8a>

080032e8 <remove_chain>:
{
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80032ec:	2d01      	cmp	r5, #1
{
 80032ee:	4607      	mov	r7, r0
 80032f0:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80032f2:	d801      	bhi.n	80032f8 <remove_chain+0x10>
 80032f4:	2002      	movs	r0, #2
 80032f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 80032f8:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80032fa:	69e3      	ldr	r3, [r4, #28]
 80032fc:	429d      	cmp	r5, r3
 80032fe:	d2f9      	bcs.n	80032f4 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003300:	b12a      	cbz	r2, 800330e <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003302:	f04f 32ff 	mov.w	r2, #4294967295
 8003306:	4620      	mov	r0, r4
 8003308:	f7ff fe92 	bl	8003030 <put_fat>
		if (res != FR_OK) return res;
 800330c:	bb08      	cbnz	r0, 8003352 <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800330e:	4629      	mov	r1, r5
 8003310:	6838      	ldr	r0, [r7, #0]
 8003312:	f7ff ff21 	bl	8003158 <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 8003316:	4606      	mov	r6, r0
 8003318:	b908      	cbnz	r0, 800331e <remove_chain+0x36>
	return FR_OK;
 800331a:	2000      	movs	r0, #0
 800331c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800331e:	2801      	cmp	r0, #1
 8003320:	d0e8      	beq.n	80032f4 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003322:	1c43      	adds	r3, r0, #1
 8003324:	d014      	beq.n	8003350 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003326:	2200      	movs	r2, #0
 8003328:	4629      	mov	r1, r5
 800332a:	4620      	mov	r0, r4
 800332c:	f7ff fe80 	bl	8003030 <put_fat>
			if (res != FR_OK) return res;
 8003330:	b978      	cbnz	r0, 8003352 <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003332:	69e2      	ldr	r2, [r4, #28]
 8003334:	69a3      	ldr	r3, [r4, #24]
 8003336:	1e91      	subs	r1, r2, #2
 8003338:	428b      	cmp	r3, r1
 800333a:	d205      	bcs.n	8003348 <remove_chain+0x60>
			fs->free_clst++;
 800333c:	3301      	adds	r3, #1
 800333e:	61a3      	str	r3, [r4, #24]
			fs->fsi_flag |= 1;
 8003340:	7923      	ldrb	r3, [r4, #4]
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003348:	4296      	cmp	r6, r2
 800334a:	4635      	mov	r5, r6
 800334c:	d3df      	bcc.n	800330e <remove_chain+0x26>
 800334e:	e7e4      	b.n	800331a <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003350:	2001      	movs	r0, #1
}
 8003352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003354 <unlock_fs>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8003354:	b140      	cbz	r0, 8003368 <unlock_fs+0x14>
 8003356:	f1a1 030b 	sub.w	r3, r1, #11
 800335a:	2b01      	cmp	r3, #1
 800335c:	d904      	bls.n	8003368 <unlock_fs+0x14>
 800335e:	290f      	cmp	r1, #15
 8003360:	d002      	beq.n	8003368 <unlock_fs+0x14>
		ff_rel_grant(fs->sobj);
 8003362:	6900      	ldr	r0, [r0, #16]
 8003364:	f000 be34 	b.w	8003fd0 <ff_rel_grant>
 8003368:	4770      	bx	lr

0800336a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800336a:	b538      	push	{r3, r4, r5, lr}
 800336c:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800336e:	4604      	mov	r4, r0
 8003370:	b1f0      	cbz	r0, 80033b0 <validate+0x46>
 8003372:	6803      	ldr	r3, [r0, #0]
 8003374:	b17b      	cbz	r3, 8003396 <validate+0x2c>
 8003376:	781a      	ldrb	r2, [r3, #0]
 8003378:	b1d2      	cbz	r2, 80033b0 <validate+0x46>
 800337a:	8881      	ldrh	r1, [r0, #4]
 800337c:	88da      	ldrh	r2, [r3, #6]
 800337e:	4291      	cmp	r1, r2
 8003380:	d116      	bne.n	80033b0 <validate+0x46>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8003382:	6918      	ldr	r0, [r3, #16]
 8003384:	f000 fe1b 	bl	8003fbe <ff_req_grant>
 8003388:	4603      	mov	r3, r0
 800338a:	b930      	cbnz	r0, 800339a <validate+0x30>
				res = FR_OK;
			} else {
				unlock_fs(obj->fs, FR_OK);
			}
		} else {
			res = FR_TIMEOUT;
 800338c:	200f      	movs	r0, #15
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800338e:	602b      	str	r3, [r5, #0]
	return res;
}
 8003390:	bd38      	pop	{r3, r4, r5, pc}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	e7fb      	b.n	800338e <validate+0x24>
 8003396:	2009      	movs	r0, #9
 8003398:	e7f9      	b.n	800338e <validate+0x24>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	7858      	ldrb	r0, [r3, #1]
 800339e:	f7ff fc43 	bl	8002c28 <disk_status>
 80033a2:	f010 0001 	ands.w	r0, r0, #1
 80033a6:	d0f4      	beq.n	8003392 <validate+0x28>
				unlock_fs(obj->fs, FR_OK);
 80033a8:	2100      	movs	r1, #0
 80033aa:	6820      	ldr	r0, [r4, #0]
 80033ac:	f7ff ffd2 	bl	8003354 <unlock_fs>
 80033b0:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80033b2:	2300      	movs	r3, #0
 80033b4:	e7eb      	b.n	800338e <validate+0x24>

080033b6 <dir_sdi.constprop.12>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80033b6:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80033b8:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 80033ba:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80033bc:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80033be:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 80033c0:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80033c2:	b992      	cbnz	r2, 80033ea <dir_sdi.constprop.12+0x34>
 80033c4:	7823      	ldrb	r3, [r4, #0]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <dir_sdi.constprop.12+0x18>
		clst = fs->dirbase;
 80033ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80033cc:	b973      	cbnz	r3, 80033ec <dir_sdi.constprop.12+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80033ce:	8923      	ldrh	r3, [r4, #8]
 80033d0:	b90b      	cbnz	r3, 80033d6 <dir_sdi.constprop.12+0x20>
 80033d2:	2002      	movs	r0, #2
 80033d4:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 80033d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033d8:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 80033da:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 80033dc:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f7      	beq.n	80033d2 <dir_sdi.constprop.12+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80033e2:	3438      	adds	r4, #56	; 0x38
 80033e4:	622c      	str	r4, [r5, #32]
	return FR_OK;
 80033e6:	2000      	movs	r0, #0
 80033e8:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80033ea:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80033ec:	8961      	ldrh	r1, [r4, #10]
 80033ee:	89a0      	ldrh	r0, [r4, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80033f0:	4348      	muls	r0, r1
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80033f2:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 80033f4:	d10c      	bne.n	8003410 <dir_sdi.constprop.12+0x5a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80033f6:	4611      	mov	r1, r2
 80033f8:	6828      	ldr	r0, [r5, #0]
 80033fa:	f7ff fead 	bl	8003158 <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80033fe:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003400:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003402:	d00b      	beq.n	800341c <dir_sdi.constprop.12+0x66>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003404:	2801      	cmp	r0, #1
 8003406:	d9e4      	bls.n	80033d2 <dir_sdi.constprop.12+0x1c>
 8003408:	69e3      	ldr	r3, [r4, #28]
 800340a:	4298      	cmp	r0, r3
 800340c:	d3f3      	bcc.n	80033f6 <dir_sdi.constprop.12+0x40>
 800340e:	e7e0      	b.n	80033d2 <dir_sdi.constprop.12+0x1c>
		dp->sect = clust2sect(fs, clst);
 8003410:	4619      	mov	r1, r3
 8003412:	4620      	mov	r0, r4
 8003414:	f7ff fce4 	bl	8002de0 <clust2sect>
 8003418:	61e8      	str	r0, [r5, #28]
 800341a:	e7de      	b.n	80033da <dir_sdi.constprop.12+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800341c:	2001      	movs	r0, #1
}
 800341e:	bd38      	pop	{r3, r4, r5, pc}

08003420 <dir_next>:
{
 8003420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003424:	69c3      	ldr	r3, [r0, #28]
{
 8003426:	4605      	mov	r5, r0
 8003428:	4688      	mov	r8, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800342a:	b1b3      	cbz	r3, 800345a <dir_next+0x3a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800342c:	6947      	ldr	r7, [r0, #20]
 800342e:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003430:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 8003434:	d211      	bcs.n	800345a <dir_next+0x3a>
	FATFS *fs = dp->obj.fs;
 8003436:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003438:	89a2      	ldrh	r2, [r4, #12]
 800343a:	fbb7 f0f2 	udiv	r0, r7, r2
 800343e:	fb02 7210 	mls	r2, r2, r0, r7
 8003442:	2a00      	cmp	r2, #0
 8003444:	d14f      	bne.n	80034e6 <dir_next+0xc6>
		if (!dp->clust) {		/* Static table */
 8003446:	69a9      	ldr	r1, [r5, #24]
		dp->sect++;				/* Next sector */
 8003448:	3301      	adds	r3, #1
 800344a:	61eb      	str	r3, [r5, #28]
		if (!dp->clust) {		/* Static table */
 800344c:	b941      	cbnz	r1, 8003460 <dir_next+0x40>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800344e:	8923      	ldrh	r3, [r4, #8]
 8003450:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8003454:	d847      	bhi.n	80034e6 <dir_next+0xc6>
				dp->sect = 0; return FR_NO_FILE;
 8003456:	2300      	movs	r3, #0
 8003458:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800345a:	2004      	movs	r0, #4
 800345c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003460:	8963      	ldrh	r3, [r4, #10]
 8003462:	3b01      	subs	r3, #1
 8003464:	4203      	tst	r3, r0
 8003466:	d13e      	bne.n	80034e6 <dir_next+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003468:	4620      	mov	r0, r4
 800346a:	f7ff fe75 	bl	8003158 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800346e:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003470:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003472:	d802      	bhi.n	800347a <dir_next+0x5a>
 8003474:	2002      	movs	r0, #2
 8003476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800347a:	1c42      	adds	r2, r0, #1
 800347c:	d102      	bne.n	8003484 <dir_next+0x64>
 800347e:	2001      	movs	r0, #1
 8003480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003484:	69e3      	ldr	r3, [r4, #28]
 8003486:	4298      	cmp	r0, r3
 8003488:	d327      	bcc.n	80034da <dir_next+0xba>
					if (!stretch) {								/* If no stretch, report EOT */
 800348a:	f1b8 0f00 	cmp.w	r8, #0
 800348e:	d0e2      	beq.n	8003456 <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003490:	69a9      	ldr	r1, [r5, #24]
 8003492:	4628      	mov	r0, r5
 8003494:	f7ff fed0 	bl	8003238 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003498:	4606      	mov	r6, r0
 800349a:	2800      	cmp	r0, #0
 800349c:	d03d      	beq.n	800351a <dir_next+0xfa>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800349e:	2801      	cmp	r0, #1
 80034a0:	d0e8      	beq.n	8003474 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80034a2:	1c43      	adds	r3, r0, #1
 80034a4:	d0eb      	beq.n	800347e <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80034a6:	4620      	mov	r0, r4
 80034a8:	f7ff fd17 	bl	8002eda <sync_window>
 80034ac:	4680      	mov	r8, r0
 80034ae:	2800      	cmp	r0, #0
 80034b0:	d1e5      	bne.n	800347e <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80034b2:	4601      	mov	r1, r0
 80034b4:	89a2      	ldrh	r2, [r4, #12]
 80034b6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80034ba:	f7ff fc09 	bl	8002cd0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80034be:	4631      	mov	r1, r6
 80034c0:	4620      	mov	r0, r4
 80034c2:	f7ff fc8d 	bl	8002de0 <clust2sect>
						fs->wflag = 1;
 80034c6:	f04f 0901 	mov.w	r9, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80034ca:	6360      	str	r0, [r4, #52]	; 0x34
 80034cc:	8963      	ldrh	r3, [r4, #10]
 80034ce:	4598      	cmp	r8, r3
 80034d0:	d316      	bcc.n	8003500 <dir_next+0xe0>
					fs->winsect -= n;							/* Restore window offset */
 80034d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034d4:	eba3 0308 	sub.w	r3, r3, r8
 80034d8:	6363      	str	r3, [r4, #52]	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 80034da:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 80034dc:	4631      	mov	r1, r6
 80034de:	4620      	mov	r0, r4
 80034e0:	f7ff fc7e 	bl	8002de0 <clust2sect>
 80034e4:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80034e6:	89a1      	ldrh	r1, [r4, #12]
	dp->dptr = ofs;						/* Current entry */
 80034e8:	616f      	str	r7, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80034ea:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80034ee:	fbb7 f2f1 	udiv	r2, r7, r1
 80034f2:	fb01 7712 	mls	r7, r1, r2, r7
 80034f6:	441f      	add	r7, r3
 80034f8:	622f      	str	r7, [r5, #32]
	return FR_OK;
 80034fa:	2000      	movs	r0, #0
 80034fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						fs->wflag = 1;
 8003500:	f884 9003 	strb.w	r9, [r4, #3]
 8003504:	4620      	mov	r0, r4
 8003506:	f7ff fcc5 	bl	8002e94 <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800350a:	2800      	cmp	r0, #0
 800350c:	d1b7      	bne.n	800347e <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800350e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003510:	3301      	adds	r3, #1
 8003512:	f108 0801 	add.w	r8, r8, #1
 8003516:	6363      	str	r3, [r4, #52]	; 0x34
 8003518:	e7d8      	b.n	80034cc <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800351a:	2007      	movs	r0, #7
}
 800351c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003520 <follow_path>:
{
 8003520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8003524:	6806      	ldr	r6, [r0, #0]
{
 8003526:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003528:	780b      	ldrb	r3, [r1, #0]
 800352a:	2b2f      	cmp	r3, #47	; 0x2f
 800352c:	460d      	mov	r5, r1
 800352e:	f101 0101 	add.w	r1, r1, #1
 8003532:	d0f9      	beq.n	8003528 <follow_path+0x8>
 8003534:	2b5c      	cmp	r3, #92	; 0x5c
 8003536:	d0f7      	beq.n	8003528 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 8003538:	2300      	movs	r3, #0
 800353a:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800353c:	782b      	ldrb	r3, [r5, #0]
 800353e:	2b1f      	cmp	r3, #31
 8003540:	d959      	bls.n	80035f6 <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003542:	f8df 8160 	ldr.w	r8, [pc, #352]	; 80036a4 <follow_path+0x184>
	p = *path; sfn = dp->fn;
 8003546:	f104 0724 	add.w	r7, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 800354a:	220b      	movs	r2, #11
 800354c:	2120      	movs	r1, #32
 800354e:	4638      	mov	r0, r7
 8003550:	f7ff fbbe 	bl	8002cd0 <mem_set>
	si = i = 0; ni = 8;
 8003554:	2200      	movs	r2, #0
 8003556:	f105 3eff 	add.w	lr, r5, #4294967295
 800355a:	4611      	mov	r1, r2
 800355c:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 800355e:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003562:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8003564:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003568:	d90b      	bls.n	8003582 <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800356a:	2b2f      	cmp	r3, #47	; 0x2f
 800356c:	d14b      	bne.n	8003606 <follow_path+0xe6>
 800356e:	1868      	adds	r0, r5, r1
 8003570:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003572:	f810 eb01 	ldrb.w	lr, [r0], #1
 8003576:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 800357a:	d0f9      	beq.n	8003570 <follow_path+0x50>
 800357c:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 8003580:	d0f6      	beq.n	8003570 <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 8003582:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003584:	2a00      	cmp	r2, #0
 8003586:	d054      	beq.n	8003632 <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003588:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 800358c:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003590:	2ae5      	cmp	r2, #229	; 0xe5
 8003592:	bf04      	itt	eq
 8003594:	2205      	moveq	r2, #5
 8003596:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800359a:	2b21      	cmp	r3, #33	; 0x21
 800359c:	bf34      	ite	cc
 800359e:	2304      	movcc	r3, #4
 80035a0:	2300      	movcs	r3, #0
 80035a2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80035a6:	4620      	mov	r0, r4
 80035a8:	f7ff ff05 	bl	80033b6 <dir_sdi.constprop.12>
	if (res != FR_OK) return res;
 80035ac:	2800      	cmp	r0, #0
 80035ae:	d145      	bne.n	800363c <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 80035b0:	69e1      	ldr	r1, [r4, #28]
 80035b2:	4648      	mov	r0, r9
 80035b4:	f7ff fce1 	bl	8002f7a <move_window>
		if (res != FR_OK) break;
 80035b8:	2800      	cmp	r0, #0
 80035ba:	d13f      	bne.n	800363c <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 80035bc:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80035be:	781a      	ldrb	r2, [r3, #0]
 80035c0:	2a00      	cmp	r2, #0
 80035c2:	d046      	beq.n	8003652 <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80035c4:	7ada      	ldrb	r2, [r3, #11]
 80035c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80035ca:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80035cc:	7ada      	ldrb	r2, [r3, #11]
 80035ce:	0711      	lsls	r1, r2, #28
 80035d0:	d40c      	bmi.n	80035ec <follow_path+0xcc>
 80035d2:	f103 0e0b 	add.w	lr, r3, #11
 80035d6:	4639      	mov	r1, r7
		r = *d++ - *s++;
 80035d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035dc:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 80035e0:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 80035e2:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 80035e6:	d027      	beq.n	8003638 <follow_path+0x118>
 80035e8:	2a00      	cmp	r2, #0
 80035ea:	d0f5      	beq.n	80035d8 <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 80035ec:	2100      	movs	r1, #0
 80035ee:	4620      	mov	r0, r4
 80035f0:	f7ff ff16 	bl	8003420 <dir_next>
 80035f4:	e7da      	b.n	80035ac <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80035fc:	4620      	mov	r0, r4
}
 80035fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8003602:	f7ff bed8 	b.w	80033b6 <dir_sdi.constprop.12>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003606:	2b5c      	cmp	r3, #92	; 0x5c
 8003608:	d0b1      	beq.n	800356e <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800360a:	2b2e      	cmp	r3, #46	; 0x2e
 800360c:	d039      	beq.n	8003682 <follow_path+0x162>
 800360e:	4290      	cmp	r0, r2
 8003610:	d90f      	bls.n	8003632 <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 8003612:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003616:	bf18      	it	ne
 8003618:	3b80      	subne	r3, #128	; 0x80
 800361a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80036a8 <follow_path+0x188>
 800361e:	bf18      	it	ne
 8003620:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 8003624:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 8003628:	f1bc 0f00 	cmp.w	ip, #0
 800362c:	d02e      	beq.n	800368c <follow_path+0x16c>
 800362e:	4563      	cmp	r3, ip
 8003630:	d1f8      	bne.n	8003624 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003632:	2006      	movs	r0, #6
	return res;
 8003634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003638:	2a00      	cmp	r2, #0
 800363a:	d1d7      	bne.n	80035ec <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 800363c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8003640:	b148      	cbz	r0, 8003656 <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003642:	2804      	cmp	r0, #4
 8003644:	d12c      	bne.n	80036a0 <follow_path+0x180>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003646:	f013 0f04 	tst.w	r3, #4
 800364a:	bf08      	it	eq
 800364c:	2005      	moveq	r0, #5
 800364e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003652:	2004      	movs	r0, #4
 8003654:	e7f2      	b.n	800363c <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003656:	075a      	lsls	r2, r3, #29
 8003658:	d422      	bmi.n	80036a0 <follow_path+0x180>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800365a:	79a3      	ldrb	r3, [r4, #6]
 800365c:	06db      	lsls	r3, r3, #27
 800365e:	d50d      	bpl.n	800367c <follow_path+0x15c>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003660:	89b2      	ldrh	r2, [r6, #12]
 8003662:	6960      	ldr	r0, [r4, #20]
 8003664:	fbb0 f3f2 	udiv	r3, r0, r2
 8003668:	f106 0138 	add.w	r1, r6, #56	; 0x38
 800366c:	fb02 0313 	mls	r3, r2, r3, r0
 8003670:	4419      	add	r1, r3
 8003672:	7830      	ldrb	r0, [r6, #0]
 8003674:	f7ff fbf4 	bl	8002e60 <ld_clust.isra.1>
 8003678:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800367a:	e764      	b.n	8003546 <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800367c:	2005      	movs	r0, #5
 800367e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003682:	280b      	cmp	r0, #11
 8003684:	d0d5      	beq.n	8003632 <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 8003686:	2208      	movs	r2, #8
 8003688:	200b      	movs	r0, #11
 800368a:	e768      	b.n	800355e <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800368c:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8003690:	f1bc 0f19 	cmp.w	ip, #25
 8003694:	d801      	bhi.n	800369a <follow_path+0x17a>
 8003696:	3b20      	subs	r3, #32
 8003698:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 800369a:	54bb      	strb	r3, [r7, r2]
 800369c:	3201      	adds	r2, #1
 800369e:	e75e      	b.n	800355e <follow_path+0x3e>
}
 80036a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036a4:	08006740 	.word	0x08006740
 80036a8:	080067bf 	.word	0x080067bf

080036ac <dir_register>:
{
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80036b0:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 80036b2:	f7ff fe80 	bl	80033b6 <dir_sdi.constprop.12>
	if (res == FR_OK) {
 80036b6:	4604      	mov	r4, r0
 80036b8:	bb28      	cbnz	r0, 8003706 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 80036ba:	69e9      	ldr	r1, [r5, #28]
 80036bc:	4630      	mov	r0, r6
 80036be:	f7ff fc5c 	bl	8002f7a <move_window>
			if (res != FR_OK) break;
 80036c2:	4604      	mov	r4, r0
 80036c4:	b9f8      	cbnz	r0, 8003706 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80036c6:	6a2b      	ldr	r3, [r5, #32]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2be5      	cmp	r3, #229	; 0xe5
 80036cc:	d114      	bne.n	80036f8 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 80036ce:	69e9      	ldr	r1, [r5, #28]
 80036d0:	4630      	mov	r0, r6
 80036d2:	f7ff fc52 	bl	8002f7a <move_window>
		if (res == FR_OK) {
 80036d6:	4604      	mov	r4, r0
 80036d8:	b960      	cbnz	r0, 80036f4 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80036da:	4601      	mov	r1, r0
 80036dc:	2220      	movs	r2, #32
 80036de:	6a28      	ldr	r0, [r5, #32]
 80036e0:	f7ff faf6 	bl	8002cd0 <mem_set>
 80036e4:	220b      	movs	r2, #11
 80036e6:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80036ea:	6a28      	ldr	r0, [r5, #32]
 80036ec:	f7ff fbaf 	bl	8002e4e <mem_cpy.part.0>
			fs->wflag = 1;
 80036f0:	2301      	movs	r3, #1
 80036f2:	70f3      	strb	r3, [r6, #3]
}
 80036f4:	4620      	mov	r0, r4
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0e8      	beq.n	80036ce <dir_register+0x22>
			res = dir_next(dp, 1);
 80036fc:	2101      	movs	r1, #1
 80036fe:	4628      	mov	r0, r5
 8003700:	f7ff fe8e 	bl	8003420 <dir_next>
 8003704:	e7d7      	b.n	80036b6 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003706:	2c04      	cmp	r4, #4
 8003708:	bf08      	it	eq
 800370a:	2407      	moveq	r4, #7
 800370c:	e7f2      	b.n	80036f4 <dir_register+0x48>
	...

08003710 <find_volume>:
{
 8003710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 8003714:	2300      	movs	r3, #0
{
 8003716:	b085      	sub	sp, #20
	*rfs = 0;
 8003718:	600b      	str	r3, [r1, #0]
{
 800371a:	460f      	mov	r7, r1
 800371c:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800371e:	f7ff fb7e 	bl	8002e1e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003722:	1e06      	subs	r6, r0, #0
 8003724:	f2c0 8146 	blt.w	80039b4 <find_volume+0x2a4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003728:	4bb5      	ldr	r3, [pc, #724]	; (8003a00 <find_volume+0x2f0>)
 800372a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800372e:	2c00      	cmp	r4, #0
 8003730:	f000 8142 	beq.w	80039b8 <find_volume+0x2a8>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8003734:	6920      	ldr	r0, [r4, #16]
 8003736:	f000 fc42 	bl	8003fbe <ff_req_grant>
 800373a:	2800      	cmp	r0, #0
 800373c:	f040 8142 	bne.w	80039c4 <find_volume+0x2b4>
	ENTER_FF(fs);						/* Lock the volume */
 8003740:	200f      	movs	r0, #15
}
 8003742:	b005      	add	sp, #20
 8003744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		stat = disk_status(fs->drv);
 8003748:	7860      	ldrb	r0, [r4, #1]
 800374a:	f7ff fa6d 	bl	8002c28 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800374e:	07c1      	lsls	r1, r0, #31
 8003750:	f100 813f 	bmi.w	80039d2 <find_volume+0x2c2>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003754:	2d00      	cmp	r5, #0
 8003756:	f000 8131 	beq.w	80039bc <find_volume+0x2ac>
 800375a:	f010 0004 	ands.w	r0, r0, #4
 800375e:	d0f0      	beq.n	8003742 <find_volume+0x32>
				return FR_WRITE_PROTECTED;
 8003760:	200a      	movs	r0, #10
 8003762:	e7ee      	b.n	8003742 <find_volume+0x32>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8003764:	89a3      	ldrh	r3, [r4, #12]
 8003766:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 800376a:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 800376e:	f200 8145 	bhi.w	80039fc <find_volume+0x2ec>
 8003772:	1e5e      	subs	r6, r3, #1
 8003774:	401e      	ands	r6, r3
 8003776:	f040 8141 	bne.w	80039fc <find_volume+0x2ec>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800377a:	4631      	mov	r1, r6
 800377c:	4620      	mov	r0, r4
 800377e:	f7ff fc17 	bl	8002fb0 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003782:	2802      	cmp	r0, #2
 8003784:	f040 80fb 	bne.w	800397e <find_volume+0x26e>
 8003788:	f504 71ff 	add.w	r1, r4, #510	; 0x1fe
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800378c:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8003790:	b110      	cbz	r0, 8003798 <find_volume+0x88>
 8003792:	4608      	mov	r0, r1
 8003794:	f7ff fa8c 	bl	8002cb0 <ld_dword>
 8003798:	f84d 0026 	str.w	r0, [sp, r6, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800379c:	3601      	adds	r6, #1
 800379e:	2e04      	cmp	r6, #4
 80037a0:	f101 0110 	add.w	r1, r1, #16
 80037a4:	d1f2      	bne.n	800378c <find_volume+0x7c>
 80037a6:	2500      	movs	r5, #0
			bsect = br[i];
 80037a8:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80037ac:	2e00      	cmp	r6, #0
 80037ae:	f000 80de 	beq.w	800396e <find_volume+0x25e>
 80037b2:	4631      	mov	r1, r6
 80037b4:	4620      	mov	r0, r4
 80037b6:	f7ff fbfb 	bl	8002fb0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80037ba:	2801      	cmp	r0, #1
 80037bc:	f200 80d8 	bhi.w	8003970 <find_volume+0x260>
	rv = rv << 8 | ptr[0];
 80037c0:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80037c4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80037c8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 80037cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80037d0:	4598      	cmp	r8, r3
 80037d2:	f040 80d9 	bne.w	8003988 <find_volume+0x278>
	rv = rv << 8 | ptr[0];
 80037d6:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 80037da:	f894 904e 	ldrb.w	r9, [r4, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80037de:	ea59 2903 	orrs.w	r9, r9, r3, lsl #8
 80037e2:	d104      	bne.n	80037ee <find_volume+0xde>
 80037e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80037e8:	f7ff fa62 	bl	8002cb0 <ld_dword>
 80037ec:	4681      	mov	r9, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80037ee:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
		fs->fsize = fasize;
 80037f2:	f8c4 9020 	str.w	r9, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80037f6:	1e4b      	subs	r3, r1, #1
 80037f8:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80037fa:	70a1      	strb	r1, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80037fc:	f200 80c4 	bhi.w	8003988 <find_volume+0x278>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003800:	f894 7045 	ldrb.w	r7, [r4, #69]	; 0x45
 8003804:	b2bb      	uxth	r3, r7
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003806:	fb09 f101 	mul.w	r1, r9, r1
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800380a:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 80bb 	beq.w	8003988 <find_volume+0x278>
 8003812:	1e7b      	subs	r3, r7, #1
 8003814:	423b      	tst	r3, r7
 8003816:	f040 80b7 	bne.w	8003988 <find_volume+0x278>
	rv = rv << 8 | ptr[0];
 800381a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800381e:	f894 a049 	ldrb.w	sl, [r4, #73]	; 0x49
 8003822:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003826:	ea4f 1358 	mov.w	r3, r8, lsr #5
 800382a:	fbba fbf3 	udiv	fp, sl, r3
 800382e:	fb03 a31b 	mls	r3, r3, fp, sl
 8003832:	b29b      	uxth	r3, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003834:	f8a4 a008 	strh.w	sl, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003838:	2b00      	cmp	r3, #0
 800383a:	f040 80a5 	bne.w	8003988 <find_volume+0x278>
	rv = rv << 8 | ptr[0];
 800383e:	f894 504c 	ldrb.w	r5, [r4, #76]	; 0x4c
 8003842:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003846:	ea50 2005 	orrs.w	r0, r0, r5, lsl #8
 800384a:	d103      	bne.n	8003854 <find_volume+0x144>
 800384c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003850:	f7ff fa2e 	bl	8002cb0 <ld_dword>
	rv = rv << 8 | ptr[0];
 8003854:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8003858:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800385c:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8003860:	f000 8092 	beq.w	8003988 <find_volume+0x278>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003864:	fa12 f38b 	uxtah	r3, r2, fp
 8003868:	440b      	add	r3, r1
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800386a:	4298      	cmp	r0, r3
 800386c:	f0c0 808c 	bcc.w	8003988 <find_volume+0x278>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003870:	1ac5      	subs	r5, r0, r3
 8003872:	fbb5 f5f7 	udiv	r5, r5, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003876:	2d00      	cmp	r5, #0
 8003878:	f000 8086 	beq.w	8003988 <find_volume+0x278>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800387c:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8003880:	4285      	cmp	r5, r0
 8003882:	f200 8083 	bhi.w	800398c <find_volume+0x27c>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003886:	f640 77f5 	movw	r7, #4085	; 0xff5
 800388a:	42bd      	cmp	r5, r7
 800388c:	bf8c      	ite	hi
 800388e:	2702      	movhi	r7, #2
 8003890:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003892:	3502      	adds	r5, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003894:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8003896:	4433      	add	r3, r6
		if (fmt == FS_FAT32) {
 8003898:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800389a:	61e5      	str	r5, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800389c:	6266      	str	r6, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800389e:	62a2      	str	r2, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80038a0:	6323      	str	r3, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80038a2:	d175      	bne.n	8003990 <find_volume+0x280>
	rv = rv << 8 | ptr[0];
 80038a4:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 80038a8:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80038ac:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80038b0:	d16a      	bne.n	8003988 <find_volume+0x278>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80038b2:	f1ba 0f00 	cmp.w	sl, #0
 80038b6:	d167      	bne.n	8003988 <find_volume+0x278>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80038b8:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80038bc:	f7ff f9f8 	bl	8002cb0 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80038c0:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80038c2:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80038c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80038c8:	441d      	add	r5, r3
 80038ca:	fbb5 f8f8 	udiv	r8, r5, r8
 80038ce:	45c1      	cmp	r9, r8
 80038d0:	d35a      	bcc.n	8003988 <find_volume+0x278>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80038d2:	f04f 33ff 	mov.w	r3, #4294967295
 80038d6:	61a3      	str	r3, [r4, #24]
 80038d8:	6163      	str	r3, [r4, #20]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80038da:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 80038dc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80038e0:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80038e2:	d12f      	bne.n	8003944 <find_volume+0x234>
	rv = rv << 8 | ptr[0];
 80038e4:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 80038e8:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 80038ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d127      	bne.n	8003944 <find_volume+0x234>
			&& move_window(fs, bsect + 1) == FR_OK)
 80038f4:	1c71      	adds	r1, r6, #1
 80038f6:	4620      	mov	r0, r4
 80038f8:	f7ff fb3f 	bl	8002f7a <move_window>
 80038fc:	bb10      	cbnz	r0, 8003944 <find_volume+0x234>
	rv = rv << 8 | ptr[0];
 80038fe:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8003902:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
			fs->fsi_flag = 0;
 8003906:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8003908:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800390c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8003910:	4293      	cmp	r3, r2
 8003912:	d117      	bne.n	8003944 <find_volume+0x234>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003914:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8003918:	f7ff f9ca 	bl	8002cb0 <ld_dword>
 800391c:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <find_volume+0x2f4>)
 800391e:	4298      	cmp	r0, r3
 8003920:	d110      	bne.n	8003944 <find_volume+0x234>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003922:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8003926:	f7ff f9c3 	bl	8002cb0 <ld_dword>
 800392a:	4b37      	ldr	r3, [pc, #220]	; (8003a08 <find_volume+0x2f8>)
 800392c:	4298      	cmp	r0, r3
 800392e:	d109      	bne.n	8003944 <find_volume+0x234>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003930:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8003934:	f7ff f9bc 	bl	8002cb0 <ld_dword>
 8003938:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800393a:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800393e:	f7ff f9b7 	bl	8002cb0 <ld_dword>
 8003942:	6160      	str	r0, [r4, #20]
	fs->id = ++Fsid;		/* File system mount ID */
 8003944:	4a31      	ldr	r2, [pc, #196]	; (8003a0c <find_volume+0x2fc>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8003946:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8003948:	8813      	ldrh	r3, [r2, #0]
 800394a:	3301      	adds	r3, #1
 800394c:	b29b      	uxth	r3, r3
 800394e:	8013      	strh	r3, [r2, #0]
 8003950:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003952:	4b2f      	ldr	r3, [pc, #188]	; (8003a10 <find_volume+0x300>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4294      	cmp	r4, r2
 8003958:	bf04      	itt	eq
 800395a:	2200      	moveq	r2, #0
 800395c:	601a      	streq	r2, [r3, #0]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	4294      	cmp	r4, r2
 8003962:	f04f 0000 	mov.w	r0, #0
 8003966:	f47f aeec 	bne.w	8003742 <find_volume+0x32>
 800396a:	6118      	str	r0, [r3, #16]
 800396c:	e6e9      	b.n	8003742 <find_volume+0x32>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800396e:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003970:	3501      	adds	r5, #1
 8003972:	2d04      	cmp	r5, #4
 8003974:	f47f af18 	bne.w	80037a8 <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003978:	2804      	cmp	r0, #4
 800397a:	d105      	bne.n	8003988 <find_volume+0x278>
 800397c:	e03e      	b.n	80039fc <find_volume+0x2ec>
 800397e:	2804      	cmp	r0, #4
 8003980:	d03c      	beq.n	80039fc <find_volume+0x2ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003982:	2801      	cmp	r0, #1
 8003984:	f67f af1c 	bls.w	80037c0 <find_volume+0xb0>
 8003988:	200d      	movs	r0, #13
 800398a:	e6da      	b.n	8003742 <find_volume+0x32>
		fmt = FS_FAT32;
 800398c:	2703      	movs	r7, #3
 800398e:	e780      	b.n	8003892 <find_volume+0x182>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8003990:	f1ba 0f00 	cmp.w	sl, #0
 8003994:	d0f8      	beq.n	8003988 <find_volume+0x278>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003996:	2f02      	cmp	r7, #2
 8003998:	ea4f 0045 	mov.w	r0, r5, lsl #1
 800399c:	bf18      	it	ne
 800399e:	1940      	addne	r0, r0, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80039a0:	440a      	add	r2, r1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80039a2:	bf18      	it	ne
 80039a4:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80039a8:	62e2      	str	r2, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80039aa:	bf0c      	ite	eq
 80039ac:	4605      	moveq	r5, r0
 80039ae:	eb05 0550 	addne.w	r5, r5, r0, lsr #1
 80039b2:	e787      	b.n	80038c4 <find_volume+0x1b4>
	if (vol < 0) return FR_INVALID_DRIVE;
 80039b4:	200b      	movs	r0, #11
 80039b6:	e6c4      	b.n	8003742 <find_volume+0x32>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80039b8:	200c      	movs	r0, #12
 80039ba:	e6c2      	b.n	8003742 <find_volume+0x32>
			return FR_OK;				/* The file system object is valid */
 80039bc:	4628      	mov	r0, r5
 80039be:	e6c0      	b.n	8003742 <find_volume+0x32>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80039c0:	2003      	movs	r0, #3
 80039c2:	e6be      	b.n	8003742 <find_volume+0x32>
	*rfs = fs;							/* Return pointer to the file system object */
 80039c4:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80039c6:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80039c8:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f47f aebb 	bne.w	8003748 <find_volume+0x38>
	fs->fs_type = 0;					/* Clear the file system object */
 80039d2:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80039d4:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80039d6:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80039d8:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80039da:	f7ff f92f 	bl	8002c3c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80039de:	07c2      	lsls	r2, r0, #31
 80039e0:	d4ee      	bmi.n	80039c0 <find_volume+0x2b0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80039e2:	b115      	cbz	r5, 80039ea <find_volume+0x2da>
 80039e4:	0743      	lsls	r3, r0, #29
 80039e6:	f53f aebb 	bmi.w	8003760 <find_volume+0x50>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80039ea:	f104 020c 	add.w	r2, r4, #12
 80039ee:	2102      	movs	r1, #2
 80039f0:	7860      	ldrb	r0, [r4, #1]
 80039f2:	f7ff f94f 	bl	8002c94 <disk_ioctl>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	f43f aeb4 	beq.w	8003764 <find_volume+0x54>
 80039fc:	2001      	movs	r0, #1
 80039fe:	e6a0      	b.n	8003742 <find_volume+0x32>
 8003a00:	2000002c 	.word	0x2000002c
 8003a04:	41615252 	.word	0x41615252
 8003a08:	61417272 	.word	0x61417272
 8003a0c:	20000050 	.word	0x20000050
 8003a10:	20000030 	.word	0x20000030

08003a14 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a16:	b085      	sub	sp, #20
 8003a18:	4616      	mov	r6, r2
 8003a1a:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003a1c:	a804      	add	r0, sp, #16
{
 8003a1e:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8003a20:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003a24:	f7ff f9fb 	bl	8002e1e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003a28:	1e07      	subs	r7, r0, #0
 8003a2a:	db35      	blt.n	8003a98 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003a2c:	4d1c      	ldr	r5, [pc, #112]	; (8003aa0 <f_mount+0x8c>)
 8003a2e:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]

	if (cfs) {
 8003a32:	b1a4      	cbz	r4, 8003a5e <f_mount+0x4a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003a34:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <f_mount+0x90>)
#if _FS_LOCK != 0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8003a36:	6920      	ldr	r0, [r4, #16]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4294      	cmp	r4, r2
 8003a3c:	bf04      	itt	eq
 8003a3e:	2200      	moveq	r2, #0
 8003a40:	601a      	streq	r2, [r3, #0]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	4294      	cmp	r4, r2
 8003a46:	bf04      	itt	eq
 8003a48:	2200      	moveq	r2, #0
 8003a4a:	611a      	streq	r2, [r3, #16]
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8003a4c:	f000 fab2 	bl	8003fb4 <ff_del_syncobj>
 8003a50:	b918      	cbnz	r0, 8003a5a <f_mount+0x46>
 8003a52:	2402      	movs	r4, #2

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8003a54:	4620      	mov	r0, r4
 8003a56:	b005      	add	sp, #20
 8003a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cfs->fs_type = 0;				/* Clear old fs object */
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	7023      	strb	r3, [r4, #0]
	if (fs) {
 8003a5e:	9901      	ldr	r1, [sp, #4]
 8003a60:	b989      	cbnz	r1, 8003a86 <f_mount+0x72>
	FatFs[vol] = fs;					/* Register new fs object */
 8003a62:	9c01      	ldr	r4, [sp, #4]
 8003a64:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003a68:	2c00      	cmp	r4, #0
 8003a6a:	d0f3      	beq.n	8003a54 <f_mount+0x40>
 8003a6c:	2e01      	cmp	r6, #1
 8003a6e:	d115      	bne.n	8003a9c <f_mount+0x88>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003a70:	a901      	add	r1, sp, #4
 8003a72:	2200      	movs	r2, #0
 8003a74:	4668      	mov	r0, sp
 8003a76:	f7ff fe4b 	bl	8003710 <find_volume>
 8003a7a:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 8003a7c:	4601      	mov	r1, r0
 8003a7e:	9801      	ldr	r0, [sp, #4]
 8003a80:	f7ff fc68 	bl	8003354 <unlock_fs>
 8003a84:	e7e6      	b.n	8003a54 <f_mount+0x40>
		fs->fs_type = 0;				/* Clear new fs object */
 8003a86:	2300      	movs	r3, #0
 8003a88:	f801 3b10 	strb.w	r3, [r1], #16
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8003a8c:	b2f8      	uxtb	r0, r7
 8003a8e:	f000 fa82 	bl	8003f96 <ff_cre_syncobj>
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d0dd      	beq.n	8003a52 <f_mount+0x3e>
 8003a96:	e7e4      	b.n	8003a62 <f_mount+0x4e>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003a98:	240b      	movs	r4, #11
 8003a9a:	e7db      	b.n	8003a54 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003a9c:	2400      	movs	r4, #0
 8003a9e:	e7d9      	b.n	8003a54 <f_mount+0x40>
 8003aa0:	2000002c 	.word	0x2000002c
 8003aa4:	20000030 	.word	0x20000030

08003aa8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aac:	b090      	sub	sp, #64	; 0x40
 8003aae:	4690      	mov	r8, r2
 8003ab0:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	f000 80d5 	beq.w	8003c64 <f_open+0x1bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8003aba:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8003abe:	462a      	mov	r2, r5
 8003ac0:	a903      	add	r1, sp, #12
 8003ac2:	a801      	add	r0, sp, #4
 8003ac4:	f7ff fe24 	bl	8003710 <find_volume>
	if (res == FR_OK) {
 8003ac8:	4607      	mov	r7, r0
 8003aca:	bb38      	cbnz	r0, 8003b1c <f_open+0x74>
		dj.obj.fs = fs;
 8003acc:	ae10      	add	r6, sp, #64	; 0x40
 8003ace:	9b03      	ldr	r3, [sp, #12]
 8003ad0:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003ad4:	9901      	ldr	r1, [sp, #4]
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	f7ff fd22 	bl	8003520 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8003adc:	b958      	cbnz	r0, 8003af6 <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003ade:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	db1e      	blt.n	8003b24 <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003ae6:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8003aea:	bf14      	ite	ne
 8003aec:	2101      	movne	r1, #1
 8003aee:	2100      	moveq	r1, #0
 8003af0:	4630      	mov	r0, r6
 8003af2:	f7ff f8f3 	bl	8002cdc <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003af6:	f018 0f1c 	tst.w	r8, #28
 8003afa:	d073      	beq.n	8003be4 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8003afc:	b1a0      	cbz	r0, 8003b28 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003afe:	2804      	cmp	r0, #4
 8003b00:	d109      	bne.n	8003b16 <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003b02:	4b75      	ldr	r3, [pc, #468]	; (8003cd8 <f_open+0x230>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	2a00      	cmp	r2, #0
 8003b08:	f000 80e2 	beq.w	8003cd0 <f_open+0x228>
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80de 	beq.w	8003cd0 <f_open+0x228>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003b14:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003b16:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003b1a:	b170      	cbz	r0, 8003b3a <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	6023      	str	r3, [r4, #0]
 8003b20:	4607      	mov	r7, r0
 8003b22:	e095      	b.n	8003c50 <f_open+0x1a8>
				res = FR_INVALID_NAME;
 8003b24:	2006      	movs	r0, #6
 8003b26:	e7e6      	b.n	8003af6 <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003b28:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003b2c:	f013 0f11 	tst.w	r3, #17
 8003b30:	d163      	bne.n	8003bfa <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003b32:	f018 0f04 	tst.w	r8, #4
 8003b36:	f040 80c5 	bne.w	8003cc4 <f_open+0x21c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003b3a:	0728      	lsls	r0, r5, #28
 8003b3c:	d53c      	bpl.n	8003bb8 <f_open+0x110>
				dw = GET_FATTIME();
 8003b3e:	f002 f876 	bl	8005c2e <get_fattime>
 8003b42:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8003b44:	4601      	mov	r1, r0
 8003b46:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003b48:	300e      	adds	r0, #14
 8003b4a:	f7ff f8b9 	bl	8002cc0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8003b4e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003b50:	4611      	mov	r1, r2
 8003b52:	3016      	adds	r0, #22
 8003b54:	f7ff f8b4 	bl	8002cc0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003b5a:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003b5e:	2220      	movs	r2, #32
 8003b60:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003b62:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b66:	f899 0000 	ldrb.w	r0, [r9]
 8003b6a:	4651      	mov	r1, sl
 8003b6c:	f7ff f978 	bl	8002e60 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003b70:	2200      	movs	r2, #0
 8003b72:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8003b74:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003b76:	4648      	mov	r0, r9
 8003b78:	f7ff f980 	bl	8002e7c <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003b7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8003b7e:	2200      	movs	r2, #0
 8003b80:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b82:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8003b84:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8003b86:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8003b88:	9b03      	ldr	r3, [sp, #12]
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8003b8e:	f1b8 0f00 	cmp.w	r8, #0
 8003b92:	d011      	beq.n	8003bb8 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8003b94:	4641      	mov	r1, r8
 8003b96:	4630      	mov	r0, r6
						dw = fs->winsect;
 8003b98:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 8003b9c:	f7ff fba4 	bl	80032e8 <remove_chain>
						if (res == FR_OK) {
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	d1bb      	bne.n	8003b1c <f_open+0x74>
							res = move_window(fs, dw);
 8003ba4:	4649      	mov	r1, r9
 8003ba6:	9803      	ldr	r0, [sp, #12]
 8003ba8:	f7ff f9e7 	bl	8002f7a <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003bac:	9a03      	ldr	r2, [sp, #12]
 8003bae:	f108 33ff 	add.w	r3, r8, #4294967295
 8003bb2:	6153      	str	r3, [r2, #20]
		if (res == FR_OK) {
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	d1b1      	bne.n	8003b1c <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003bb8:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8003bba:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8003bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbe:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 8003bc0:	bf48      	it	mi
 8003bc2:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003bc6:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8003bca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bcc:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003bce:	bf14      	ite	ne
 8003bd0:	2101      	movne	r1, #1
 8003bd2:	2100      	moveq	r1, #0
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f7ff f8af 	bl	8002d38 <inc_lock>
 8003bda:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d143      	bne.n	8003c68 <f_open+0x1c0>
 8003be0:	2002      	movs	r0, #2
 8003be2:	e79b      	b.n	8003b1c <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d199      	bne.n	8003b1c <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8003be8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003bec:	06da      	lsls	r2, r3, #27
 8003bee:	d46b      	bmi.n	8003cc8 <f_open+0x220>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8003bf0:	f018 0f02 	tst.w	r8, #2
 8003bf4:	d0e0      	beq.n	8003bb8 <f_open+0x110>
 8003bf6:	07db      	lsls	r3, r3, #31
 8003bf8:	d5de      	bpl.n	8003bb8 <f_open+0x110>
					res = FR_DENIED;
 8003bfa:	2007      	movs	r0, #7
 8003bfc:	e78e      	b.n	8003b1c <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 8003bfe:	6820      	ldr	r0, [r4, #0]
 8003c00:	f7ff faaa 	bl	8003158 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 8003c04:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8003c06:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8003c08:	d92a      	bls.n	8003c60 <f_open+0x1b8>
 8003c0a:	1c42      	adds	r2, r0, #1
 8003c0c:	4250      	negs	r0, r2
 8003c0e:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003c10:	eba5 0508 	sub.w	r5, r5, r8
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d051      	beq.n	8003cbc <f_open+0x214>
				fp->clust = clst;
 8003c18:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	f47f af7e 	bne.w	8003b1c <f_open+0x74>
 8003c20:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003c24:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003c28:	fbb5 f2f3 	udiv	r2, r5, r3
 8003c2c:	fb03 5512 	mls	r5, r3, r2, r5
 8003c30:	b175      	cbz	r5, 8003c50 <f_open+0x1a8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8003c32:	4640      	mov	r0, r8
 8003c34:	f7ff f8d4 	bl	8002de0 <clust2sect>
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	d0d1      	beq.n	8003be0 <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8003c3c:	4402      	add	r2, r0
 8003c3e:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	4631      	mov	r1, r6
 8003c44:	f898 0001 	ldrb.w	r0, [r8, #1]
 8003c48:	f7ff f808 	bl	8002c5c <disk_read>
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d13d      	bne.n	8003ccc <f_open+0x224>

	LEAVE_FF(fs, res);
 8003c50:	4639      	mov	r1, r7
 8003c52:	9803      	ldr	r0, [sp, #12]
 8003c54:	f7ff fb7e 	bl	8003354 <unlock_fs>
}
 8003c58:	4638      	mov	r0, r7
 8003c5a:	b010      	add	sp, #64	; 0x40
 8003c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 8003c60:	2002      	movs	r0, #2
 8003c62:	e7d5      	b.n	8003c10 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 8003c64:	2709      	movs	r7, #9
 8003c66:	e7f7      	b.n	8003c58 <f_open+0x1b0>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8003c68:	9e03      	ldr	r6, [sp, #12]
 8003c6a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8003c6e:	7830      	ldrb	r0, [r6, #0]
 8003c70:	4641      	mov	r1, r8
 8003c72:	f7ff f8f5 	bl	8002e60 <ld_clust.isra.1>
 8003c76:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003c78:	f108 001c 	add.w	r0, r8, #28
 8003c7c:	f7ff f818 	bl	8002cb0 <ld_dword>
			fp->obj.id = fs->id;
 8003c80:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8003c82:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003c84:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8003c86:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8003c8a:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8003c8c:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8003c8e:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 8003c90:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8003c92:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8003c94:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8003c96:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8003c98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c9c:	4630      	mov	r0, r6
 8003c9e:	f7ff f817 	bl	8002cd0 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8003ca2:	06ab      	lsls	r3, r5, #26
 8003ca4:	d5d4      	bpl.n	8003c50 <f_open+0x1a8>
 8003ca6:	68e5      	ldr	r5, [r4, #12]
 8003ca8:	2d00      	cmp	r5, #0
 8003caa:	d0d1      	beq.n	8003c50 <f_open+0x1a8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003cac:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8003cae:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003cb0:	895a      	ldrh	r2, [r3, #10]
 8003cb2:	f8b3 800c 	ldrh.w	r8, [r3, #12]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8003cb6:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8003cb8:	fb08 f802 	mul.w	r8, r8, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8003cbc:	45a8      	cmp	r8, r5
 8003cbe:	d39e      	bcc.n	8003bfe <f_open+0x156>
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	e7a9      	b.n	8003c18 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8003cc4:	2008      	movs	r0, #8
 8003cc6:	e729      	b.n	8003b1c <f_open+0x74>
					res = FR_NO_FILE;
 8003cc8:	2004      	movs	r0, #4
 8003cca:	e727      	b.n	8003b1c <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8003ccc:	2001      	movs	r0, #1
 8003cce:	e725      	b.n	8003b1c <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	f7ff fceb 	bl	80036ac <dir_register>
 8003cd6:	e71e      	b.n	8003b16 <f_open+0x6e>
 8003cd8:	20000030 	.word	0x20000030

08003cdc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8003cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce0:	469b      	mov	fp, r3
 8003ce2:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8003ce4:	2300      	movs	r3, #0
{
 8003ce6:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 8003ce8:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003cec:	a903      	add	r1, sp, #12
{
 8003cee:	4605      	mov	r5, r0
 8003cf0:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8003cf2:	f7ff fb3a 	bl	800336a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8003cf6:	4604      	mov	r4, r0
 8003cf8:	b908      	cbnz	r0, 8003cfe <f_read+0x22>
 8003cfa:	7d6c      	ldrb	r4, [r5, #21]
 8003cfc:	b114      	cbz	r4, 8003d04 <f_read+0x28>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003cfe:	4621      	mov	r1, r4
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8003d00:	9803      	ldr	r0, [sp, #12]
 8003d02:	e048      	b.n	8003d96 <f_read+0xba>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8003d04:	7d2b      	ldrb	r3, [r5, #20]
 8003d06:	07da      	lsls	r2, r3, #31
 8003d08:	d408      	bmi.n	8003d1c <f_read+0x40>
 8003d0a:	2107      	movs	r1, #7
 8003d0c:	9803      	ldr	r0, [sp, #12]
 8003d0e:	f7ff fb21 	bl	8003354 <unlock_fs>
 8003d12:	2407      	movs	r4, #7
}
 8003d14:	4620      	mov	r0, r4
 8003d16:	b005      	add	sp, #20
 8003d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	remain = fp->obj.objsize - fp->fptr;
 8003d1c:	68eb      	ldr	r3, [r5, #12]
 8003d1e:	69ae      	ldr	r6, [r5, #24]
 8003d20:	1b9e      	subs	r6, r3, r6
 8003d22:	42be      	cmp	r6, r7
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8003d24:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8003d28:	bf28      	it	cs
 8003d2a:	463e      	movcs	r6, r7
 8003d2c:	9300      	str	r3, [sp, #0]
	for ( ;  btr;								/* Repeat until all data read */
 8003d2e:	b90e      	cbnz	r6, 8003d34 <f_read+0x58>
	LEAVE_FF(fs, FR_OK);
 8003d30:	4631      	mov	r1, r6
 8003d32:	e7e5      	b.n	8003d00 <f_read+0x24>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8003d34:	9803      	ldr	r0, [sp, #12]
 8003d36:	69a9      	ldr	r1, [r5, #24]
 8003d38:	8983      	ldrh	r3, [r0, #12]
 8003d3a:	fbb1 f2f3 	udiv	r2, r1, r3
 8003d3e:	fb03 1312 	mls	r3, r3, r2, r1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f040 8081 	bne.w	8003e4a <f_read+0x16e>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8003d48:	8943      	ldrh	r3, [r0, #10]
 8003d4a:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	9301      	str	r3, [sp, #4]
 8003d50:	d116      	bne.n	8003d80 <f_read+0xa4>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8003d52:	b929      	cbnz	r1, 8003d60 <f_read+0x84>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8003d54:	68a8      	ldr	r0, [r5, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8003d56:	2801      	cmp	r0, #1
 8003d58:	d80d      	bhi.n	8003d76 <f_read+0x9a>
 8003d5a:	2402      	movs	r4, #2
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003d5c:	756c      	strb	r4, [r5, #21]
 8003d5e:	e7ce      	b.n	8003cfe <f_read+0x22>
					if (fp->cltbl) {
 8003d60:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003d62:	b11b      	cbz	r3, 8003d6c <f_read+0x90>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8003d64:	4628      	mov	r0, r5
 8003d66:	f7ff f846 	bl	8002df6 <clmt_clust>
 8003d6a:	e7f4      	b.n	8003d56 <f_read+0x7a>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8003d6c:	69e9      	ldr	r1, [r5, #28]
 8003d6e:	6828      	ldr	r0, [r5, #0]
 8003d70:	f7ff f9f2 	bl	8003158 <get_fat.isra.8>
 8003d74:	e7ef      	b.n	8003d56 <f_read+0x7a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8003d76:	1c43      	adds	r3, r0, #1
 8003d78:	d101      	bne.n	8003d7e <f_read+0xa2>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003d7a:	2401      	movs	r4, #1
 8003d7c:	e7ee      	b.n	8003d5c <f_read+0x80>
				fp->clust = clst;				/* Update current cluster */
 8003d7e:	61e8      	str	r0, [r5, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8003d80:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8003d84:	69e9      	ldr	r1, [r5, #28]
 8003d86:	4650      	mov	r0, sl
 8003d88:	f7ff f82a 	bl	8002de0 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8003d8c:	b930      	cbnz	r0, 8003d9c <f_read+0xc0>
 8003d8e:	2402      	movs	r4, #2
 8003d90:	756c      	strb	r4, [r5, #21]
 8003d92:	4621      	mov	r1, r4
 8003d94:	4650      	mov	r0, sl
	LEAVE_FF(fs, FR_OK);
 8003d96:	f7ff fadd 	bl	8003354 <unlock_fs>
 8003d9a:	e7bb      	b.n	8003d14 <f_read+0x38>
			sect += csect;
 8003d9c:	9b01      	ldr	r3, [sp, #4]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8003d9e:	f8ba 800c 	ldrh.w	r8, [sl, #12]
 8003da2:	fbb6 f8f8 	udiv	r8, r6, r8
			sect += csect;
 8003da6:	181f      	adds	r7, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8003da8:	f1b8 0f00 	cmp.w	r8, #0
 8003dac:	d030      	beq.n	8003e10 <f_read+0x134>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003dae:	9a01      	ldr	r2, [sp, #4]
 8003db0:	f8ba 300a 	ldrh.w	r3, [sl, #10]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003db4:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8003db8:	4442      	add	r2, r8
 8003dba:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8003dbc:	bf84      	itt	hi
 8003dbe:	9a01      	ldrhi	r2, [sp, #4]
 8003dc0:	eba3 0802 	subhi.w	r8, r3, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003dc4:	4643      	mov	r3, r8
 8003dc6:	463a      	mov	r2, r7
 8003dc8:	4649      	mov	r1, r9
 8003dca:	f7fe ff47 	bl	8002c5c <disk_read>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d1d3      	bne.n	8003d7a <f_read+0x9e>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8003dd2:	f995 3014 	ldrsb.w	r3, [r5, #20]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	da0b      	bge.n	8003df2 <f_read+0x116>
 8003dda:	6a28      	ldr	r0, [r5, #32]
 8003ddc:	1bc0      	subs	r0, r0, r7
 8003dde:	4580      	cmp	r8, r0
 8003de0:	d907      	bls.n	8003df2 <f_read+0x116>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8003de2:	9b03      	ldr	r3, [sp, #12]
 8003de4:	899a      	ldrh	r2, [r3, #12]
	if (cnt) {
 8003de6:	b122      	cbz	r2, 8003df2 <f_read+0x116>
 8003de8:	9900      	ldr	r1, [sp, #0]
 8003dea:	fb02 9000 	mla	r0, r2, r0, r9
 8003dee:	f7ff f82e 	bl	8002e4e <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8003df2:	9b03      	ldr	r3, [sp, #12]
 8003df4:	899f      	ldrh	r7, [r3, #12]
 8003df6:	fb08 f707 	mul.w	r7, r8, r7
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8003dfa:	69ab      	ldr	r3, [r5, #24]
 8003dfc:	443b      	add	r3, r7
 8003dfe:	61ab      	str	r3, [r5, #24]
 8003e00:	f8db 3000 	ldr.w	r3, [fp]
 8003e04:	443b      	add	r3, r7
 8003e06:	44b9      	add	r9, r7
 8003e08:	f8cb 3000 	str.w	r3, [fp]
 8003e0c:	1bf6      	subs	r6, r6, r7
 8003e0e:	e78e      	b.n	8003d2e <f_read+0x52>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8003e10:	6a2a      	ldr	r2, [r5, #32]
 8003e12:	4297      	cmp	r7, r2
 8003e14:	d018      	beq.n	8003e48 <f_read+0x16c>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8003e16:	f995 3014 	ldrsb.w	r3, [r5, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	da0b      	bge.n	8003e36 <f_read+0x15a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8003e1e:	2301      	movs	r3, #1
 8003e20:	9900      	ldr	r1, [sp, #0]
 8003e22:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8003e26:	f7fe ff27 	bl	8002c78 <disk_write>
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	d1a5      	bne.n	8003d7a <f_read+0x9e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8003e2e:	7d2b      	ldrb	r3, [r5, #20]
 8003e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e34:	752b      	strb	r3, [r5, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8003e36:	9803      	ldr	r0, [sp, #12]
 8003e38:	9900      	ldr	r1, [sp, #0]
 8003e3a:	7840      	ldrb	r0, [r0, #1]
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	463a      	mov	r2, r7
 8003e40:	f7fe ff0c 	bl	8002c5c <disk_read>
 8003e44:	2800      	cmp	r0, #0
 8003e46:	d198      	bne.n	8003d7a <f_read+0x9e>
			fp->sect = sect;
 8003e48:	622f      	str	r7, [r5, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8003e4a:	9b03      	ldr	r3, [sp, #12]
 8003e4c:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8003e50:	69ab      	ldr	r3, [r5, #24]
 8003e52:	fbb3 f1f8 	udiv	r1, r3, r8
 8003e56:	fb08 3111 	mls	r1, r8, r1, r3
 8003e5a:	eba8 0801 	sub.w	r8, r8, r1
 8003e5e:	45b0      	cmp	r8, r6
 8003e60:	4647      	mov	r7, r8
 8003e62:	bf28      	it	cs
 8003e64:	4637      	movcs	r7, r6
	if (cnt) {
 8003e66:	2f00      	cmp	r7, #0
 8003e68:	d0c7      	beq.n	8003dfa <f_read+0x11e>
 8003e6a:	9b00      	ldr	r3, [sp, #0]
 8003e6c:	463a      	mov	r2, r7
 8003e6e:	4419      	add	r1, r3
 8003e70:	4648      	mov	r0, r9
 8003e72:	f7fe ffec 	bl	8002e4e <mem_cpy.part.0>
 8003e76:	e7c0      	b.n	8003dfa <f_read+0x11e>

08003e78 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8003e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003e7a:	a901      	add	r1, sp, #4
{
 8003e7c:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8003e7e:	f7ff fa74 	bl	800336a <validate>
	if (res == FR_OK) {
 8003e82:	4605      	mov	r5, r0
 8003e84:	2800      	cmp	r0, #0
 8003e86:	d142      	bne.n	8003f0e <f_sync+0x96>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8003e88:	7d23      	ldrb	r3, [r4, #20]
 8003e8a:	065a      	lsls	r2, r3, #25
 8003e8c:	d53f      	bpl.n	8003f0e <f_sync+0x96>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8003e8e:	061b      	lsls	r3, r3, #24
 8003e90:	d514      	bpl.n	8003ebc <f_sync+0x44>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8003e92:	9801      	ldr	r0, [sp, #4]
 8003e94:	6a22      	ldr	r2, [r4, #32]
 8003e96:	7840      	ldrb	r0, [r0, #1]
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003e9e:	f7fe feeb 	bl	8002c78 <disk_write>
 8003ea2:	b138      	cbz	r0, 8003eb4 <f_sync+0x3c>
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	9801      	ldr	r0, [sp, #4]
 8003ea8:	f7ff fa54 	bl	8003354 <unlock_fs>
 8003eac:	2501      	movs	r5, #1
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8003eae:	4628      	mov	r0, r5
 8003eb0:	b003      	add	sp, #12
 8003eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				fp->flag &= (BYTE)~FA_DIRTY;
 8003eb4:	7d23      	ldrb	r3, [r4, #20]
 8003eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eba:	7523      	strb	r3, [r4, #20]
			tm = GET_FATTIME();				/* Modified time */
 8003ebc:	f001 feb7 	bl	8005c2e <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8003ec0:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8003ec2:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8003ec4:	9801      	ldr	r0, [sp, #4]
 8003ec6:	f7ff f858 	bl	8002f7a <move_window>
				if (res == FR_OK) {
 8003eca:	4605      	mov	r5, r0
 8003ecc:	b9f8      	cbnz	r0, 8003f0e <f_sync+0x96>
					dir = fp->dir_ptr;
 8003ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8003ed0:	7af3      	ldrb	r3, [r6, #11]
 8003ed2:	f043 0320 	orr.w	r3, r3, #32
 8003ed6:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8003ed8:	68a2      	ldr	r2, [r4, #8]
 8003eda:	6820      	ldr	r0, [r4, #0]
 8003edc:	4631      	mov	r1, r6
 8003ede:	f7fe ffcd 	bl	8002e7c <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8003ee2:	68e1      	ldr	r1, [r4, #12]
 8003ee4:	f106 001c 	add.w	r0, r6, #28
 8003ee8:	f7fe feea 	bl	8002cc0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8003eec:	4639      	mov	r1, r7
 8003eee:	f106 0016 	add.w	r0, r6, #22
 8003ef2:	f7fe fee5 	bl	8002cc0 <st_dword>
					fs->wflag = 1;
 8003ef6:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ef8:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8003efa:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8003efc:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8003efe:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8003f00:	f7fe fff1 	bl	8002ee6 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003f04:	7d23      	ldrb	r3, [r4, #20]
 8003f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8003f0a:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8003f0c:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, res);
 8003f0e:	4629      	mov	r1, r5
 8003f10:	9801      	ldr	r0, [sp, #4]
 8003f12:	f7ff fa1f 	bl	8003354 <unlock_fs>
 8003f16:	e7ca      	b.n	8003eae <f_sync+0x36>

08003f18 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8003f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f1a:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8003f1c:	f7ff ffac 	bl	8003e78 <f_sync>
	if (res == FR_OK)
 8003f20:	4604      	mov	r4, r0
 8003f22:	b978      	cbnz	r0, 8003f44 <f_close+0x2c>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8003f24:	a901      	add	r1, sp, #4
 8003f26:	4628      	mov	r0, r5
 8003f28:	f7ff fa1f 	bl	800336a <validate>
		if (res == FR_OK) {
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	b948      	cbnz	r0, 8003f44 <f_close+0x2c>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8003f30:	6928      	ldr	r0, [r5, #16]
 8003f32:	f7fe ff3d 	bl	8002db0 <dec_lock>
			if (res == FR_OK)
 8003f36:	4604      	mov	r4, r0
 8003f38:	b900      	cbnz	r0, 8003f3c <f_close+0x24>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8003f3a:	6028      	str	r0, [r5, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	9801      	ldr	r0, [sp, #4]
 8003f40:	f7ff fa08 	bl	8003354 <unlock_fs>
#endif
		}
	}
	return res;
}
 8003f44:	4620      	mov	r0, r4
 8003f46:	b003      	add	sp, #12
 8003f48:	bd30      	pop	{r4, r5, pc}
	...

08003f4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003f4c:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <FATFS_LinkDriverEx+0x40>)
 8003f50:	7a5d      	ldrb	r5, [r3, #9]
 8003f52:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8003f56:	b9b5      	cbnz	r5, 8003f86 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003f58:	7a5d      	ldrb	r5, [r3, #9]
 8003f5a:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8003f5c:	7a5d      	ldrb	r5, [r3, #9]
 8003f5e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8003f62:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8003f64:	7a58      	ldrb	r0, [r3, #9]
 8003f66:	4418      	add	r0, r3
 8003f68:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8003f6a:	7a5a      	ldrb	r2, [r3, #9]
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	1c50      	adds	r0, r2, #1
 8003f70:	b2c0      	uxtb	r0, r0
 8003f72:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8003f74:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8003f76:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8003f78:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8003f7a:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8003f7c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8003f7e:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8003f80:	70cc      	strb	r4, [r1, #3]
 8003f82:	4620      	mov	r0, r4
 8003f84:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8003f86:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8003f88:	bd30      	pop	{r4, r5, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000054 	.word	0x20000054

08003f90 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8003f90:	2200      	movs	r2, #0
 8003f92:	f7ff bfdb 	b.w	8003f4c <FATFS_LinkDriverEx>

08003f96 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8003f96:	b513      	push	{r0, r1, r4, lr}

    int ret;

    osSemaphoreDef(SEM);
 8003f98:	2300      	movs	r3, #0
{
 8003f9a:	460c      	mov	r4, r1
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8003f9c:	4668      	mov	r0, sp
 8003f9e:	2101      	movs	r1, #1
    osSemaphoreDef(SEM);
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	9301      	str	r3, [sp, #4]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8003fa4:	f000 f85a 	bl	800405c <osSemaphoreCreate>
 8003fa8:	6020      	str	r0, [r4, #0]
    ret = (*sobj != NULL);

    return ret;
}
 8003faa:	3000      	adds	r0, #0
 8003fac:	bf18      	it	ne
 8003fae:	2001      	movne	r0, #1
 8003fb0:	b002      	add	sp, #8
 8003fb2:	bd10      	pop	{r4, pc}

08003fb4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8003fb4:	b508      	push	{r3, lr}
    osSemaphoreDelete (sobj);
 8003fb6:	f000 f941 	bl	800423c <osSemaphoreDelete>
    return 1;
}
 8003fba:	2001      	movs	r0, #1
 8003fbc:	bd08      	pop	{r3, pc}

08003fbe <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8003fbe:	b508      	push	{r3, lr}
  int ret = 0;

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8003fc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003fc4:	f000 f870 	bl	80040a8 <osSemaphoreWait>
  {
    ret = 1;
  }

  return ret;
}
 8003fc8:	fab0 f080 	clz	r0, r0
 8003fcc:	0940      	lsrs	r0, r0, #5
 8003fce:	bd08      	pop	{r3, pc}

08003fd0 <ff_rel_grant>:

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
  osSemaphoreRelease(sobj);
 8003fd0:	f000 b890 	b.w	80040f4 <osSemaphoreRelease>

08003fd4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003fd4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003fd6:	f001 fa5f 	bl	8005498 <vTaskStartScheduler>
  
  return osOK;
}
 8003fda:	2000      	movs	r0, #0
 8003fdc:	bd08      	pop	{r3, pc}

08003fde <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8003fde:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8003fe0:	f001 fcb8 	bl	8005954 <xTaskGetSchedulerState>
  else
    return 1;
#else
	return (-1);
#endif	
}
 8003fe4:	f110 30ff 	adds.w	r0, r0, #4294967295
 8003fe8:	bf18      	it	ne
 8003fea:	2001      	movne	r0, #1
 8003fec:	bd08      	pop	{r3, pc}

08003fee <osKernelSysTick>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fee:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8003ff2:	b10b      	cbz	r3, 8003ff8 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8003ff4:	f001 ba94 	b.w	8005520 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8003ff8:	f001 ba8c 	b.w	8005514 <xTaskGetTickCount>

08003ffc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004000:	6946      	ldr	r6, [r0, #20]
 8004002:	692a      	ldr	r2, [r5, #16]
 8004004:	6840      	ldr	r0, [r0, #4]
 8004006:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 800400a:	460b      	mov	r3, r1
 800400c:	b086      	sub	sp, #24
 800400e:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004010:	b176      	cbz	r6, 8004030 <osThreadCreate+0x34>
 8004012:	69ad      	ldr	r5, [r5, #24]
 8004014:	b165      	cbz	r5, 8004030 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8004016:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004018:	bf14      	ite	ne
 800401a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800401c:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800401e:	9502      	str	r5, [sp, #8]
 8004020:	e88d 0050 	stmia.w	sp, {r4, r6}
 8004024:	f001 f9d4 	bl	80053d0 <xTaskCreateStatic>
 8004028:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800402a:	9805      	ldr	r0, [sp, #20]
}
 800402c:	b006      	add	sp, #24
 800402e:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8004030:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8004032:	bf14      	ite	ne
 8004034:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004036:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004038:	ad05      	add	r5, sp, #20
 800403a:	b292      	uxth	r2, r2
 800403c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8004040:	f001 f9fd 	bl	800543e <xTaskCreate>
 8004044:	2801      	cmp	r0, #1
 8004046:	d0f0      	beq.n	800402a <osThreadCreate+0x2e>
      return NULL;
 8004048:	2000      	movs	r0, #0
 800404a:	e7ef      	b.n	800402c <osThreadCreate+0x30>

0800404c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800404c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800404e:	2800      	cmp	r0, #0
 8004050:	bf08      	it	eq
 8004052:	2001      	moveq	r0, #1
 8004054:	f001 fb76 	bl	8005744 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004058:	2000      	movs	r0, #0
 800405a:	bd08      	pop	{r3, pc}

0800405c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800405c:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800405e:	6844      	ldr	r4, [r0, #4]
{ 
 8004060:	460d      	mov	r5, r1
  if (semaphore_def->controlblock != NULL){
 8004062:	b16c      	cbz	r4, 8004080 <osSemaphoreCreate+0x24>
    if (count == 1) {
 8004064:	2901      	cmp	r1, #1
 8004066:	d11b      	bne.n	80040a0 <osSemaphoreCreate+0x44>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004068:	2303      	movs	r3, #3
 800406a:	2200      	movs	r2, #0
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	4628      	mov	r0, r5
 8004070:	4623      	mov	r3, r4
 8004072:	4611      	mov	r1, r2
 8004074:	f000 fc90 	bl	8004998 <xQueueGenericCreateStatic>
 8004078:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 800407a:	4628      	mov	r0, r5
 800407c:	b003      	add	sp, #12
 800407e:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8004080:	2901      	cmp	r1, #1
 8004082:	d10f      	bne.n	80040a4 <osSemaphoreCreate+0x48>
      vSemaphoreCreateBinary(sema);
 8004084:	4628      	mov	r0, r5
 8004086:	2203      	movs	r2, #3
 8004088:	4621      	mov	r1, r4
 800408a:	f000 fcce 	bl	8004a2a <xQueueGenericCreate>
 800408e:	4605      	mov	r5, r0
 8004090:	2800      	cmp	r0, #0
 8004092:	d0f2      	beq.n	800407a <osSemaphoreCreate+0x1e>
 8004094:	4623      	mov	r3, r4
 8004096:	4622      	mov	r2, r4
 8004098:	4621      	mov	r1, r4
 800409a:	f000 fceb 	bl	8004a74 <xQueueGenericSend>
 800409e:	e7ec      	b.n	800407a <osSemaphoreCreate+0x1e>
      return NULL;
 80040a0:	2500      	movs	r5, #0
 80040a2:	e7ea      	b.n	800407a <osSemaphoreCreate+0x1e>
 80040a4:	4625      	mov	r5, r4
 80040a6:	e7e8      	b.n	800407a <osSemaphoreCreate+0x1e>

080040a8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80040a8:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80040aa:	2400      	movs	r4, #0
 80040ac:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80040ae:	b1e0      	cbz	r0, 80040ea <osSemaphoreWait+0x42>
 80040b0:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80040b4:	b1a3      	cbz	r3, 80040e0 <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80040b6:	aa01      	add	r2, sp, #4
 80040b8:	4621      	mov	r1, r4
 80040ba:	f000 ffab 	bl	8005014 <xQueueReceiveFromISR>
 80040be:	2801      	cmp	r0, #1
 80040c0:	d002      	beq.n	80040c8 <osSemaphoreWait+0x20>
      return osErrorOS;
 80040c2:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 80040c4:	b002      	add	sp, #8
 80040c6:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80040c8:	9b01      	ldr	r3, [sp, #4]
 80040ca:	b13b      	cbz	r3, 80040dc <osSemaphoreWait+0x34>
 80040cc:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <osSemaphoreWait+0x48>)
 80040ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	f3bf 8f6f 	isb	sy
  return osOK;
 80040dc:	2000      	movs	r0, #0
 80040de:	e7f1      	b.n	80040c4 <osSemaphoreWait+0x1c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80040e0:	f000 fed8 	bl	8004e94 <xQueueSemaphoreTake>
 80040e4:	2801      	cmp	r0, #1
 80040e6:	d1ec      	bne.n	80040c2 <osSemaphoreWait+0x1a>
 80040e8:	e7f8      	b.n	80040dc <osSemaphoreWait+0x34>
    return osErrorParameter;
 80040ea:	2080      	movs	r0, #128	; 0x80
 80040ec:	e7ea      	b.n	80040c4 <osSemaphoreWait+0x1c>
 80040ee:	bf00      	nop
 80040f0:	e000ed04 	.word	0xe000ed04

080040f4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80040f4:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80040f6:	2400      	movs	r4, #0
 80040f8:	9401      	str	r4, [sp, #4]
 80040fa:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 80040fe:	b193      	cbz	r3, 8004126 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004100:	a901      	add	r1, sp, #4
 8004102:	f000 fdcf 	bl	8004ca4 <xQueueGiveFromISR>
 8004106:	2801      	cmp	r0, #1
 8004108:	d113      	bne.n	8004132 <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800410a:	9b01      	ldr	r3, [sp, #4]
 800410c:	b913      	cbnz	r3, 8004114 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 800410e:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8004110:	b002      	add	sp, #8
 8004112:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8004114:	4b08      	ldr	r3, [pc, #32]	; (8004138 <osSemaphoreRelease+0x44>)
 8004116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	e7f3      	b.n	800410e <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004126:	461a      	mov	r2, r3
 8004128:	4619      	mov	r1, r3
 800412a:	f000 fca3 	bl	8004a74 <xQueueGenericSend>
 800412e:	2801      	cmp	r0, #1
 8004130:	d0ed      	beq.n	800410e <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 8004132:	20ff      	movs	r0, #255	; 0xff
 8004134:	e7ec      	b.n	8004110 <osSemaphoreRelease+0x1c>
 8004136:	bf00      	nop
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800413c:	b507      	push	{r0, r1, r2, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800413e:	6882      	ldr	r2, [r0, #8]
 8004140:	b14a      	cbz	r2, 8004156 <osMessageCreate+0x1a>
 8004142:	68c3      	ldr	r3, [r0, #12]
 8004144:	b13b      	cbz	r3, 8004156 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004146:	2100      	movs	r1, #0
 8004148:	9100      	str	r1, [sp, #0]
 800414a:	c803      	ldmia	r0, {r0, r1}
 800414c:	f000 fc24 	bl	8004998 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004150:	b003      	add	sp, #12
 8004152:	f85d fb04 	ldr.w	pc, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004156:	c803      	ldmia	r0, {r0, r1}
 8004158:	2200      	movs	r2, #0
}
 800415a:	b003      	add	sp, #12
 800415c:	f85d eb04 	ldr.w	lr, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004160:	f000 bc63 	b.w	8004a2a <xQueueGenericCreate>

08004164 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8004166:	2400      	movs	r4, #0
{
 8004168:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800416a:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 800416c:	42a2      	cmp	r2, r4
 800416e:	bf08      	it	eq
 8004170:	2201      	moveq	r2, #1
 8004172:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8004176:	b1ab      	cbz	r3, 80041a4 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004178:	4623      	mov	r3, r4
 800417a:	aa03      	add	r2, sp, #12
 800417c:	a901      	add	r1, sp, #4
 800417e:	f000 fd2f 	bl	8004be0 <xQueueGenericSendFromISR>
 8004182:	2801      	cmp	r0, #1
 8004184:	d002      	beq.n	800418c <osMessagePut+0x28>
      return osErrorOS;
 8004186:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8004188:	b004      	add	sp, #16
 800418a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800418c:	9b03      	ldr	r3, [sp, #12]
 800418e:	b13b      	cbz	r3, 80041a0 <osMessagePut+0x3c>
 8004190:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <osMessagePut+0x4c>)
 8004192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	f3bf 8f6f 	isb	sy
  return osOK;
 80041a0:	2000      	movs	r0, #0
 80041a2:	e7f1      	b.n	8004188 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80041a4:	a901      	add	r1, sp, #4
 80041a6:	f000 fc65 	bl	8004a74 <xQueueGenericSend>
 80041aa:	2801      	cmp	r0, #1
 80041ac:	d1eb      	bne.n	8004186 <osMessagePut+0x22>
 80041ae:	e7f7      	b.n	80041a0 <osMessagePut+0x3c>
 80041b0:	e000ed04 	.word	0xe000ed04

080041b4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80041b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041b6:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80041b8:	2600      	movs	r6, #0
{
 80041ba:	4604      	mov	r4, r0
 80041bc:	4617      	mov	r7, r2
 80041be:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 80041c0:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 80041c2:	9602      	str	r6, [sp, #8]
 80041c4:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 80041c6:	b911      	cbnz	r1, 80041ce <osMessageGet+0x1a>
    event.status = osErrorParameter;
 80041c8:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	e017      	b.n	80041fe <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 80041ce:	9600      	str	r6, [sp, #0]
 80041d0:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 80041d4:	b1d3      	cbz	r3, 800420c <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80041d6:	466a      	mov	r2, sp
 80041d8:	a902      	add	r1, sp, #8
 80041da:	f000 ff1b 	bl	8005014 <xQueueReceiveFromISR>
 80041de:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 80041e0:	bf04      	itt	eq
 80041e2:	2310      	moveq	r3, #16
 80041e4:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80041e6:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 80041e8:	bf18      	it	ne
 80041ea:	9601      	strne	r6, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80041ec:	b13b      	cbz	r3, 80041fe <osMessageGet+0x4a>
 80041ee:	4b0d      	ldr	r3, [pc, #52]	; (8004224 <osMessageGet+0x70>)
 80041f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 80041fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004202:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004206:	4620      	mov	r0, r4
 8004208:	b005      	add	sp, #20
 800420a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800420c:	a902      	add	r1, sp, #8
 800420e:	f000 fd9d 	bl	8004d4c <xQueueReceive>
 8004212:	2801      	cmp	r0, #1
 8004214:	d101      	bne.n	800421a <osMessageGet+0x66>
      event.status = osEventMessage;
 8004216:	2310      	movs	r3, #16
 8004218:	e7d7      	b.n	80041ca <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800421a:	2f00      	cmp	r7, #0
 800421c:	bf0c      	ite	eq
 800421e:	2300      	moveq	r3, #0
 8004220:	2340      	movne	r3, #64	; 0x40
 8004222:	e7d2      	b.n	80041ca <osMessageGet+0x16>
 8004224:	e000ed04 	.word	0xe000ed04

08004228 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8004228:	b510      	push	{r4, lr}
 800422a:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 800422e:	b91c      	cbnz	r4, 8004238 <osMessageDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(queue_id);
 8004230:	f000 ff54 	bl	80050dc <vQueueDelete>

  return osOK; 
 8004234:	4620      	mov	r0, r4
 8004236:	bd10      	pop	{r4, pc}
    return osErrorISR;
 8004238:	2082      	movs	r0, #130	; 0x82
}
 800423a:	bd10      	pop	{r4, pc}

0800423c <osSemaphoreDelete>:
 800423c:	f7ff bff4 	b.w	8004228 <osMessageDelete>

08004240 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004240:	f100 0308 	add.w	r3, r0, #8
 8004244:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004246:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800424a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800424c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800424e:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004250:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004252:	6003      	str	r3, [r0, #0]
 8004254:	4770      	bx	lr

08004256 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004256:	2300      	movs	r3, #0
 8004258:	6103      	str	r3, [r0, #16]
 800425a:	4770      	bx	lr

0800425c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800425c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800425e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004268:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800426a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800426c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800426e:	3301      	adds	r3, #1
 8004270:	6003      	str	r3, [r0, #0]
 8004272:	4770      	bx	lr

08004274 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004274:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004276:	1c53      	adds	r3, r2, #1
{
 8004278:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800427a:	d10a      	bne.n	8004292 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800427c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004282:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004284:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004286:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004288:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800428a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800428c:	3301      	adds	r3, #1
 800428e:	6003      	str	r3, [r0, #0]
 8004290:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004292:	f100 0308 	add.w	r3, r0, #8
 8004296:	685c      	ldr	r4, [r3, #4]
 8004298:	6825      	ldr	r5, [r4, #0]
 800429a:	42aa      	cmp	r2, r5
 800429c:	d3ef      	bcc.n	800427e <vListInsert+0xa>
 800429e:	4623      	mov	r3, r4
 80042a0:	e7f9      	b.n	8004296 <vListInsert+0x22>

080042a2 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042a2:	6841      	ldr	r1, [r0, #4]
 80042a4:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80042a6:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042a8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042aa:	6882      	ldr	r2, [r0, #8]
 80042ac:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042ae:	6859      	ldr	r1, [r3, #4]
 80042b0:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042b2:	bf08      	it	eq
 80042b4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80042b6:	2200      	movs	r2, #0
 80042b8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	3a01      	subs	r2, #1
 80042be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042c0:	6818      	ldr	r0, [r3, #0]
}
 80042c2:	4770      	bx	lr

080042c4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042c4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042ca:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <prvTaskExitError+0x3c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3301      	adds	r3, #1
 80042d0:	d008      	beq.n	80042e4 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	e7fe      	b.n	80042e2 <prvTaskExitError+0x1e>
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042f4:	9b01      	ldr	r3, [sp, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0fc      	beq.n	80042f4 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042fa:	b002      	add	sp, #8
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	20000004 	.word	0x20000004

08004304 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004304:	4808      	ldr	r0, [pc, #32]	; (8004328 <prvPortStartFirstTask+0x24>)
 8004306:	6800      	ldr	r0, [r0, #0]
 8004308:	6800      	ldr	r0, [r0, #0]
 800430a:	f380 8808 	msr	MSP, r0
 800430e:	f04f 0000 	mov.w	r0, #0
 8004312:	f380 8814 	msr	CONTROL, r0
 8004316:	b662      	cpsie	i
 8004318:	b661      	cpsie	f
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	df00      	svc	0
 8004324:	bf00      	nop
 8004326:	0000      	.short	0x0000
 8004328:	e000ed08 	.word	0xe000ed08

0800432c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800432c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800433c <vPortEnableVFP+0x10>
 8004330:	6801      	ldr	r1, [r0, #0]
 8004332:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004336:	6001      	str	r1, [r0, #0]
 8004338:	4770      	bx	lr
 800433a:	0000      	.short	0x0000
 800433c:	e000ed88 	.word	0xe000ed88

08004340 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004344:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004348:	4b07      	ldr	r3, [pc, #28]	; (8004368 <pxPortInitialiseStack+0x28>)
 800434a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800434e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004352:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004356:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800435a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800435e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8004362:	3844      	subs	r0, #68	; 0x44
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	080042c5 	.word	0x080042c5
 800436c:	00000000 	.word	0x00000000

08004370 <SVC_Handler>:
	__asm volatile (
 8004370:	4b07      	ldr	r3, [pc, #28]	; (8004390 <pxCurrentTCBConst2>)
 8004372:	6819      	ldr	r1, [r3, #0]
 8004374:	6808      	ldr	r0, [r1, #0]
 8004376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437a:	f380 8809 	msr	PSP, r0
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f380 8811 	msr	BASEPRI, r0
 800438a:	4770      	bx	lr
 800438c:	f3af 8000 	nop.w

08004390 <pxCurrentTCBConst2>:
 8004390:	20003c80 	.word	0x20003c80

08004394 <vPortEnterCritical>:
 8004394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80043a4:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <vPortEnterCritical+0x3c>)
 80043a6:	6813      	ldr	r3, [r2, #0]
 80043a8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80043aa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80043ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80043ae:	d10d      	bne.n	80043cc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043b0:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <vPortEnterCritical+0x40>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80043b8:	d008      	beq.n	80043cc <vPortEnterCritical+0x38>
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	e7fe      	b.n	80043ca <vPortEnterCritical+0x36>
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000004 	.word	0x20000004
 80043d4:	e000ed04 	.word	0xe000ed04

080043d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80043d8:	4a08      	ldr	r2, [pc, #32]	; (80043fc <vPortExitCritical+0x24>)
 80043da:	6813      	ldr	r3, [r2, #0]
 80043dc:	b943      	cbnz	r3, 80043f0 <vPortExitCritical+0x18>
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	e7fe      	b.n	80043ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80043f0:	3b01      	subs	r3, #1
 80043f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043f4:	b90b      	cbnz	r3, 80043fa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	4770      	bx	lr
 80043fc:	20000004 	.word	0x20000004

08004400 <PendSV_Handler>:
	__asm volatile
 8004400:	f3ef 8009 	mrs	r0, PSP
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	4b15      	ldr	r3, [pc, #84]	; (8004460 <pxCurrentTCBConst>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	f01e 0f10 	tst.w	lr, #16
 8004410:	bf08      	it	eq
 8004412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441a:	6010      	str	r0, [r2, #0]
 800441c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004424:	f380 8811 	msr	BASEPRI, r0
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f001 f9ac 	bl	800578c <vTaskSwitchContext>
 8004434:	f04f 0000 	mov.w	r0, #0
 8004438:	f380 8811 	msr	BASEPRI, r0
 800443c:	bc09      	pop	{r0, r3}
 800443e:	6819      	ldr	r1, [r3, #0]
 8004440:	6808      	ldr	r0, [r1, #0]
 8004442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004446:	f01e 0f10 	tst.w	lr, #16
 800444a:	bf08      	it	eq
 800444c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004450:	f380 8809 	msr	PSP, r0
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	f3af 8000 	nop.w

08004460 <pxCurrentTCBConst>:
 8004460:	20003c80 	.word	0x20003c80

08004464 <SysTick_Handler>:
{
 8004464:	b508      	push	{r3, lr}
	__asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004476:	f001 f85b 	bl	8005530 <xTaskIncrementTick>
 800447a:	b118      	cbz	r0, 8004484 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <SysTick_Handler+0x28>)
 800447e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004482:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004484:	2300      	movs	r3, #0
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	bd08      	pop	{r3, pc}
 800448c:	e000ed04 	.word	0xe000ed04

08004490 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004490:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004492:	4909      	ldr	r1, [pc, #36]	; (80044b8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004494:	2300      	movs	r3, #0
 8004496:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004498:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <vPortSetupTimerInterrupt+0x2c>)
 800449c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044a6:	4906      	ldr	r1, [pc, #24]	; (80044c0 <vPortSetupTimerInterrupt+0x30>)
 80044a8:	3b01      	subs	r3, #1
 80044aa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ac:	2307      	movs	r3, #7
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	e000e010 	.word	0xe000e010
 80044b8:	e000e018 	.word	0xe000e018
 80044bc:	2000000c 	.word	0x2000000c
 80044c0:	e000e014 	.word	0xe000e014

080044c4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044c4:	4b39      	ldr	r3, [pc, #228]	; (80045ac <xPortStartScheduler+0xe8>)
 80044c6:	4a3a      	ldr	r2, [pc, #232]	; (80045b0 <xPortStartScheduler+0xec>)
{
 80044c8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044ca:	6819      	ldr	r1, [r3, #0]
 80044cc:	4291      	cmp	r1, r2
 80044ce:	d108      	bne.n	80044e2 <xPortStartScheduler+0x1e>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	e7fe      	b.n	80044e0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	4b33      	ldr	r3, [pc, #204]	; (80045b4 <xPortStartScheduler+0xf0>)
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d108      	bne.n	80044fc <xPortStartScheduler+0x38>
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	e7fe      	b.n	80044fa <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044fc:	4b2e      	ldr	r3, [pc, #184]	; (80045b8 <xPortStartScheduler+0xf4>)
 80044fe:	781a      	ldrb	r2, [r3, #0]
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004504:	22ff      	movs	r2, #255	; 0xff
 8004506:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004508:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800450a:	4a2c      	ldr	r2, [pc, #176]	; (80045bc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800450c:	b2db      	uxtb	r3, r3
 800450e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004512:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004516:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800451a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800451c:	4b28      	ldr	r3, [pc, #160]	; (80045c0 <xPortStartScheduler+0xfc>)
 800451e:	2207      	movs	r2, #7
 8004520:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004522:	2100      	movs	r1, #0
 8004524:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004528:	0600      	lsls	r0, r0, #24
 800452a:	f102 34ff 	add.w	r4, r2, #4294967295
 800452e:	d40d      	bmi.n	800454c <xPortStartScheduler+0x88>
 8004530:	b101      	cbz	r1, 8004534 <xPortStartScheduler+0x70>
 8004532:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	2a03      	cmp	r2, #3
 8004538:	d011      	beq.n	800455e <xPortStartScheduler+0x9a>
 800453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	e7fe      	b.n	800454a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800454c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004550:	0052      	lsls	r2, r2, #1
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	f88d 2003 	strb.w	r2, [sp, #3]
 8004558:	2101      	movs	r1, #1
 800455a:	4622      	mov	r2, r4
 800455c:	e7e2      	b.n	8004524 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800455e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004560:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004564:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004566:	9b01      	ldr	r3, [sp, #4]
 8004568:	4a13      	ldr	r2, [pc, #76]	; (80045b8 <xPortStartScheduler+0xf4>)
 800456a:	b2db      	uxtb	r3, r3
 800456c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800456e:	4b15      	ldr	r3, [pc, #84]	; (80045c4 <xPortStartScheduler+0x100>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004576:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800457e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8004580:	f7ff ff86 	bl	8004490 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004584:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <xPortStartScheduler+0x104>)
 8004586:	2400      	movs	r4, #0
 8004588:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800458a:	f7ff fecf 	bl	800432c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800458e:	4a0f      	ldr	r2, [pc, #60]	; (80045cc <xPortStartScheduler+0x108>)
 8004590:	6813      	ldr	r3, [r2, #0]
 8004592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004596:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004598:	f7ff feb4 	bl	8004304 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800459c:	f001 f8f6 	bl	800578c <vTaskSwitchContext>
	prvTaskExitError();
 80045a0:	f7ff fe90 	bl	80042c4 <prvTaskExitError>
}
 80045a4:	4620      	mov	r0, r4
 80045a6:	b002      	add	sp, #8
 80045a8:	bd10      	pop	{r4, pc}
 80045aa:	bf00      	nop
 80045ac:	e000ed00 	.word	0xe000ed00
 80045b0:	410fc271 	.word	0x410fc271
 80045b4:	410fc270 	.word	0x410fc270
 80045b8:	e000e400 	.word	0xe000e400
 80045bc:	20000060 	.word	0x20000060
 80045c0:	20000064 	.word	0x20000064
 80045c4:	e000ed20 	.word	0xe000ed20
 80045c8:	20000004 	.word	0x20000004
 80045cc:	e000ef34 	.word	0xe000ef34

080045d0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80045d0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045d4:	2b0f      	cmp	r3, #15
 80045d6:	d90e      	bls.n	80045f6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045d8:	4a10      	ldr	r2, [pc, #64]	; (800461c <vPortValidateInterruptPriority+0x4c>)
 80045da:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045dc:	4a10      	ldr	r2, [pc, #64]	; (8004620 <vPortValidateInterruptPriority+0x50>)
 80045de:	7812      	ldrb	r2, [r2, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d908      	bls.n	80045f6 <vPortValidateInterruptPriority+0x26>
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	e7fe      	b.n	80045f4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045f6:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <vPortValidateInterruptPriority+0x54>)
 80045f8:	4a0b      	ldr	r2, [pc, #44]	; (8004628 <vPortValidateInterruptPriority+0x58>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004602:	4293      	cmp	r3, r2
 8004604:	d908      	bls.n	8004618 <vPortValidateInterruptPriority+0x48>
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	e7fe      	b.n	8004616 <vPortValidateInterruptPriority+0x46>
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	e000e3f0 	.word	0xe000e3f0
 8004620:	20000060 	.word	0x20000060
 8004624:	e000ed0c 	.word	0xe000ed0c
 8004628:	20000064 	.word	0x20000064

0800462c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800462c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <prvInsertBlockIntoFreeList+0x40>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4282      	cmp	r2, r0
 8004634:	d318      	bcc.n	8004668 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004636:	685c      	ldr	r4, [r3, #4]
 8004638:	1919      	adds	r1, r3, r4
 800463a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800463c:	bf01      	itttt	eq
 800463e:	6841      	ldreq	r1, [r0, #4]
 8004640:	4618      	moveq	r0, r3
 8004642:	1909      	addeq	r1, r1, r4
 8004644:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004646:	6844      	ldr	r4, [r0, #4]
 8004648:	1901      	adds	r1, r0, r4
 800464a:	428a      	cmp	r2, r1
 800464c:	d107      	bne.n	800465e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800464e:	4908      	ldr	r1, [pc, #32]	; (8004670 <prvInsertBlockIntoFreeList+0x44>)
 8004650:	6809      	ldr	r1, [r1, #0]
 8004652:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004654:	bf1f      	itttt	ne
 8004656:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004658:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800465a:	1909      	addne	r1, r1, r4
 800465c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800465e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004660:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004662:	bf18      	it	ne
 8004664:	6018      	strne	r0, [r3, #0]
 8004666:	bd10      	pop	{r4, pc}
 8004668:	4613      	mov	r3, r2
 800466a:	e7e1      	b.n	8004630 <prvInsertBlockIntoFreeList+0x4>
 800466c:	20003c78 	.word	0x20003c78
 8004670:	20000068 	.word	0x20000068

08004674 <pvPortMalloc>:
{
 8004674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004678:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800467a:	f000 ff43 	bl	8005504 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800467e:	493e      	ldr	r1, [pc, #248]	; (8004778 <pvPortMalloc+0x104>)
 8004680:	4d3e      	ldr	r5, [pc, #248]	; (800477c <pvPortMalloc+0x108>)
 8004682:	680b      	ldr	r3, [r1, #0]
 8004684:	bb0b      	cbnz	r3, 80046ca <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8004686:	4a3e      	ldr	r2, [pc, #248]	; (8004780 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004688:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800468a:	bf1f      	itttt	ne
 800468c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800468e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004692:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8004696:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004698:	bf14      	ite	ne
 800469a:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800469c:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046a0:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80046a2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046a4:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046a8:	4e36      	ldr	r6, [pc, #216]	; (8004784 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80046aa:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046ac:	2000      	movs	r0, #0
 80046ae:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046b0:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80046b2:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046b4:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046b6:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046b8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046ba:	4b33      	ldr	r3, [pc, #204]	; (8004788 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046bc:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046be:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046c0:	4b32      	ldr	r3, [pc, #200]	; (800478c <pvPortMalloc+0x118>)
 80046c2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80046c8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046ca:	682f      	ldr	r7, [r5, #0]
 80046cc:	4227      	tst	r7, r4
 80046ce:	d116      	bne.n	80046fe <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80046d0:	2c00      	cmp	r4, #0
 80046d2:	d041      	beq.n	8004758 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80046d4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046d8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046da:	bf1c      	itt	ne
 80046dc:	f023 0307 	bicne.w	r3, r3, #7
 80046e0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046e2:	b163      	cbz	r3, 80046fe <pvPortMalloc+0x8a>
 80046e4:	4a29      	ldr	r2, [pc, #164]	; (800478c <pvPortMalloc+0x118>)
 80046e6:	6816      	ldr	r6, [r2, #0]
 80046e8:	42b3      	cmp	r3, r6
 80046ea:	4690      	mov	r8, r2
 80046ec:	d807      	bhi.n	80046fe <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80046ee:	4a25      	ldr	r2, [pc, #148]	; (8004784 <pvPortMalloc+0x110>)
 80046f0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046f2:	6868      	ldr	r0, [r5, #4]
 80046f4:	4283      	cmp	r3, r0
 80046f6:	d804      	bhi.n	8004702 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80046f8:	6809      	ldr	r1, [r1, #0]
 80046fa:	428d      	cmp	r5, r1
 80046fc:	d107      	bne.n	800470e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80046fe:	2400      	movs	r4, #0
 8004700:	e02a      	b.n	8004758 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004702:	682c      	ldr	r4, [r5, #0]
 8004704:	2c00      	cmp	r4, #0
 8004706:	d0f7      	beq.n	80046f8 <pvPortMalloc+0x84>
 8004708:	462a      	mov	r2, r5
 800470a:	4625      	mov	r5, r4
 800470c:	e7f1      	b.n	80046f2 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800470e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004710:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004712:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004714:	1ac2      	subs	r2, r0, r3
 8004716:	2a10      	cmp	r2, #16
 8004718:	d90f      	bls.n	800473a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800471a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800471c:	0741      	lsls	r1, r0, #29
 800471e:	d008      	beq.n	8004732 <pvPortMalloc+0xbe>
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	e7fe      	b.n	8004730 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004732:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004734:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004736:	f7ff ff79 	bl	800462c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800473a:	4913      	ldr	r1, [pc, #76]	; (8004788 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800473c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800473e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004740:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004742:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004744:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8004746:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800474a:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800474e:	bf38      	it	cc
 8004750:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004752:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004754:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004756:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8004758:	f000 ff7c 	bl	8005654 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800475c:	0763      	lsls	r3, r4, #29
 800475e:	d008      	beq.n	8004772 <pvPortMalloc+0xfe>
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	e7fe      	b.n	8004770 <pvPortMalloc+0xfc>
}
 8004772:	4620      	mov	r0, r4
 8004774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004778:	20000068 	.word	0x20000068
 800477c:	20003c6c 	.word	0x20003c6c
 8004780:	2000006c 	.word	0x2000006c
 8004784:	20003c78 	.word	0x20003c78
 8004788:	20003c74 	.word	0x20003c74
 800478c:	20003c70 	.word	0x20003c70

08004790 <vPortFree>:
{
 8004790:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004792:	4604      	mov	r4, r0
 8004794:	b370      	cbz	r0, 80047f4 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004796:	4a18      	ldr	r2, [pc, #96]	; (80047f8 <vPortFree+0x68>)
 8004798:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	4213      	tst	r3, r2
 80047a0:	d108      	bne.n	80047b4 <vPortFree+0x24>
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	e7fe      	b.n	80047b2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047b4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80047b8:	b141      	cbz	r1, 80047cc <vPortFree+0x3c>
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	e7fe      	b.n	80047ca <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047cc:	ea23 0302 	bic.w	r3, r3, r2
 80047d0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80047d4:	f000 fe96 	bl	8005504 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047d8:	4a08      	ldr	r2, [pc, #32]	; (80047fc <vPortFree+0x6c>)
 80047da:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80047de:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047e0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047e4:	440b      	add	r3, r1
 80047e6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047e8:	f7ff ff20 	bl	800462c <prvInsertBlockIntoFreeList>
}
 80047ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80047f0:	f000 bf30 	b.w	8005654 <xTaskResumeAll>
 80047f4:	bd10      	pop	{r4, pc}
 80047f6:	bf00      	nop
 80047f8:	20003c6c 	.word	0x20003c6c
 80047fc:	20003c70 	.word	0x20003c70

08004800 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004800:	b510      	push	{r4, lr}
 8004802:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004804:	f7ff fdc6 	bl	8004394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004808:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800480a:	f7ff fde5 	bl	80043d8 <vPortExitCritical>

	return xReturn;
}
 800480e:	fab4 f084 	clz	r0, r4
 8004812:	0940      	lsrs	r0, r0, #5
 8004814:	bd10      	pop	{r4, pc}

08004816 <prvCopyDataToQueue>:
{
 8004816:	b570      	push	{r4, r5, r6, lr}
 8004818:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800481a:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800481c:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800481e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004820:	b942      	cbnz	r2, 8004834 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004822:	6805      	ldr	r5, [r0, #0]
 8004824:	b99d      	cbnz	r5, 800484e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004826:	6840      	ldr	r0, [r0, #4]
 8004828:	f001 f8f8 	bl	8005a1c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800482c:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800482e:	3601      	adds	r6, #1
 8004830:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004832:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004834:	b96d      	cbnz	r5, 8004852 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004836:	6880      	ldr	r0, [r0, #8]
 8004838:	f001 ff48 	bl	80066cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800483c:	68a3      	ldr	r3, [r4, #8]
 800483e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004840:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004842:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004844:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004846:	4293      	cmp	r3, r2
 8004848:	d301      	bcc.n	800484e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800484e:	2000      	movs	r0, #0
 8004850:	e7ed      	b.n	800482e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004852:	68c0      	ldr	r0, [r0, #12]
 8004854:	f001 ff3a 	bl	80066cc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004858:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800485a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800485c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800485e:	425b      	negs	r3, r3
 8004860:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004862:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004864:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004866:	bf3e      	ittt	cc
 8004868:	6862      	ldrcc	r2, [r4, #4]
 800486a:	189b      	addcc	r3, r3, r2
 800486c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800486e:	2d02      	cmp	r5, #2
 8004870:	d1ed      	bne.n	800484e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004872:	b10e      	cbz	r6, 8004878 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8004874:	3e01      	subs	r6, #1
 8004876:	e7ea      	b.n	800484e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8004878:	4630      	mov	r0, r6
 800487a:	e7d8      	b.n	800482e <prvCopyDataToQueue+0x18>

0800487c <prvCopyDataFromQueue>:
{
 800487c:	4603      	mov	r3, r0
 800487e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004882:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004884:	b162      	cbz	r2, 80048a0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004886:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004888:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800488a:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800488c:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800488e:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004890:	bf24      	itt	cs
 8004892:	6819      	ldrcs	r1, [r3, #0]
 8004894:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004896:	68d9      	ldr	r1, [r3, #12]
}
 8004898:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800489c:	f001 bf16 	b.w	80066cc <memcpy>
}
 80048a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <prvUnlockQueue>:
{
 80048a6:	b570      	push	{r4, r5, r6, lr}
 80048a8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80048aa:	f7ff fd73 	bl	8004394 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80048ae:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048b2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80048b6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048b8:	2d00      	cmp	r5, #0
 80048ba:	dc14      	bgt.n	80048e6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80048bc:	23ff      	movs	r3, #255	; 0xff
 80048be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80048c2:	f7ff fd89 	bl	80043d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80048c6:	f7ff fd65 	bl	8004394 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80048ca:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048ce:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80048d2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048d4:	2d00      	cmp	r5, #0
 80048d6:	dc12      	bgt.n	80048fe <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80048d8:	23ff      	movs	r3, #255	; 0xff
 80048da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80048de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80048e2:	f7ff bd79 	b.w	80043d8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0e7      	beq.n	80048bc <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048ec:	4630      	mov	r0, r6
 80048ee:	f000 ffa1 	bl	8005834 <xTaskRemoveFromEventList>
 80048f2:	b108      	cbz	r0, 80048f8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80048f4:	f001 f828 	bl	8005948 <vTaskMissedYield>
 80048f8:	3d01      	subs	r5, #1
 80048fa:	b26d      	sxtb	r5, r5
 80048fc:	e7dc      	b.n	80048b8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048fe:	6923      	ldr	r3, [r4, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0e9      	beq.n	80048d8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004904:	4630      	mov	r0, r6
 8004906:	f000 ff95 	bl	8005834 <xTaskRemoveFromEventList>
 800490a:	b108      	cbz	r0, 8004910 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800490c:	f001 f81c 	bl	8005948 <vTaskMissedYield>
 8004910:	3d01      	subs	r5, #1
 8004912:	b26d      	sxtb	r5, r5
 8004914:	e7de      	b.n	80048d4 <prvUnlockQueue+0x2e>
	...

08004918 <xQueueGenericReset>:
{
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800491c:	4604      	mov	r4, r0
 800491e:	b940      	cbnz	r0, 8004932 <xQueueGenericReset+0x1a>
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	e7fe      	b.n	8004930 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8004932:	f7ff fd2f 	bl	8004394 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004936:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004938:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800493a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800493c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800493e:	4343      	muls	r3, r0
 8004940:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004942:	1a1b      	subs	r3, r3, r0
 8004944:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004946:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004948:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800494a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800494c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800494e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004950:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004954:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004958:	b995      	cbnz	r5, 8004980 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800495a:	6923      	ldr	r3, [r4, #16]
 800495c:	b163      	cbz	r3, 8004978 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800495e:	f104 0010 	add.w	r0, r4, #16
 8004962:	f000 ff67 	bl	8005834 <xTaskRemoveFromEventList>
 8004966:	b138      	cbz	r0, 8004978 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8004968:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <xQueueGenericReset+0x7c>)
 800496a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004978:	f7ff fd2e 	bl	80043d8 <vPortExitCritical>
}
 800497c:	2001      	movs	r0, #1
 800497e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004980:	f104 0010 	add.w	r0, r4, #16
 8004984:	f7ff fc5c 	bl	8004240 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004988:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800498c:	f7ff fc58 	bl	8004240 <vListInitialise>
 8004990:	e7f2      	b.n	8004978 <xQueueGenericReset+0x60>
 8004992:	bf00      	nop
 8004994:	e000ed04 	.word	0xe000ed04

08004998 <xQueueGenericCreateStatic>:
	{
 8004998:	b513      	push	{r0, r1, r4, lr}
 800499a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800499c:	b940      	cbnz	r0, 80049b0 <xQueueGenericCreateStatic+0x18>
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	e7fe      	b.n	80049ae <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 80049b0:	b943      	cbnz	r3, 80049c4 <xQueueGenericCreateStatic+0x2c>
 80049b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	e7fe      	b.n	80049c2 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049c4:	b14a      	cbz	r2, 80049da <xQueueGenericCreateStatic+0x42>
 80049c6:	b9d9      	cbnz	r1, 8004a00 <xQueueGenericCreateStatic+0x68>
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	e7fe      	b.n	80049d8 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049da:	b189      	cbz	r1, 8004a00 <xQueueGenericCreateStatic+0x68>
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	e7fe      	b.n	80049ec <xQueueGenericCreateStatic+0x54>
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	e7fe      	b.n	80049fe <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a00:	2348      	movs	r3, #72	; 0x48
 8004a02:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a04:	9b01      	ldr	r3, [sp, #4]
 8004a06:	2b48      	cmp	r3, #72	; 0x48
 8004a08:	d1f1      	bne.n	80049ee <xQueueGenericCreateStatic+0x56>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a0a:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a0c:	2900      	cmp	r1, #0
 8004a0e:	bf08      	it	eq
 8004a10:	4622      	moveq	r2, r4
	pxNewQueue->uxLength = uxQueueLength;
 8004a12:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a14:	6421      	str	r1, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a16:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a1a:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f7ff ff7a 	bl	8004918 <xQueueGenericReset>
	}
 8004a24:	4620      	mov	r0, r4
 8004a26:	b002      	add	sp, #8
 8004a28:	bd10      	pop	{r4, pc}

08004a2a <xQueueGenericCreate>:
	{
 8004a2a:	b570      	push	{r4, r5, r6, lr}
 8004a2c:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a2e:	4606      	mov	r6, r0
 8004a30:	b940      	cbnz	r0, 8004a44 <xQueueGenericCreate+0x1a>
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	e7fe      	b.n	8004a42 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a44:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004a46:	3048      	adds	r0, #72	; 0x48
 8004a48:	f7ff fe14 	bl	8004674 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	b150      	cbz	r0, 8004a66 <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a56:	b945      	cbnz	r5, 8004a6a <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a58:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004a5a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a5c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a5e:	2101      	movs	r1, #1
 8004a60:	4620      	mov	r0, r4
 8004a62:	f7ff ff59 	bl	8004918 <xQueueGenericReset>
	}
 8004a66:	4620      	mov	r0, r4
 8004a68:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004a6a:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a6e:	6003      	str	r3, [r0, #0]
 8004a70:	e7f3      	b.n	8004a5a <xQueueGenericCreate+0x30>
	...

08004a74 <xQueueGenericSend>:
{
 8004a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a78:	4689      	mov	r9, r1
 8004a7a:	9201      	str	r2, [sp, #4]
 8004a7c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004a7e:	4604      	mov	r4, r0
 8004a80:	b940      	cbnz	r0, 8004a94 <xQueueGenericSend+0x20>
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	e7fe      	b.n	8004a92 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a94:	2900      	cmp	r1, #0
 8004a96:	f040 8088 	bne.w	8004baa <xQueueGenericSend+0x136>
 8004a9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8084 	beq.w	8004baa <xQueueGenericSend+0x136>
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	e7fe      	b.n	8004ab2 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ab4:	9e01      	ldr	r6, [sp, #4]
 8004ab6:	2e00      	cmp	r6, #0
 8004ab8:	f000 8082 	beq.w	8004bc0 <xQueueGenericSend+0x14c>
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	e7fe      	b.n	8004acc <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ace:	9d01      	ldr	r5, [sp, #4]
 8004ad0:	b91d      	cbnz	r5, 8004ada <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8004ad2:	f7ff fc81 	bl	80043d8 <vPortExitCritical>
			return errQUEUE_FULL;
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	e058      	b.n	8004b8c <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8004ada:	b916      	cbnz	r6, 8004ae2 <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004adc:	a802      	add	r0, sp, #8
 8004ade:	f000 feeb 	bl	80058b8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004ae2:	f7ff fc79 	bl	80043d8 <vPortExitCritical>
		vTaskSuspendAll();
 8004ae6:	f000 fd0d 	bl	8005504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004aea:	f7ff fc53 	bl	8004394 <vPortEnterCritical>
 8004aee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004af2:	2bff      	cmp	r3, #255	; 0xff
 8004af4:	bf08      	it	eq
 8004af6:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8004afa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004afe:	2bff      	cmp	r3, #255	; 0xff
 8004b00:	bf08      	it	eq
 8004b02:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8004b06:	f7ff fc67 	bl	80043d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b0a:	a901      	add	r1, sp, #4
 8004b0c:	a802      	add	r0, sp, #8
 8004b0e:	f000 fedf 	bl	80058d0 <xTaskCheckForTimeOut>
 8004b12:	2800      	cmp	r0, #0
 8004b14:	d143      	bne.n	8004b9e <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b16:	f7ff fc3d 	bl	8004394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b1a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004b1c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004b1e:	f7ff fc5b 	bl	80043d8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b22:	42ae      	cmp	r6, r5
 8004b24:	d135      	bne.n	8004b92 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b26:	9901      	ldr	r1, [sp, #4]
 8004b28:	f104 0010 	add.w	r0, r4, #16
 8004b2c:	f000 fe68 	bl	8005800 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b30:	4620      	mov	r0, r4
 8004b32:	f7ff feb8 	bl	80048a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b36:	f000 fd8d 	bl	8005654 <xTaskResumeAll>
 8004b3a:	b938      	cbnz	r0, 8004b4c <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8004b3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b40:	f8ca 3000 	str.w	r3, [sl]
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004b4e:	f7ff fc21 	bl	8004394 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004b54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d301      	bcc.n	8004b5e <xQueueGenericSend+0xea>
 8004b5a:	2f02      	cmp	r7, #2
 8004b5c:	d1b7      	bne.n	8004ace <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b5e:	463a      	mov	r2, r7
 8004b60:	4649      	mov	r1, r9
 8004b62:	4620      	mov	r0, r4
 8004b64:	f7ff fe57 	bl	8004816 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b6a:	b11b      	cbz	r3, 8004b74 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004b70:	f000 fe60 	bl	8005834 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004b74:	b138      	cbz	r0, 8004b86 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8004b76:	4b19      	ldr	r3, [pc, #100]	; (8004bdc <xQueueGenericSend+0x168>)
 8004b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004b86:	f7ff fc27 	bl	80043d8 <vPortExitCritical>
				return pdPASS;
 8004b8a:	2001      	movs	r0, #1
}
 8004b8c:	b004      	add	sp, #16
 8004b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004b92:	4620      	mov	r0, r4
 8004b94:	f7ff fe87 	bl	80048a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b98:	f000 fd5c 	bl	8005654 <xTaskResumeAll>
 8004b9c:	e7d6      	b.n	8004b4c <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f7ff fe81 	bl	80048a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ba4:	f000 fd56 	bl	8005654 <xTaskResumeAll>
 8004ba8:	e795      	b.n	8004ad6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004baa:	2f02      	cmp	r7, #2
 8004bac:	d102      	bne.n	8004bb4 <xQueueGenericSend+0x140>
 8004bae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d10a      	bne.n	8004bca <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bb4:	f000 fece 	bl	8005954 <xTaskGetSchedulerState>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	f43f af7b 	beq.w	8004ab4 <xQueueGenericSend+0x40>
 8004bbe:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004bc0:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8004bc4:	f8df a014 	ldr.w	sl, [pc, #20]	; 8004bdc <xQueueGenericSend+0x168>
 8004bc8:	e7c1      	b.n	8004b4e <xQueueGenericSend+0xda>
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	e7fe      	b.n	8004bda <xQueueGenericSend+0x166>
 8004bdc:	e000ed04 	.word	0xe000ed04

08004be0 <xQueueGenericSendFromISR>:
{
 8004be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004be4:	4688      	mov	r8, r1
 8004be6:	4691      	mov	r9, r2
 8004be8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004bea:	4604      	mov	r4, r0
 8004bec:	b940      	cbnz	r0, 8004c00 <xQueueGenericSendFromISR+0x20>
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	e7fe      	b.n	8004bfe <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c00:	bb09      	cbnz	r1, 8004c46 <xQueueGenericSendFromISR+0x66>
 8004c02:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004c04:	b1fb      	cbz	r3, 8004c46 <xQueueGenericSendFromISR+0x66>
 8004c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	e7fe      	b.n	8004c16 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c1c:	f000 fe0a 	bl	8005834 <xTaskRemoveFromEventList>
 8004c20:	2800      	cmp	r0, #0
 8004c22:	d034      	beq.n	8004c8e <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8004c24:	f1b9 0f00 	cmp.w	r9, #0
 8004c28:	d031      	beq.n	8004c8e <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c2a:	2001      	movs	r0, #1
 8004c2c:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8004c30:	f386 8811 	msr	BASEPRI, r6
}
 8004c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c38:	3501      	adds	r5, #1
 8004c3a:	b26d      	sxtb	r5, r5
 8004c3c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004c40:	e025      	b.n	8004c8e <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8004c42:	2000      	movs	r0, #0
 8004c44:	e7f4      	b.n	8004c30 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c46:	2f02      	cmp	r7, #2
 8004c48:	d102      	bne.n	8004c50 <xQueueGenericSendFromISR+0x70>
 8004c4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d120      	bne.n	8004c92 <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c50:	f7ff fcbe 	bl	80045d0 <vPortValidateInterruptPriority>
	__asm volatile
 8004c54:	f3ef 8611 	mrs	r6, BASEPRI
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d301      	bcc.n	8004c74 <xQueueGenericSendFromISR+0x94>
 8004c70:	2f02      	cmp	r7, #2
 8004c72:	d1e6      	bne.n	8004c42 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c74:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c78:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c7a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f7ff fdc9 	bl	8004816 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004c84:	1c6b      	adds	r3, r5, #1
 8004c86:	d1d7      	bne.n	8004c38 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1c4      	bne.n	8004c18 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8004c8e:	2001      	movs	r0, #1
 8004c90:	e7ce      	b.n	8004c30 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	e7fe      	b.n	8004ca2 <xQueueGenericSendFromISR+0xc2>

08004ca4 <xQueueGiveFromISR>:
{
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004ca8:	4604      	mov	r4, r0
 8004caa:	b940      	cbnz	r0, 8004cbe <xQueueGiveFromISR+0x1a>
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	e7fe      	b.n	8004cbc <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004cbe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004cc0:	b143      	cbz	r3, 8004cd4 <xQueueGiveFromISR+0x30>
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	e7fe      	b.n	8004cd2 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004cd4:	6803      	ldr	r3, [r0, #0]
 8004cd6:	b90b      	cbnz	r3, 8004cdc <xQueueGiveFromISR+0x38>
 8004cd8:	6843      	ldr	r3, [r0, #4]
 8004cda:	bb73      	cbnz	r3, 8004d3a <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cdc:	f7ff fc78 	bl	80045d0 <vPortValidateInterruptPriority>
	__asm volatile
 8004ce0:	f3ef 8611 	mrs	r6, BASEPRI
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cf4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004cf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d301      	bcc.n	8004d00 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	e014      	b.n	8004d2a <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d00:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d04:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d06:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d08:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	d110      	bne.n	8004d30 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d10:	b90b      	cbnz	r3, 8004d16 <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 8004d12:	2001      	movs	r0, #1
 8004d14:	e009      	b.n	8004d2a <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d16:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d1a:	f000 fd8b 	bl	8005834 <xTaskRemoveFromEventList>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d0f7      	beq.n	8004d12 <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 8004d22:	2d00      	cmp	r5, #0
 8004d24:	d0f5      	beq.n	8004d12 <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d26:	2001      	movs	r0, #1
 8004d28:	6028      	str	r0, [r5, #0]
	__asm volatile
 8004d2a:	f386 8811 	msr	BASEPRI, r6
}
 8004d2e:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d30:	3301      	adds	r3, #1
 8004d32:	b25b      	sxtb	r3, r3
 8004d34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d38:	e7eb      	b.n	8004d12 <xQueueGiveFromISR+0x6e>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	e7fe      	b.n	8004d4a <xQueueGiveFromISR+0xa6>

08004d4c <xQueueReceive>:
{
 8004d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d50:	b085      	sub	sp, #20
 8004d52:	4688      	mov	r8, r1
 8004d54:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004d56:	4604      	mov	r4, r0
 8004d58:	b940      	cbnz	r0, 8004d6c <xQueueReceive+0x20>
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	e7fe      	b.n	8004d6a <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d6c:	2900      	cmp	r1, #0
 8004d6e:	f040 8086 	bne.w	8004e7e <xQueueReceive+0x132>
 8004d72:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 8082 	beq.w	8004e7e <xQueueReceive+0x132>
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	e7fe      	b.n	8004d8a <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d8c:	9e01      	ldr	r6, [sp, #4]
 8004d8e:	2e00      	cmp	r6, #0
 8004d90:	d07a      	beq.n	8004e88 <xQueueReceive+0x13c>
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	e7fe      	b.n	8004da2 <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004da4:	9d01      	ldr	r5, [sp, #4]
 8004da6:	b91d      	cbnz	r5, 8004db0 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 8004da8:	f7ff fb16 	bl	80043d8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004dac:	2000      	movs	r0, #0
 8004dae:	e052      	b.n	8004e56 <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 8004db0:	b916      	cbnz	r6, 8004db8 <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004db2:	a802      	add	r0, sp, #8
 8004db4:	f000 fd80 	bl	80058b8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004db8:	f7ff fb0e 	bl	80043d8 <vPortExitCritical>
		vTaskSuspendAll();
 8004dbc:	f000 fba2 	bl	8005504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dc0:	f7ff fae8 	bl	8004394 <vPortEnterCritical>
 8004dc4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004dc8:	2bff      	cmp	r3, #255	; 0xff
 8004dca:	bf08      	it	eq
 8004dcc:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8004dd0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004dd4:	2bff      	cmp	r3, #255	; 0xff
 8004dd6:	bf08      	it	eq
 8004dd8:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8004ddc:	f7ff fafc 	bl	80043d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004de0:	a901      	add	r1, sp, #4
 8004de2:	a802      	add	r0, sp, #8
 8004de4:	f000 fd74 	bl	80058d0 <xTaskCheckForTimeOut>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d13d      	bne.n	8004e68 <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dec:	4620      	mov	r0, r4
 8004dee:	f7ff fd07 	bl	8004800 <prvIsQueueEmpty>
 8004df2:	b398      	cbz	r0, 8004e5c <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004df4:	9901      	ldr	r1, [sp, #4]
 8004df6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004dfa:	f000 fd01 	bl	8005800 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dfe:	4620      	mov	r0, r4
 8004e00:	f7ff fd51 	bl	80048a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e04:	f000 fc26 	bl	8005654 <xTaskResumeAll>
 8004e08:	b938      	cbnz	r0, 8004e1a <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 8004e0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004e0e:	f8c9 3000 	str.w	r3, [r9]
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004e1c:	f7ff faba 	bl	8004394 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e20:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e22:	2d00      	cmp	r5, #0
 8004e24:	d0be      	beq.n	8004da4 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e26:	4641      	mov	r1, r8
 8004e28:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e2a:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e2c:	f7ff fd26 	bl	800487c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e30:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e32:	6923      	ldr	r3, [r4, #16]
 8004e34:	b163      	cbz	r3, 8004e50 <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e36:	f104 0010 	add.w	r0, r4, #16
 8004e3a:	f000 fcfb 	bl	8005834 <xTaskRemoveFromEventList>
 8004e3e:	b138      	cbz	r0, 8004e50 <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 8004e40:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <xQueueReceive+0x144>)
 8004e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004e50:	f7ff fac2 	bl	80043d8 <vPortExitCritical>
				return pdPASS;
 8004e54:	2001      	movs	r0, #1
}
 8004e56:	b005      	add	sp, #20
 8004e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f7ff fd22 	bl	80048a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e62:	f000 fbf7 	bl	8005654 <xTaskResumeAll>
 8004e66:	e7d8      	b.n	8004e1a <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 8004e68:	4620      	mov	r0, r4
 8004e6a:	f7ff fd1c 	bl	80048a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e6e:	f000 fbf1 	bl	8005654 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e72:	4620      	mov	r0, r4
 8004e74:	f7ff fcc4 	bl	8004800 <prvIsQueueEmpty>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d0ce      	beq.n	8004e1a <xQueueReceive+0xce>
 8004e7c:	e796      	b.n	8004dac <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e7e:	f000 fd69 	bl	8005954 <xTaskGetSchedulerState>
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d082      	beq.n	8004d8c <xQueueReceive+0x40>
 8004e86:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004e88:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8004e8a:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8004e90 <xQueueReceive+0x144>
 8004e8e:	e7c5      	b.n	8004e1c <xQueueReceive+0xd0>
 8004e90:	e000ed04 	.word	0xe000ed04

08004e94 <xQueueSemaphoreTake>:
{
 8004e94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8004e98:	4604      	mov	r4, r0
{
 8004e9a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004e9c:	b940      	cbnz	r0, 8004eb0 <xQueueSemaphoreTake+0x1c>
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	e7fe      	b.n	8004eae <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004eb0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004eb2:	b145      	cbz	r5, 8004ec6 <xQueueSemaphoreTake+0x32>
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	e7fe      	b.n	8004ec4 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ec6:	f000 fd45 	bl	8005954 <xTaskGetSchedulerState>
 8004eca:	b918      	cbnz	r0, 8004ed4 <xQueueSemaphoreTake+0x40>
 8004ecc:	9d01      	ldr	r5, [sp, #4]
 8004ece:	2d00      	cmp	r5, #0
 8004ed0:	f040 8095 	bne.w	8004ffe <xQueueSemaphoreTake+0x16a>
					portYIELD_WITHIN_API();
 8004ed4:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8005010 <xQueueSemaphoreTake+0x17c>
 8004ed8:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8004eda:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8004edc:	f7ff fa5a 	bl	8004394 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ee0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004ee2:	b1e3      	cbz	r3, 8004f1e <xQueueSemaphoreTake+0x8a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	b913      	cbnz	r3, 8004ef2 <xQueueSemaphoreTake+0x5e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004eec:	f000 fe40 	bl	8005b70 <pvTaskIncrementMutexHeldCount>
 8004ef0:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ef2:	6923      	ldr	r3, [r4, #16]
 8004ef4:	b163      	cbz	r3, 8004f10 <xQueueSemaphoreTake+0x7c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ef6:	f104 0010 	add.w	r0, r4, #16
 8004efa:	f000 fc9b 	bl	8005834 <xTaskRemoveFromEventList>
 8004efe:	b138      	cbz	r0, 8004f10 <xQueueSemaphoreTake+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 8004f00:	4b43      	ldr	r3, [pc, #268]	; (8005010 <xQueueSemaphoreTake+0x17c>)
 8004f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004f10:	f7ff fa62 	bl	80043d8 <vPortExitCritical>
				return pdPASS;
 8004f14:	2501      	movs	r5, #1
}
 8004f16:	4628      	mov	r0, r5
 8004f18:	b004      	add	sp, #16
 8004f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f1e:	9b01      	ldr	r3, [sp, #4]
 8004f20:	b963      	cbnz	r3, 8004f3c <xQueueSemaphoreTake+0xa8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004f22:	b145      	cbz	r5, 8004f36 <xQueueSemaphoreTake+0xa2>
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	e7fe      	b.n	8004f34 <xQueueSemaphoreTake+0xa0>
					taskEXIT_CRITICAL();
 8004f36:	f7ff fa4f 	bl	80043d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8004f3a:	e7ec      	b.n	8004f16 <xQueueSemaphoreTake+0x82>
				else if( xEntryTimeSet == pdFALSE )
 8004f3c:	b916      	cbnz	r6, 8004f44 <xQueueSemaphoreTake+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f3e:	a802      	add	r0, sp, #8
 8004f40:	f000 fcba 	bl	80058b8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004f44:	f7ff fa48 	bl	80043d8 <vPortExitCritical>
		vTaskSuspendAll();
 8004f48:	f000 fadc 	bl	8005504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f4c:	f7ff fa22 	bl	8004394 <vPortEnterCritical>
 8004f50:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004f54:	2bff      	cmp	r3, #255	; 0xff
 8004f56:	bf08      	it	eq
 8004f58:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8004f5c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004f60:	2bff      	cmp	r3, #255	; 0xff
 8004f62:	bf08      	it	eq
 8004f64:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8004f68:	f7ff fa36 	bl	80043d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f6c:	a901      	add	r1, sp, #4
 8004f6e:	a802      	add	r0, sp, #8
 8004f70:	f000 fcae 	bl	80058d0 <xTaskCheckForTimeOut>
 8004f74:	bb40      	cbnz	r0, 8004fc8 <xQueueSemaphoreTake+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f76:	4620      	mov	r0, r4
 8004f78:	f7ff fc42 	bl	8004800 <prvIsQueueEmpty>
 8004f7c:	b1f0      	cbz	r0, 8004fbc <xQueueSemaphoreTake+0x128>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	b93b      	cbnz	r3, 8004f92 <xQueueSemaphoreTake+0xfe>
						taskENTER_CRITICAL();
 8004f82:	f7ff fa07 	bl	8004394 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004f86:	6860      	ldr	r0, [r4, #4]
 8004f88:	f000 fcf4 	bl	8005974 <xTaskPriorityInherit>
 8004f8c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8004f8e:	f7ff fa23 	bl	80043d8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f92:	9901      	ldr	r1, [sp, #4]
 8004f94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004f98:	f000 fc32 	bl	8005800 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f7ff fc82 	bl	80048a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fa2:	f000 fb57 	bl	8005654 <xTaskResumeAll>
 8004fa6:	b938      	cbnz	r0, 8004fb8 <xQueueSemaphoreTake+0x124>
					portYIELD_WITHIN_API();
 8004fa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004fac:	f8c8 3000 	str.w	r3, [r8]
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	2601      	movs	r6, #1
 8004fba:	e78f      	b.n	8004edc <xQueueSemaphoreTake+0x48>
				prvUnlockQueue( pxQueue );
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f7ff fc72 	bl	80048a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fc2:	f000 fb47 	bl	8005654 <xTaskResumeAll>
 8004fc6:	e7f7      	b.n	8004fb8 <xQueueSemaphoreTake+0x124>
			prvUnlockQueue( pxQueue );
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f7ff fc6c 	bl	80048a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fce:	f000 fb41 	bl	8005654 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f7ff fc14 	bl	8004800 <prvIsQueueEmpty>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d0ed      	beq.n	8004fb8 <xQueueSemaphoreTake+0x124>
					if( xInheritanceOccurred != pdFALSE )
 8004fdc:	2d00      	cmp	r5, #0
 8004fde:	d09a      	beq.n	8004f16 <xQueueSemaphoreTake+0x82>
						taskENTER_CRITICAL();
 8004fe0:	f7ff f9d8 	bl	8004394 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004fe4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004fe6:	b119      	cbz	r1, 8004ff0 <xQueueSemaphoreTake+0x15c>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004fe8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fea:	6819      	ldr	r1, [r3, #0]
 8004fec:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004ff0:	6860      	ldr	r0, [r4, #4]
 8004ff2:	f000 fd63 	bl	8005abc <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8004ff6:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8004ff8:	f7ff f9ee 	bl	80043d8 <vPortExitCritical>
 8004ffc:	e78b      	b.n	8004f16 <xQueueSemaphoreTake+0x82>
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	e7fe      	b.n	800500e <xQueueSemaphoreTake+0x17a>
 8005010:	e000ed04 	.word	0xe000ed04

08005014 <xQueueReceiveFromISR>:
{
 8005014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005018:	4689      	mov	r9, r1
 800501a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800501c:	4605      	mov	r5, r0
 800501e:	b940      	cbnz	r0, 8005032 <xQueueReceiveFromISR+0x1e>
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	e7fe      	b.n	8005030 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005032:	bb71      	cbnz	r1, 8005092 <xQueueReceiveFromISR+0x7e>
 8005034:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005036:	b363      	cbz	r3, 8005092 <xQueueReceiveFromISR+0x7e>
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	e7fe      	b.n	8005048 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 800504a:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800504e:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8005050:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005052:	4628      	mov	r0, r5
 8005054:	f7ff fc12 	bl	800487c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005058:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 800505a:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800505c:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800505e:	d113      	bne.n	8005088 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005060:	692b      	ldr	r3, [r5, #16]
 8005062:	b90b      	cbnz	r3, 8005068 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 8005064:	2001      	movs	r0, #1
 8005066:	e00b      	b.n	8005080 <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005068:	f105 0010 	add.w	r0, r5, #16
 800506c:	f000 fbe2 	bl	8005834 <xTaskRemoveFromEventList>
 8005070:	2800      	cmp	r0, #0
 8005072:	d0f7      	beq.n	8005064 <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 8005074:	f1b8 0f00 	cmp.w	r8, #0
 8005078:	d0f4      	beq.n	8005064 <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800507a:	2001      	movs	r0, #1
 800507c:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8005080:	f387 8811 	msr	BASEPRI, r7
}
 8005084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005088:	3601      	adds	r6, #1
 800508a:	b276      	sxtb	r6, r6
 800508c:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8005090:	e7e8      	b.n	8005064 <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005092:	f7ff fa9d 	bl	80045d0 <vPortValidateInterruptPriority>
	__asm volatile
 8005096:	f3ef 8711 	mrs	r7, BASEPRI
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050aa:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050ac:	2c00      	cmp	r4, #0
 80050ae:	d1cc      	bne.n	800504a <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 80050b0:	4620      	mov	r0, r4
 80050b2:	e7e5      	b.n	8005080 <xQueueReceiveFromISR+0x6c>

080050b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80050b4:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80050b6:	4a08      	ldr	r2, [pc, #32]	; (80050d8 <vQueueUnregisterQueue+0x24>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050b8:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80050ba:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80050be:	684c      	ldr	r4, [r1, #4]
 80050c0:	4284      	cmp	r4, r0
 80050c2:	d104      	bne.n	80050ce <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80050c4:	2000      	movs	r0, #0
 80050c6:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80050ca:	6048      	str	r0, [r1, #4]
				break;
 80050cc:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050ce:	3301      	adds	r3, #1
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d1f2      	bne.n	80050ba <vQueueUnregisterQueue+0x6>
 80050d4:	bd10      	pop	{r4, pc}
 80050d6:	bf00      	nop
 80050d8:	2000c244 	.word	0x2000c244

080050dc <vQueueDelete>:
{
 80050dc:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80050de:	4604      	mov	r4, r0
 80050e0:	b940      	cbnz	r0, 80050f4 <vQueueDelete+0x18>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	e7fe      	b.n	80050f2 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 80050f4:	f7ff ffde 	bl	80050b4 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80050f8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80050fc:	b923      	cbnz	r3, 8005108 <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 80050fe:	4620      	mov	r0, r4
}
 8005100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8005104:	f7ff bb44 	b.w	8004790 <vPortFree>
 8005108:	bd10      	pop	{r4, pc}
	...

0800510c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800510c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005110:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005112:	f7ff f93f 	bl	8004394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005116:	4b2d      	ldr	r3, [pc, #180]	; (80051cc <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8005118:	4c2d      	ldr	r4, [pc, #180]	; (80051d0 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	4f2d      	ldr	r7, [pc, #180]	; (80051d4 <prvAddNewTaskToReadyList+0xc8>)
 800511e:	3201      	adds	r2, #1
 8005120:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005122:	6825      	ldr	r5, [r4, #0]
 8005124:	2d00      	cmp	r5, #0
 8005126:	d145      	bne.n	80051b4 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005128:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d11c      	bne.n	800516a <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005130:	1978      	adds	r0, r7, r5
 8005132:	3514      	adds	r5, #20
 8005134:	f7ff f884 	bl	8004240 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005138:	2d8c      	cmp	r5, #140	; 0x8c
 800513a:	d1f9      	bne.n	8005130 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 800513c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8005200 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8005140:	4d25      	ldr	r5, [pc, #148]	; (80051d8 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8005142:	4640      	mov	r0, r8
 8005144:	f7ff f87c 	bl	8004240 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005148:	4628      	mov	r0, r5
 800514a:	f7ff f879 	bl	8004240 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800514e:	4823      	ldr	r0, [pc, #140]	; (80051dc <prvAddNewTaskToReadyList+0xd0>)
 8005150:	f7ff f876 	bl	8004240 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005154:	4822      	ldr	r0, [pc, #136]	; (80051e0 <prvAddNewTaskToReadyList+0xd4>)
 8005156:	f7ff f873 	bl	8004240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800515a:	4822      	ldr	r0, [pc, #136]	; (80051e4 <prvAddNewTaskToReadyList+0xd8>)
 800515c:	f7ff f870 	bl	8004240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005160:	4b21      	ldr	r3, [pc, #132]	; (80051e8 <prvAddNewTaskToReadyList+0xdc>)
 8005162:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005166:	4b21      	ldr	r3, [pc, #132]	; (80051ec <prvAddNewTaskToReadyList+0xe0>)
 8005168:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800516a:	4a21      	ldr	r2, [pc, #132]	; (80051f0 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 800516c:	4921      	ldr	r1, [pc, #132]	; (80051f4 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 800516e:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005170:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8005172:	3301      	adds	r3, #1
 8005174:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005176:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8005178:	2301      	movs	r3, #1
 800517a:	4093      	lsls	r3, r2
 800517c:	4303      	orrs	r3, r0
 800517e:	2014      	movs	r0, #20
 8005180:	600b      	str	r3, [r1, #0]
 8005182:	fb00 7002 	mla	r0, r0, r2, r7
 8005186:	1d31      	adds	r1, r6, #4
 8005188:	f7ff f868 	bl	800425c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800518c:	f7ff f924 	bl	80043d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005190:	4b19      	ldr	r3, [pc, #100]	; (80051f8 <prvAddNewTaskToReadyList+0xec>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	b163      	cbz	r3, 80051b0 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800519c:	429a      	cmp	r2, r3
 800519e:	d207      	bcs.n	80051b0 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 80051a0:	4b16      	ldr	r3, [pc, #88]	; (80051fc <prvAddNewTaskToReadyList+0xf0>)
 80051a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80051b4:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <prvAddNewTaskToReadyList+0xec>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1d6      	bne.n	800516a <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80051c2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80051c4:	bf98      	it	ls
 80051c6:	6026      	strls	r6, [r4, #0]
 80051c8:	e7cf      	b.n	800516a <prvAddNewTaskToReadyList+0x5e>
 80051ca:	bf00      	nop
 80051cc:	20003d18 	.word	0x20003d18
 80051d0:	20003c80 	.word	0x20003c80
 80051d4:	20003c8c 	.word	0x20003c8c
 80051d8:	20003d44 	.word	0x20003d44
 80051dc:	20003d60 	.word	0x20003d60
 80051e0:	20003d8c 	.word	0x20003d8c
 80051e4:	20003d78 	.word	0x20003d78
 80051e8:	20003c84 	.word	0x20003c84
 80051ec:	20003c88 	.word	0x20003c88
 80051f0:	20003d28 	.word	0x20003d28
 80051f4:	20003d2c 	.word	0x20003d2c
 80051f8:	20003d74 	.word	0x20003d74
 80051fc:	e000ed04 	.word	0xe000ed04
 8005200:	20003d30 	.word	0x20003d30

08005204 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005204:	4a06      	ldr	r2, [pc, #24]	; (8005220 <prvResetNextTaskUnblockTime+0x1c>)
 8005206:	6813      	ldr	r3, [r2, #0]
 8005208:	6819      	ldr	r1, [r3, #0]
 800520a:	4b06      	ldr	r3, [pc, #24]	; (8005224 <prvResetNextTaskUnblockTime+0x20>)
 800520c:	b919      	cbnz	r1, 8005216 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800520e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800521a:	68d2      	ldr	r2, [r2, #12]
 800521c:	6852      	ldr	r2, [r2, #4]
 800521e:	e7f8      	b.n	8005212 <prvResetNextTaskUnblockTime+0xe>
 8005220:	20003c84 	.word	0x20003c84
 8005224:	20003d58 	.word	0x20003d58

08005228 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800522c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800522e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005232:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8005234:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005238:	3a01      	subs	r2, #1
 800523a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800523e:	469a      	mov	sl, r3
 8005240:	4681      	mov	r9, r0
 8005242:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005244:	f026 0607 	bic.w	r6, r6, #7
 8005248:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800524c:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800524e:	7858      	ldrb	r0, [r3, #1]
 8005250:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8005254:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8005258:	b108      	cbz	r0, 800525e <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800525a:	428b      	cmp	r3, r1
 800525c:	d1f7      	bne.n	800524e <prvInitialiseNewTask.isra.2+0x26>
 800525e:	9d08      	ldr	r5, [sp, #32]
 8005260:	2d06      	cmp	r5, #6
 8005262:	bf28      	it	cs
 8005264:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005266:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8005268:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800526a:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800526c:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800526e:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8005272:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005274:	f7fe ffef 	bl	8004256 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005278:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800527c:	f104 0018 	add.w	r0, r4, #24
 8005280:	f7fe ffe9 	bl	8004256 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8005284:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005286:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005288:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800528a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800528c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005290:	4652      	mov	r2, sl
 8005292:	4649      	mov	r1, r9
 8005294:	4630      	mov	r0, r6
 8005296:	f7ff f853 	bl	8004340 <pxPortInitialiseStack>
 800529a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800529c:	f1b8 0f00 	cmp.w	r8, #0
 80052a0:	d001      	beq.n	80052a6 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052a2:	f8c8 4000 	str.w	r4, [r8]
 80052a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080052aa <prvDeleteTCB>:
	{
 80052aa:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052ac:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 80052b0:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052b2:	b93b      	cbnz	r3, 80052c4 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80052b4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80052b6:	f7ff fa6b 	bl	8004790 <vPortFree>
				vPortFree( pxTCB );
 80052ba:	4620      	mov	r0, r4
	}
 80052bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80052c0:	f7ff ba66 	b.w	8004790 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d0f9      	beq.n	80052bc <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d008      	beq.n	80052de <prvDeleteTCB+0x34>
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	e7fe      	b.n	80052dc <prvDeleteTCB+0x32>
 80052de:	bd10      	pop	{r4, pc}

080052e0 <prvIdleTask>:
{
 80052e0:	b580      	push	{r7, lr}
				taskYIELD();
 80052e2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8005340 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80052e6:	4f12      	ldr	r7, [pc, #72]	; (8005330 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052e8:	4c12      	ldr	r4, [pc, #72]	; (8005334 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80052ea:	4d13      	ldr	r5, [pc, #76]	; (8005338 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	b963      	cbnz	r3, 800530a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052f0:	4b12      	ldr	r3, [pc, #72]	; (800533c <prvIdleTask+0x5c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d9f8      	bls.n	80052ea <prvIdleTask+0xa>
				taskYIELD();
 80052f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80052fc:	f8c8 3000 	str.w	r3, [r8]
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	e7ee      	b.n	80052e8 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800530a:	f7ff f843 	bl	8004394 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005312:	1d30      	adds	r0, r6, #4
 8005314:	f7fe ffc5 	bl	80042a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	3b01      	subs	r3, #1
 800531c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	3b01      	subs	r3, #1
 8005322:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8005324:	f7ff f858 	bl	80043d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005328:	4630      	mov	r0, r6
 800532a:	f7ff ffbe 	bl	80052aa <prvDeleteTCB>
 800532e:	e7dd      	b.n	80052ec <prvIdleTask+0xc>
 8005330:	20003d8c 	.word	0x20003d8c
 8005334:	20003d1c 	.word	0x20003d1c
 8005338:	20003d18 	.word	0x20003d18
 800533c:	20003c8c 	.word	0x20003c8c
 8005340:	e000ed04 	.word	0xe000ed04

08005344 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005346:	4b1b      	ldr	r3, [pc, #108]	; (80053b4 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005348:	4e1b      	ldr	r6, [pc, #108]	; (80053b8 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800534a:	681d      	ldr	r5, [r3, #0]
{
 800534c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800534e:	6830      	ldr	r0, [r6, #0]
 8005350:	3004      	adds	r0, #4
{
 8005352:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005354:	f7fe ffa5 	bl	80042a2 <uxListRemove>
 8005358:	4633      	mov	r3, r6
 800535a:	b940      	cbnz	r0, 800536e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800535c:	6831      	ldr	r1, [r6, #0]
 800535e:	4e17      	ldr	r6, [pc, #92]	; (80053bc <prvAddCurrentTaskToDelayedList+0x78>)
 8005360:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8005362:	6832      	ldr	r2, [r6, #0]
 8005364:	2001      	movs	r0, #1
 8005366:	4088      	lsls	r0, r1
 8005368:	ea22 0200 	bic.w	r2, r2, r0
 800536c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800536e:	1c62      	adds	r2, r4, #1
 8005370:	d107      	bne.n	8005382 <prvAddCurrentTaskToDelayedList+0x3e>
 8005372:	b137      	cbz	r7, 8005382 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005374:	6819      	ldr	r1, [r3, #0]
 8005376:	4812      	ldr	r0, [pc, #72]	; (80053c0 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005378:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800537a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800537e:	f7fe bf6d 	b.w	800425c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005382:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005384:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8005386:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005388:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800538a:	d907      	bls.n	800539c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800538c:	4a0d      	ldr	r2, [pc, #52]	; (80053c4 <prvAddCurrentTaskToDelayedList+0x80>)
 800538e:	6810      	ldr	r0, [r2, #0]
 8005390:	6819      	ldr	r1, [r3, #0]
}
 8005392:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005396:	3104      	adds	r1, #4
 8005398:	f7fe bf6c 	b.w	8004274 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800539c:	4a0a      	ldr	r2, [pc, #40]	; (80053c8 <prvAddCurrentTaskToDelayedList+0x84>)
 800539e:	6810      	ldr	r0, [r2, #0]
 80053a0:	6819      	ldr	r1, [r3, #0]
 80053a2:	3104      	adds	r1, #4
 80053a4:	f7fe ff66 	bl	8004274 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80053a8:	4b08      	ldr	r3, [pc, #32]	; (80053cc <prvAddCurrentTaskToDelayedList+0x88>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80053ae:	bf38      	it	cc
 80053b0:	601c      	strcc	r4, [r3, #0]
 80053b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053b4:	20003da0 	.word	0x20003da0
 80053b8:	20003c80 	.word	0x20003c80
 80053bc:	20003d2c 	.word	0x20003d2c
 80053c0:	20003d78 	.word	0x20003d78
 80053c4:	20003c88 	.word	0x20003c88
 80053c8:	20003c84 	.word	0x20003c84
 80053cc:	20003d58 	.word	0x20003d58

080053d0 <xTaskCreateStatic>:
	{
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80053d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80053d8:	b945      	cbnz	r5, 80053ec <xTaskCreateStatic+0x1c>
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	e7fe      	b.n	80053ea <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80053ec:	b944      	cbnz	r4, 8005400 <xTaskCreateStatic+0x30>
 80053ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	e7fe      	b.n	80053fe <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005400:	2654      	movs	r6, #84	; 0x54
 8005402:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005404:	9e04      	ldr	r6, [sp, #16]
 8005406:	2e54      	cmp	r6, #84	; 0x54
 8005408:	d008      	beq.n	800541c <xTaskCreateStatic+0x4c>
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	e7fe      	b.n	800541a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800541c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800541e:	2502      	movs	r5, #2
 8005420:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005424:	ad05      	add	r5, sp, #20
 8005426:	9501      	str	r5, [sp, #4]
 8005428:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800542a:	9402      	str	r4, [sp, #8]
 800542c:	9500      	str	r5, [sp, #0]
 800542e:	f7ff fefb 	bl	8005228 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005432:	4620      	mov	r0, r4
 8005434:	f7ff fe6a 	bl	800510c <prvAddNewTaskToReadyList>
	}
 8005438:	9805      	ldr	r0, [sp, #20]
 800543a:	b006      	add	sp, #24
 800543c:	bd70      	pop	{r4, r5, r6, pc}

0800543e <xTaskCreate>:
	{
 800543e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005442:	4607      	mov	r7, r0
 8005444:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005446:	0090      	lsls	r0, r2, #2
	{
 8005448:	4688      	mov	r8, r1
 800544a:	4616      	mov	r6, r2
 800544c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800544e:	f7ff f911 	bl	8004674 <pvPortMalloc>
			if( pxStack != NULL )
 8005452:	4605      	mov	r5, r0
 8005454:	b1e8      	cbz	r0, 8005492 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005456:	2054      	movs	r0, #84	; 0x54
 8005458:	f7ff f90c 	bl	8004674 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800545c:	4604      	mov	r4, r0
 800545e:	b1a8      	cbz	r0, 800548c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005460:	2300      	movs	r3, #0
 8005462:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8005468:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800546a:	9301      	str	r3, [sp, #4]
 800546c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800546e:	9002      	str	r0, [sp, #8]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	4632      	mov	r2, r6
 8005474:	464b      	mov	r3, r9
 8005476:	4641      	mov	r1, r8
 8005478:	4638      	mov	r0, r7
 800547a:	f7ff fed5 	bl	8005228 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800547e:	4620      	mov	r0, r4
 8005480:	f7ff fe44 	bl	800510c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005484:	2001      	movs	r0, #1
	}
 8005486:	b005      	add	sp, #20
 8005488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800548c:	4628      	mov	r0, r5
 800548e:	f7ff f97f 	bl	8004790 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005492:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8005496:	e7f6      	b.n	8005486 <xTaskCreate+0x48>

08005498 <vTaskStartScheduler>:
{
 8005498:	b510      	push	{r4, lr}
 800549a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800549c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800549e:	aa07      	add	r2, sp, #28
 80054a0:	a906      	add	r1, sp, #24
 80054a2:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054a4:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054a6:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054a8:	f000 fd2c 	bl	8005f04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054ac:	9b05      	ldr	r3, [sp, #20]
 80054ae:	9302      	str	r3, [sp, #8]
 80054b0:	9b06      	ldr	r3, [sp, #24]
 80054b2:	9301      	str	r3, [sp, #4]
 80054b4:	9400      	str	r4, [sp, #0]
 80054b6:	4623      	mov	r3, r4
 80054b8:	9a07      	ldr	r2, [sp, #28]
 80054ba:	490d      	ldr	r1, [pc, #52]	; (80054f0 <vTaskStartScheduler+0x58>)
 80054bc:	480d      	ldr	r0, [pc, #52]	; (80054f4 <vTaskStartScheduler+0x5c>)
 80054be:	f7ff ff87 	bl	80053d0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80054c2:	b190      	cbz	r0, 80054ea <vTaskStartScheduler+0x52>
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80054d4:	4b08      	ldr	r3, [pc, #32]	; (80054f8 <vTaskStartScheduler+0x60>)
 80054d6:	f04f 32ff 	mov.w	r2, #4294967295
 80054da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054dc:	4b07      	ldr	r3, [pc, #28]	; (80054fc <vTaskStartScheduler+0x64>)
 80054de:	2201      	movs	r2, #1
 80054e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80054e2:	4b07      	ldr	r3, [pc, #28]	; (8005500 <vTaskStartScheduler+0x68>)
 80054e4:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80054e6:	f7fe ffed 	bl	80044c4 <xPortStartScheduler>
}
 80054ea:	b008      	add	sp, #32
 80054ec:	bd10      	pop	{r4, pc}
 80054ee:	bf00      	nop
 80054f0:	080067cf 	.word	0x080067cf
 80054f4:	080052e1 	.word	0x080052e1
 80054f8:	20003d58 	.word	0x20003d58
 80054fc:	20003d74 	.word	0x20003d74
 8005500:	20003da0 	.word	0x20003da0

08005504 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005504:	4a02      	ldr	r2, [pc, #8]	; (8005510 <vTaskSuspendAll+0xc>)
 8005506:	6813      	ldr	r3, [r2, #0]
 8005508:	3301      	adds	r3, #1
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20003d24 	.word	0x20003d24

08005514 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8005514:	4b01      	ldr	r3, [pc, #4]	; (800551c <xTaskGetTickCount+0x8>)
 8005516:	6818      	ldr	r0, [r3, #0]
}
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	20003da0 	.word	0x20003da0

08005520 <xTaskGetTickCountFromISR>:
{
 8005520:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005522:	f7ff f855 	bl	80045d0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8005526:	4b01      	ldr	r3, [pc, #4]	; (800552c <xTaskGetTickCountFromISR+0xc>)
 8005528:	6818      	ldr	r0, [r3, #0]
}
 800552a:	bd08      	pop	{r3, pc}
 800552c:	20003da0 	.word	0x20003da0

08005530 <xTaskIncrementTick>:
{
 8005530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005534:	4b3c      	ldr	r3, [pc, #240]	; (8005628 <xTaskIncrementTick+0xf8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d153      	bne.n	80055e4 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800553c:	4b3b      	ldr	r3, [pc, #236]	; (800562c <xTaskIncrementTick+0xfc>)
 800553e:	681c      	ldr	r4, [r3, #0]
 8005540:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8005542:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005544:	b9bc      	cbnz	r4, 8005576 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8005546:	4b3a      	ldr	r3, [pc, #232]	; (8005630 <xTaskIncrementTick+0x100>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	6812      	ldr	r2, [r2, #0]
 800554c:	b142      	cbz	r2, 8005560 <xTaskIncrementTick+0x30>
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	e7fe      	b.n	800555e <xTaskIncrementTick+0x2e>
 8005560:	4a34      	ldr	r2, [pc, #208]	; (8005634 <xTaskIncrementTick+0x104>)
 8005562:	6819      	ldr	r1, [r3, #0]
 8005564:	6810      	ldr	r0, [r2, #0]
 8005566:	6018      	str	r0, [r3, #0]
 8005568:	6011      	str	r1, [r2, #0]
 800556a:	4a33      	ldr	r2, [pc, #204]	; (8005638 <xTaskIncrementTick+0x108>)
 800556c:	6813      	ldr	r3, [r2, #0]
 800556e:	3301      	adds	r3, #1
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	f7ff fe47 	bl	8005204 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005576:	4d31      	ldr	r5, [pc, #196]	; (800563c <xTaskIncrementTick+0x10c>)
 8005578:	4f31      	ldr	r7, [pc, #196]	; (8005640 <xTaskIncrementTick+0x110>)
 800557a:	682b      	ldr	r3, [r5, #0]
 800557c:	429c      	cmp	r4, r3
 800557e:	f04f 0b00 	mov.w	fp, #0
 8005582:	d33e      	bcc.n	8005602 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005584:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005630 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8005588:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8005650 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800558c:	f8d8 2000 	ldr.w	r2, [r8]
 8005590:	6812      	ldr	r2, [r2, #0]
 8005592:	bb72      	cbnz	r2, 80055f2 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005594:	f04f 32ff 	mov.w	r2, #4294967295
 8005598:	602a      	str	r2, [r5, #0]
					break;
 800559a:	e032      	b.n	8005602 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800559c:	f106 0a04 	add.w	sl, r6, #4
 80055a0:	4650      	mov	r0, sl
 80055a2:	f7fe fe7e 	bl	80042a2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055a6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80055a8:	b119      	cbz	r1, 80055b2 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055aa:	f106 0018 	add.w	r0, r6, #24
 80055ae:	f7fe fe78 	bl	80042a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055b2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80055b4:	f8d9 3000 	ldr.w	r3, [r9]
 80055b8:	2201      	movs	r2, #1
 80055ba:	fa02 f100 	lsl.w	r1, r2, r0
 80055be:	4319      	orrs	r1, r3
 80055c0:	4b20      	ldr	r3, [pc, #128]	; (8005644 <xTaskIncrementTick+0x114>)
 80055c2:	f8c9 1000 	str.w	r1, [r9]
 80055c6:	f04f 0e14 	mov.w	lr, #20
 80055ca:	4651      	mov	r1, sl
 80055cc:	fb0e 3000 	mla	r0, lr, r0, r3
 80055d0:	f7fe fe44 	bl	800425c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055d4:	6838      	ldr	r0, [r7, #0]
 80055d6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80055d8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80055da:	4291      	cmp	r1, r2
 80055dc:	bf28      	it	cs
 80055de:	f04f 0b01 	movcs.w	fp, #1
 80055e2:	e7d3      	b.n	800558c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80055e4:	4a18      	ldr	r2, [pc, #96]	; (8005648 <xTaskIncrementTick+0x118>)
 80055e6:	6813      	ldr	r3, [r2, #0]
 80055e8:	3301      	adds	r3, #1
 80055ea:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80055ec:	f04f 0b00 	mov.w	fp, #0
 80055f0:	e011      	b.n	8005616 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055f2:	f8d8 2000 	ldr.w	r2, [r8]
 80055f6:	68d2      	ldr	r2, [r2, #12]
 80055f8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055fa:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80055fc:	428c      	cmp	r4, r1
 80055fe:	d2cd      	bcs.n	800559c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8005600:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <xTaskIncrementTick+0x114>)
 8005606:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005608:	2214      	movs	r2, #20
 800560a:	434a      	muls	r2, r1
 800560c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800560e:	2a02      	cmp	r2, #2
 8005610:	bf28      	it	cs
 8005612:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8005616:	4a0d      	ldr	r2, [pc, #52]	; (800564c <xTaskIncrementTick+0x11c>)
 8005618:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800561a:	2a00      	cmp	r2, #0
 800561c:	bf18      	it	ne
 800561e:	f04f 0b01 	movne.w	fp, #1
}
 8005622:	4658      	mov	r0, fp
 8005624:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005628:	20003d24 	.word	0x20003d24
 800562c:	20003da0 	.word	0x20003da0
 8005630:	20003c84 	.word	0x20003c84
 8005634:	20003c88 	.word	0x20003c88
 8005638:	20003d5c 	.word	0x20003d5c
 800563c:	20003d58 	.word	0x20003d58
 8005640:	20003c80 	.word	0x20003c80
 8005644:	20003c8c 	.word	0x20003c8c
 8005648:	20003d20 	.word	0x20003d20
 800564c:	20003da4 	.word	0x20003da4
 8005650:	20003d2c 	.word	0x20003d2c

08005654 <xTaskResumeAll>:
{
 8005654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8005658:	4c31      	ldr	r4, [pc, #196]	; (8005720 <xTaskResumeAll+0xcc>)
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	b943      	cbnz	r3, 8005670 <xTaskResumeAll+0x1c>
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	e7fe      	b.n	800566e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8005670:	f7fe fe90 	bl	8004394 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	3b01      	subs	r3, #1
 8005678:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800567a:	6824      	ldr	r4, [r4, #0]
 800567c:	b12c      	cbz	r4, 800568a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800567e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005680:	f7fe feaa 	bl	80043d8 <vPortExitCritical>
}
 8005684:	4620      	mov	r0, r4
 8005686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800568a:	4b26      	ldr	r3, [pc, #152]	; (8005724 <xTaskResumeAll+0xd0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f5      	beq.n	800567e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005692:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800573c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8005696:	4f24      	ldr	r7, [pc, #144]	; (8005728 <xTaskResumeAll+0xd4>)
 8005698:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8005740 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800569c:	f8d9 3000 	ldr.w	r3, [r9]
 80056a0:	b9e3      	cbnz	r3, 80056dc <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80056a2:	b10c      	cbz	r4, 80056a8 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80056a4:	f7ff fdae 	bl	8005204 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056a8:	4d20      	ldr	r5, [pc, #128]	; (800572c <xTaskResumeAll+0xd8>)
 80056aa:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056ac:	b144      	cbz	r4, 80056c0 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80056ae:	4e20      	ldr	r6, [pc, #128]	; (8005730 <xTaskResumeAll+0xdc>)
 80056b0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80056b2:	f7ff ff3d 	bl	8005530 <xTaskIncrementTick>
 80056b6:	b100      	cbz	r0, 80056ba <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80056b8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056ba:	3c01      	subs	r4, #1
 80056bc:	d1f9      	bne.n	80056b2 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80056be:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80056c0:	4b1b      	ldr	r3, [pc, #108]	; (8005730 <xTaskResumeAll+0xdc>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0da      	beq.n	800567e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80056c8:	4b1a      	ldr	r3, [pc, #104]	; (8005734 <xTaskResumeAll+0xe0>)
 80056ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80056d8:	2401      	movs	r4, #1
 80056da:	e7d1      	b.n	8005680 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80056dc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80056e0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056e2:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056e4:	f104 0018 	add.w	r0, r4, #24
 80056e8:	f7fe fddb 	bl	80042a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ec:	4630      	mov	r0, r6
 80056ee:	f7fe fdd8 	bl	80042a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80056f4:	6839      	ldr	r1, [r7, #0]
 80056f6:	2501      	movs	r5, #1
 80056f8:	fa05 f302 	lsl.w	r3, r5, r2
 80056fc:	2014      	movs	r0, #20
 80056fe:	430b      	orrs	r3, r1
 8005700:	fb00 8002 	mla	r0, r0, r2, r8
 8005704:	4631      	mov	r1, r6
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	f7fe fda8 	bl	800425c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800570c:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <xTaskResumeAll+0xe4>)
 800570e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8005716:	bf24      	itt	cs
 8005718:	4b05      	ldrcs	r3, [pc, #20]	; (8005730 <xTaskResumeAll+0xdc>)
 800571a:	601d      	strcs	r5, [r3, #0]
 800571c:	e7be      	b.n	800569c <xTaskResumeAll+0x48>
 800571e:	bf00      	nop
 8005720:	20003d24 	.word	0x20003d24
 8005724:	20003d18 	.word	0x20003d18
 8005728:	20003d2c 	.word	0x20003d2c
 800572c:	20003d20 	.word	0x20003d20
 8005730:	20003da4 	.word	0x20003da4
 8005734:	e000ed04 	.word	0xe000ed04
 8005738:	20003c80 	.word	0x20003c80
 800573c:	20003d60 	.word	0x20003d60
 8005740:	20003c8c 	.word	0x20003c8c

08005744 <vTaskDelay>:
	{
 8005744:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005746:	b940      	cbnz	r0, 800575a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8005748:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <vTaskDelay+0x40>)
 800574a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800575a:	4b0b      	ldr	r3, [pc, #44]	; (8005788 <vTaskDelay+0x44>)
 800575c:	6819      	ldr	r1, [r3, #0]
 800575e:	b141      	cbz	r1, 8005772 <vTaskDelay+0x2e>
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	e7fe      	b.n	8005770 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005772:	f7ff fec7 	bl	8005504 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005776:	f7ff fde5 	bl	8005344 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800577a:	f7ff ff6b 	bl	8005654 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800577e:	2800      	cmp	r0, #0
 8005780:	d0e2      	beq.n	8005748 <vTaskDelay+0x4>
 8005782:	bd08      	pop	{r3, pc}
 8005784:	e000ed04 	.word	0xe000ed04
 8005788:	20003d24 	.word	0x20003d24

0800578c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800578c:	4b17      	ldr	r3, [pc, #92]	; (80057ec <vTaskSwitchContext+0x60>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	4b17      	ldr	r3, [pc, #92]	; (80057f0 <vTaskSwitchContext+0x64>)
{
 8005792:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005794:	b112      	cbz	r2, 800579c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8005796:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800579c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800579e:	4b15      	ldr	r3, [pc, #84]	; (80057f4 <vTaskSwitchContext+0x68>)
 80057a0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057a2:	fab3 f383 	clz	r3, r3
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	f1c3 031f 	rsb	r3, r3, #31
 80057ac:	2214      	movs	r2, #20
 80057ae:	4912      	ldr	r1, [pc, #72]	; (80057f8 <vTaskSwitchContext+0x6c>)
 80057b0:	435a      	muls	r2, r3
 80057b2:	1888      	adds	r0, r1, r2
 80057b4:	588c      	ldr	r4, [r1, r2]
 80057b6:	b944      	cbnz	r4, 80057ca <vTaskSwitchContext+0x3e>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	e7fe      	b.n	80057c8 <vTaskSwitchContext+0x3c>
 80057ca:	6844      	ldr	r4, [r0, #4]
 80057cc:	3208      	adds	r2, #8
 80057ce:	6864      	ldr	r4, [r4, #4]
 80057d0:	6044      	str	r4, [r0, #4]
 80057d2:	440a      	add	r2, r1
 80057d4:	4294      	cmp	r4, r2
 80057d6:	bf04      	itt	eq
 80057d8:	6862      	ldreq	r2, [r4, #4]
 80057da:	6042      	streq	r2, [r0, #4]
 80057dc:	2214      	movs	r2, #20
 80057de:	fb02 1303 	mla	r3, r2, r3, r1
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	4b05      	ldr	r3, [pc, #20]	; (80057fc <vTaskSwitchContext+0x70>)
 80057e8:	e7d6      	b.n	8005798 <vTaskSwitchContext+0xc>
 80057ea:	bf00      	nop
 80057ec:	20003d24 	.word	0x20003d24
 80057f0:	20003da4 	.word	0x20003da4
 80057f4:	20003d2c 	.word	0x20003d2c
 80057f8:	20003c8c 	.word	0x20003c8c
 80057fc:	20003c80 	.word	0x20003c80

08005800 <vTaskPlaceOnEventList>:
{
 8005800:	b510      	push	{r4, lr}
 8005802:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8005804:	b940      	cbnz	r0, 8005818 <vTaskPlaceOnEventList+0x18>
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	e7fe      	b.n	8005816 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005818:	4b05      	ldr	r3, [pc, #20]	; (8005830 <vTaskPlaceOnEventList+0x30>)
 800581a:	6819      	ldr	r1, [r3, #0]
 800581c:	3118      	adds	r1, #24
 800581e:	f7fe fd29 	bl	8004274 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005822:	4620      	mov	r0, r4
 8005824:	2101      	movs	r1, #1
}
 8005826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800582a:	f7ff bd8b 	b.w	8005344 <prvAddCurrentTaskToDelayedList>
 800582e:	bf00      	nop
 8005830:	20003c80 	.word	0x20003c80

08005834 <xTaskRemoveFromEventList>:
{
 8005834:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005836:	68c3      	ldr	r3, [r0, #12]
 8005838:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800583a:	b944      	cbnz	r4, 800584e <xTaskRemoveFromEventList+0x1a>
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	e7fe      	b.n	800584c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800584e:	f104 0518 	add.w	r5, r4, #24
 8005852:	4628      	mov	r0, r5
 8005854:	f7fe fd25 	bl	80042a2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005858:	4b11      	ldr	r3, [pc, #68]	; (80058a0 <xTaskRemoveFromEventList+0x6c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	b9e3      	cbnz	r3, 8005898 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800585e:	1d25      	adds	r5, r4, #4
 8005860:	4628      	mov	r0, r5
 8005862:	f7fe fd1e 	bl	80042a2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005866:	490f      	ldr	r1, [pc, #60]	; (80058a4 <xTaskRemoveFromEventList+0x70>)
 8005868:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800586a:	6808      	ldr	r0, [r1, #0]
 800586c:	2301      	movs	r3, #1
 800586e:	4093      	lsls	r3, r2
 8005870:	4303      	orrs	r3, r0
 8005872:	600b      	str	r3, [r1, #0]
 8005874:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <xTaskRemoveFromEventList+0x74>)
 8005876:	2014      	movs	r0, #20
 8005878:	4629      	mov	r1, r5
 800587a:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800587e:	f7fe fced 	bl	800425c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005882:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <xTaskRemoveFromEventList+0x78>)
 8005884:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800588c:	bf83      	ittte	hi
 800588e:	4b08      	ldrhi	r3, [pc, #32]	; (80058b0 <xTaskRemoveFromEventList+0x7c>)
 8005890:	2001      	movhi	r0, #1
 8005892:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8005894:	2000      	movls	r0, #0
}
 8005896:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005898:	4629      	mov	r1, r5
 800589a:	4806      	ldr	r0, [pc, #24]	; (80058b4 <xTaskRemoveFromEventList+0x80>)
 800589c:	e7ef      	b.n	800587e <xTaskRemoveFromEventList+0x4a>
 800589e:	bf00      	nop
 80058a0:	20003d24 	.word	0x20003d24
 80058a4:	20003d2c 	.word	0x20003d2c
 80058a8:	20003c8c 	.word	0x20003c8c
 80058ac:	20003c80 	.word	0x20003c80
 80058b0:	20003da4 	.word	0x20003da4
 80058b4:	20003d60 	.word	0x20003d60

080058b8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058b8:	4b03      	ldr	r3, [pc, #12]	; (80058c8 <vTaskInternalSetTimeOutState+0x10>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058be:	4b03      	ldr	r3, [pc, #12]	; (80058cc <vTaskInternalSetTimeOutState+0x14>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6043      	str	r3, [r0, #4]
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	20003d5c 	.word	0x20003d5c
 80058cc:	20003da0 	.word	0x20003da0

080058d0 <xTaskCheckForTimeOut>:
{
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80058d4:	4605      	mov	r5, r0
 80058d6:	b940      	cbnz	r0, 80058ea <xTaskCheckForTimeOut+0x1a>
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	e7fe      	b.n	80058e8 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80058ea:	b941      	cbnz	r1, 80058fe <xTaskCheckForTimeOut+0x2e>
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	e7fe      	b.n	80058fc <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80058fe:	f7fe fd49 	bl	8004394 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005902:	4b0f      	ldr	r3, [pc, #60]	; (8005940 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005904:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8005906:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	1c58      	adds	r0, r3, #1
 800590c:	d00e      	beq.n	800592c <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800590e:	480d      	ldr	r0, [pc, #52]	; (8005944 <xTaskCheckForTimeOut+0x74>)
 8005910:	682e      	ldr	r6, [r5, #0]
 8005912:	6800      	ldr	r0, [r0, #0]
 8005914:	4286      	cmp	r6, r0
 8005916:	d001      	beq.n	800591c <xTaskCheckForTimeOut+0x4c>
 8005918:	428a      	cmp	r2, r1
 800591a:	d20e      	bcs.n	800593a <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800591c:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800591e:	429a      	cmp	r2, r3
 8005920:	d209      	bcs.n	8005936 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8005922:	1a9b      	subs	r3, r3, r2
 8005924:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005926:	4628      	mov	r0, r5
 8005928:	f7ff ffc6 	bl	80058b8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800592c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800592e:	f7fe fd53 	bl	80043d8 <vPortExitCritical>
}
 8005932:	4620      	mov	r0, r4
 8005934:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800593a:	2401      	movs	r4, #1
 800593c:	e7f7      	b.n	800592e <xTaskCheckForTimeOut+0x5e>
 800593e:	bf00      	nop
 8005940:	20003da0 	.word	0x20003da0
 8005944:	20003d5c 	.word	0x20003d5c

08005948 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005948:	4b01      	ldr	r3, [pc, #4]	; (8005950 <vTaskMissedYield+0x8>)
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	4770      	bx	lr
 8005950:	20003da4 	.word	0x20003da4

08005954 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <xTaskGetSchedulerState+0x18>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	b133      	cbz	r3, 8005968 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800595a:	4b05      	ldr	r3, [pc, #20]	; (8005970 <xTaskGetSchedulerState+0x1c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8005960:	bf0c      	ite	eq
 8005962:	2002      	moveq	r0, #2
 8005964:	2000      	movne	r0, #0
 8005966:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005968:	2001      	movs	r0, #1
	}
 800596a:	4770      	bx	lr
 800596c:	20003d74 	.word	0x20003d74
 8005970:	20003d24 	.word	0x20003d24

08005974 <xTaskPriorityInherit>:
	{
 8005974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8005978:	4604      	mov	r4, r0
 800597a:	2800      	cmp	r0, #0
 800597c:	d041      	beq.n	8005a02 <xTaskPriorityInherit+0x8e>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800597e:	4a24      	ldr	r2, [pc, #144]	; (8005a10 <xTaskPriorityInherit+0x9c>)
 8005980:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005982:	6811      	ldr	r1, [r2, #0]
 8005984:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8005986:	428b      	cmp	r3, r1
 8005988:	4617      	mov	r7, r2
 800598a:	d231      	bcs.n	80059f0 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800598c:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800598e:	4d21      	ldr	r5, [pc, #132]	; (8005a14 <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005990:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005992:	bfa1      	itttt	ge
 8005994:	683a      	ldrge	r2, [r7, #0]
 8005996:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8005998:	f1c2 0207 	rsbge	r2, r2, #7
 800599c:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800599e:	2614      	movs	r6, #20
 80059a0:	6942      	ldr	r2, [r0, #20]
 80059a2:	fb06 5303 	mla	r3, r6, r3, r5
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d12d      	bne.n	8005a06 <xTaskPriorityInherit+0x92>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059aa:	f100 0804 	add.w	r8, r0, #4
 80059ae:	4640      	mov	r0, r8
 80059b0:	f7fe fc77 	bl	80042a2 <uxListRemove>
 80059b4:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <xTaskPriorityInherit+0xa4>)
 80059b6:	b948      	cbnz	r0, 80059cc <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80059b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80059ba:	4346      	muls	r6, r0
 80059bc:	59aa      	ldr	r2, [r5, r6]
 80059be:	b92a      	cbnz	r2, 80059cc <xTaskPriorityInherit+0x58>
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	2101      	movs	r1, #1
 80059c4:	4081      	lsls	r1, r0
 80059c6:	ea22 0201 	bic.w	r2, r2, r1
 80059ca:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059cc:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80059ce:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059d2:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80059d4:	2401      	movs	r4, #1
 80059d6:	fa04 f002 	lsl.w	r0, r4, r2
 80059da:	4308      	orrs	r0, r1
 80059dc:	6018      	str	r0, [r3, #0]
 80059de:	2014      	movs	r0, #20
 80059e0:	4641      	mov	r1, r8
 80059e2:	fb00 5002 	mla	r0, r0, r2, r5
 80059e6:	f7fe fc39 	bl	800425c <vListInsertEnd>
				xReturn = pdTRUE;
 80059ea:	2001      	movs	r0, #1
	}
 80059ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80059f0:	6813      	ldr	r3, [r2, #0]
 80059f2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80059f4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80059f6:	42a0      	cmp	r0, r4
 80059f8:	bf2c      	ite	cs
 80059fa:	2000      	movcs	r0, #0
 80059fc:	2001      	movcc	r0, #1
 80059fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return xReturn;
 8005a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005a0c:	e7ed      	b.n	80059ea <xTaskPriorityInherit+0x76>
 8005a0e:	bf00      	nop
 8005a10:	20003c80 	.word	0x20003c80
 8005a14:	20003c8c 	.word	0x20003c8c
 8005a18:	20003d2c 	.word	0x20003d2c

08005a1c <xTaskPriorityDisinherit>:
	{
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005a1e:	4604      	mov	r4, r0
 8005a20:	b908      	cbnz	r0, 8005a26 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8005a22:	2000      	movs	r0, #0
 8005a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005a26:	4b22      	ldr	r3, [pc, #136]	; (8005ab0 <xTaskPriorityDisinherit+0x94>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4298      	cmp	r0, r3
 8005a2c:	d008      	beq.n	8005a40 <xTaskPriorityDisinherit+0x24>
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	e7fe      	b.n	8005a3e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a40:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005a42:	b943      	cbnz	r3, 8005a56 <xTaskPriorityDisinherit+0x3a>
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	e7fe      	b.n	8005a54 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a56:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005a58:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8005a5a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a5c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8005a5e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a60:	d0df      	beq.n	8005a22 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1dd      	bne.n	8005a22 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a66:	1d05      	adds	r5, r0, #4
 8005a68:	4628      	mov	r0, r5
 8005a6a:	f7fe fc1a 	bl	80042a2 <uxListRemove>
 8005a6e:	4e11      	ldr	r6, [pc, #68]	; (8005ab4 <xTaskPriorityDisinherit+0x98>)
 8005a70:	4a11      	ldr	r2, [pc, #68]	; (8005ab8 <xTaskPriorityDisinherit+0x9c>)
 8005a72:	b950      	cbnz	r0, 8005a8a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005a74:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005a76:	2114      	movs	r1, #20
 8005a78:	4379      	muls	r1, r7
 8005a7a:	5873      	ldr	r3, [r6, r1]
 8005a7c:	b92b      	cbnz	r3, 8005a8a <xTaskPriorityDisinherit+0x6e>
 8005a7e:	6813      	ldr	r3, [r2, #0]
 8005a80:	2001      	movs	r0, #1
 8005a82:	40b8      	lsls	r0, r7
 8005a84:	ea23 0300 	bic.w	r3, r3, r0
 8005a88:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a8c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a8e:	f1c3 0107 	rsb	r1, r3, #7
 8005a92:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a94:	6811      	ldr	r1, [r2, #0]
 8005a96:	2401      	movs	r4, #1
 8005a98:	fa04 f003 	lsl.w	r0, r4, r3
 8005a9c:	4308      	orrs	r0, r1
 8005a9e:	6010      	str	r0, [r2, #0]
 8005aa0:	2014      	movs	r0, #20
 8005aa2:	fb00 6003 	mla	r0, r0, r3, r6
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	f7fe fbd8 	bl	800425c <vListInsertEnd>
					xReturn = pdTRUE;
 8005aac:	4620      	mov	r0, r4
	}
 8005aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ab0:	20003c80 	.word	0x20003c80
 8005ab4:	20003c8c 	.word	0x20003c8c
 8005ab8:	20003d2c 	.word	0x20003d2c

08005abc <vTaskPriorityDisinheritAfterTimeout>:
	{
 8005abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005abe:	4604      	mov	r4, r0
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	d04d      	beq.n	8005b60 <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ac4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8005ac6:	b942      	cbnz	r2, 8005ada <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8005ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	e7fe      	b.n	8005ad8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8005ada:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005adc:	4299      	cmp	r1, r3
 8005ade:	bf38      	it	cc
 8005ae0:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005ae2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005ae4:	428b      	cmp	r3, r1
 8005ae6:	d03b      	beq.n	8005b60 <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ae8:	2a01      	cmp	r2, #1
 8005aea:	d139      	bne.n	8005b60 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 8005aec:	4a1d      	ldr	r2, [pc, #116]	; (8005b64 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8005aee:	6812      	ldr	r2, [r2, #0]
 8005af0:	4290      	cmp	r0, r2
 8005af2:	d108      	bne.n	8005b06 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	e7fe      	b.n	8005b04 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b06:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b08:	4d17      	ldr	r5, [pc, #92]	; (8005b68 <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 8005b0a:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b0c:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b0e:	f04f 0614 	mov.w	r6, #20
 8005b12:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b14:	bfa8      	it	ge
 8005b16:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b1a:	fb06 5303 	mla	r3, r6, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b1e:	bfa8      	it	ge
 8005b20:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d11c      	bne.n	8005b60 <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b26:	1d07      	adds	r7, r0, #4
 8005b28:	4638      	mov	r0, r7
 8005b2a:	f7fe fbba 	bl	80042a2 <uxListRemove>
 8005b2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005b30:	4c0e      	ldr	r4, [pc, #56]	; (8005b6c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8005b32:	b940      	cbnz	r0, 8005b46 <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005b34:	4356      	muls	r6, r2
 8005b36:	59ab      	ldr	r3, [r5, r6]
 8005b38:	b92b      	cbnz	r3, 8005b46 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	4091      	lsls	r1, r2
 8005b40:	ea23 0301 	bic.w	r3, r3, r1
 8005b44:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 8005b46:	6821      	ldr	r1, [r4, #0]
 8005b48:	2301      	movs	r3, #1
 8005b4a:	4093      	lsls	r3, r2
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	2014      	movs	r0, #20
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	4639      	mov	r1, r7
 8005b54:	fb00 5002 	mla	r0, r0, r2, r5
	}
 8005b58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8005b5c:	f7fe bb7e 	b.w	800425c <vListInsertEnd>
 8005b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20003c80 	.word	0x20003c80
 8005b68:	20003c8c 	.word	0x20003c8c
 8005b6c:	20003d2c 	.word	0x20003d2c

08005b70 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005b70:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <pvTaskIncrementMutexHeldCount+0x14>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	b11a      	cbz	r2, 8005b7e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005b76:	6819      	ldr	r1, [r3, #0]
 8005b78:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8005b7a:	3201      	adds	r2, #1
 8005b7c:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8005b7e:	6818      	ldr	r0, [r3, #0]
	}
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20003c80 	.word	0x20003c80

08005b88 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8005b88:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8005b8a:	2001      	movs	r0, #1
 8005b8c:	f88d 0007 	strb.w	r0, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8005b90:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005b94:	4283      	cmp	r3, r0
 8005b96:	d10b      	bne.n	8005bb0 <BSP_SD_Init+0x28>
  sd_state = HAL_SD_Init(&hsd);
 8005b98:	4807      	ldr	r0, [pc, #28]	; (8005bb8 <BSP_SD_Init+0x30>)
 8005b9a:	f7fc f9cd 	bl	8001f38 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8005b9e:	b938      	cbnz	r0, 8005bb0 <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005ba0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ba4:	4804      	ldr	r0, [pc, #16]	; (8005bb8 <BSP_SD_Init+0x30>)
 8005ba6:	f7fc f9f3 	bl	8001f90 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 8005baa:	3000      	adds	r0, #0
 8005bac:	bf18      	it	ne
 8005bae:	2001      	movne	r0, #1
}
 8005bb0:	b003      	add	sp, #12
 8005bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bb6:	bf00      	nop
 8005bb8:	2000e3c0 	.word	0x2000e3c0

08005bbc <BSP_SD_ReadBlocks_DMA>:
{
 8005bbc:	b508      	push	{r3, lr}
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	460a      	mov	r2, r1
 8005bc2:	4601      	mov	r1, r0
 8005bc4:	4803      	ldr	r0, [pc, #12]	; (8005bd4 <BSP_SD_ReadBlocks_DMA+0x18>)
 8005bc6:	f7fb fec5 	bl	8001954 <HAL_SD_ReadBlocks_DMA>
}
 8005bca:	3000      	adds	r0, #0
 8005bcc:	bf18      	it	ne
 8005bce:	2001      	movne	r0, #1
 8005bd0:	bd08      	pop	{r3, pc}
 8005bd2:	bf00      	nop
 8005bd4:	2000e3c0 	.word	0x2000e3c0

08005bd8 <BSP_SD_WriteBlocks_DMA>:
{
 8005bd8:	b508      	push	{r3, lr}
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005bda:	4613      	mov	r3, r2
 8005bdc:	460a      	mov	r2, r1
 8005bde:	4601      	mov	r1, r0
 8005be0:	4803      	ldr	r0, [pc, #12]	; (8005bf0 <BSP_SD_WriteBlocks_DMA+0x18>)
 8005be2:	f7fb ff3d 	bl	8001a60 <HAL_SD_WriteBlocks_DMA>
}
 8005be6:	3000      	adds	r0, #0
 8005be8:	bf18      	it	ne
 8005bea:	2001      	movne	r0, #1
 8005bec:	bd08      	pop	{r3, pc}
 8005bee:	bf00      	nop
 8005bf0:	2000e3c0 	.word	0x2000e3c0

08005bf4 <BSP_SD_GetCardState>:
{
 8005bf4:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005bf6:	4803      	ldr	r0, [pc, #12]	; (8005c04 <BSP_SD_GetCardState+0x10>)
 8005bf8:	f7fc fa4e 	bl	8002098 <HAL_SD_GetCardState>
}
 8005bfc:	3804      	subs	r0, #4
 8005bfe:	bf18      	it	ne
 8005c00:	2001      	movne	r0, #1
 8005c02:	bd08      	pop	{r3, pc}
 8005c04:	2000e3c0 	.word	0x2000e3c0

08005c08 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005c08:	4601      	mov	r1, r0
 8005c0a:	4801      	ldr	r0, [pc, #4]	; (8005c10 <BSP_SD_GetCardInfo+0x8>)
 8005c0c:	f7fc b9ae 	b.w	8001f6c <HAL_SD_GetCardInfo>
 8005c10:	2000e3c0 	.word	0x2000e3c0

08005c14 <BSP_SD_AbortCallback>:
 8005c14:	4770      	bx	lr

08005c16 <HAL_SD_AbortCallback>:
{
 8005c16:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8005c18:	f7ff fffc 	bl	8005c14 <BSP_SD_AbortCallback>
 8005c1c:	bd08      	pop	{r3, pc}

08005c1e <HAL_SD_TxCpltCallback>:
{
 8005c1e:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8005c20:	f000 fb9c 	bl	800635c <BSP_SD_WriteCpltCallback>
 8005c24:	bd08      	pop	{r3, pc}

08005c26 <HAL_SD_RxCpltCallback>:
{
 8005c26:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8005c28:	f000 fba2 	bl	8006370 <BSP_SD_ReadCpltCallback>
 8005c2c:	bd08      	pop	{r3, pc}

08005c2e <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8005c2e:	2000      	movs	r0, #0
 8005c30:	4770      	bx	lr
	...

08005c34 <flash_program>:

/* USER CODE BEGIN Application */
void flash_program(void) {
	DWORD addr = APPLICATION_ADDRESS;
	UINT bytesread;
	DWORD length = f_size(&SDFile);
 8005c34:	4b18      	ldr	r3, [pc, #96]	; (8005c98 <flash_program+0x64>)
 8005c36:	68db      	ldr	r3, [r3, #12]
void flash_program(void) {
 8005c38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t block_size = length/BUFFER_SIZE;
 8005c3c:	f3c3 34cf 	ubfx	r4, r3, #15, #16
	uint16_t block_rem  = length % BUFFER_SIZE;
	uint32_t *ptr;
	if (block_rem)
 8005c40:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005c44:	b10b      	cbz	r3, 8005c4a <flash_program+0x16>
		block_size += 1;
 8005c46:	3401      	adds	r4, #1
 8005c48:	b2a4      	uxth	r4, r4
	DWORD addr = APPLICATION_ADDRESS;
 8005c4a:	4f14      	ldr	r7, [pc, #80]	; (8005c9c <flash_program+0x68>)
	for (int i=0; i < block_size; i++) {
		f_read (&SDFile, RAM_Buf, BUFFER_SIZE, (void *)&bytesread);
 8005c4c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8005ca0 <flash_program+0x6c>
 8005c50:	f8df a044 	ldr.w	sl, [pc, #68]	; 8005c98 <flash_program+0x64>
	for (int i=0; i < block_size; i++) {
 8005c54:	2600      	movs	r6, #0
 8005c56:	42a6      	cmp	r6, r4
 8005c58:	db02      	blt.n	8005c60 <flash_program+0x2c>
		for (int j=0; j < bytesread/4; j++) {
			FLASH_If_Write(addr, *ptr++);
			addr+=4;
		}
	}
}
 8005c5a:	b002      	add	sp, #8
 8005c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		f_read (&SDFile, RAM_Buf, BUFFER_SIZE, (void *)&bytesread);
 8005c60:	ab01      	add	r3, sp, #4
 8005c62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005c66:	4649      	mov	r1, r9
 8005c68:	4650      	mov	r0, sl
 8005c6a:	f7fe f837 	bl	8003cdc <f_read>
		for (int j=0; j < bytesread/4; j++) {
 8005c6e:	463d      	mov	r5, r7
 8005c70:	f04f 0800 	mov.w	r8, #0
 8005c74:	9b01      	ldr	r3, [sp, #4]
 8005c76:	ebb8 0f93 	cmp.w	r8, r3, lsr #2
 8005c7a:	eba5 0207 	sub.w	r2, r5, r7
 8005c7e:	d302      	bcc.n	8005c86 <flash_program+0x52>
	for (int i=0; i < block_size; i++) {
 8005c80:	3601      	adds	r6, #1
 8005c82:	462f      	mov	r7, r5
 8005c84:	e7e7      	b.n	8005c56 <flash_program+0x22>
			FLASH_If_Write(addr, *ptr++);
 8005c86:	4628      	mov	r0, r5
 8005c88:	f859 1002 	ldr.w	r1, [r9, r2]
 8005c8c:	f000 f928 	bl	8005ee0 <FLASH_If_Write>
			addr+=4;
 8005c90:	3504      	adds	r5, #4
		for (int j=0; j < bytesread/4; j++) {
 8005c92:	f108 0801 	add.w	r8, r8, #1
 8005c96:	e7ed      	b.n	8005c74 <flash_program+0x40>
 8005c98:	2000c294 	.word	0x2000c294
 8005c9c:	08010000 	.word	0x08010000
 8005ca0:	20003da8 	.word	0x20003da8

08005ca4 <jumptoapplicaion>:
{
  /* Software reset */
  NVIC_SystemReset();
}

void jumptoapplicaion(void) {
 8005ca4:	b510      	push	{r4, lr}
    /* Jump to user application */
	HAL_RCC_DeInit();
 8005ca6:	f7fb fbbf 	bl	8001428 <HAL_RCC_DeInit>
	SysTick->CTRL 	= 0;
 8005caa:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <jumptoapplicaion+0x30>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]
	SysTick->LOAD 	= 0;
 8005cb0:	605a      	str	r2, [r3, #4]
	SysTick->VAL	= 0;
 8005cb2:	609a      	str	r2, [r3, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f383 8810 	msr	PRIMASK, r3

	__set_PRIMASK(1);

    JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8005cba:	4b07      	ldr	r3, [pc, #28]	; (8005cd8 <jumptoapplicaion+0x34>)
 8005cbc:	4a07      	ldr	r2, [pc, #28]	; (8005cdc <jumptoapplicaion+0x38>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6013      	str	r3, [r2, #0]
    Jump_To_Application = (pFunction) JumpAddress;
 8005cc2:	4a07      	ldr	r2, [pc, #28]	; (8005ce0 <jumptoapplicaion+0x3c>)
 8005cc4:	6013      	str	r3, [r2, #0]
    /* Initialize user application's Stack Pointer */
    __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8005cc6:	4a07      	ldr	r2, [pc, #28]	; (8005ce4 <jumptoapplicaion+0x40>)
 8005cc8:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8005cca:	f382 8808 	msr	MSP, r2
    Jump_To_Application();
}
 8005cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Jump_To_Application();
 8005cd2:	4718      	bx	r3
 8005cd4:	e000e010 	.word	0xe000e010
 8005cd8:	08010004 	.word	0x08010004
 8005cdc:	2000c288 	.word	0x2000c288
 8005ce0:	2000c28c 	.word	0x2000c28c
 8005ce4:	08010000 	.word	0x08010000

08005ce8 <flash_download>:
void flash_download(void) {
 8005ce8:	b508      	push	{r3, lr}
	if(f_mount(&SDFatFS, (TCHAR const*)"",0) == FR_OK) {
 8005cea:	2200      	movs	r2, #0
 8005cec:	490d      	ldr	r1, [pc, #52]	; (8005d24 <flash_download+0x3c>)
 8005cee:	480e      	ldr	r0, [pc, #56]	; (8005d28 <flash_download+0x40>)
 8005cf0:	f7fd fe90 	bl	8003a14 <f_mount>
 8005cf4:	b9a8      	cbnz	r0, 8005d22 <flash_download+0x3a>
		if(f_open(&SDFile, DOWNLOAD_FILENAME, FA_OPEN_EXISTING | FA_READ) == FR_OK) {
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	490c      	ldr	r1, [pc, #48]	; (8005d2c <flash_download+0x44>)
 8005cfa:	480d      	ldr	r0, [pc, #52]	; (8005d30 <flash_download+0x48>)
 8005cfc:	f7fd fed4 	bl	8003aa8 <f_open>
 8005d00:	b978      	cbnz	r0, 8005d22 <flash_download+0x3a>
			FLASH_If_FlashUnlock();							//unlock flash ready to program.
 8005d02:	f000 f82b 	bl	8005d5c <FLASH_If_FlashUnlock>
			FLASH_If_EraseSectors(APPLICATION_ADDRESS);		//erase the application code.
 8005d06:	480b      	ldr	r0, [pc, #44]	; (8005d34 <flash_download+0x4c>)
 8005d08:	f000 f82c 	bl	8005d64 <FLASH_If_EraseSectors>
			flash_program();								//program the flash
 8005d0c:	f7ff ff92 	bl	8005c34 <flash_program>
			f_close(&SDFile);								//close sd card
 8005d10:	4807      	ldr	r0, [pc, #28]	; (8005d30 <flash_download+0x48>)
 8005d12:	f7fe f901 	bl	8003f18 <f_close>
			FLASH_If_Flashlock();							//unlock the flash
 8005d16:	f000 f823 	bl	8005d60 <FLASH_If_Flashlock>
}
 8005d1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			jumptoapplicaion();
 8005d1e:	f7ff bfc1 	b.w	8005ca4 <jumptoapplicaion>
 8005d22:	bd08      	pop	{r3, pc}
 8005d24:	080067d3 	.word	0x080067d3
 8005d28:	2000d2c4 	.word	0x2000d2c4
 8005d2c:	080067d4 	.word	0x080067d4
 8005d30:	2000c294 	.word	0x2000c294
 8005d34:	08010000 	.word	0x08010000

08005d38 <MX_FATFS_Init>:
{
 8005d38:	b508      	push	{r3, lr}
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005d3a:	4905      	ldr	r1, [pc, #20]	; (8005d50 <MX_FATFS_Init+0x18>)
 8005d3c:	4805      	ldr	r0, [pc, #20]	; (8005d54 <MX_FATFS_Init+0x1c>)
 8005d3e:	f7fe f927 	bl	8003f90 <FATFS_LinkDriver>
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <MX_FATFS_Init+0x20>)
 8005d44:	7018      	strb	r0, [r3, #0]
}
 8005d46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flash_download();
 8005d4a:	f7ff bfcd 	b.w	8005ce8 <flash_download>
 8005d4e:	bf00      	nop
 8005d50:	2000c290 	.word	0x2000c290
 8005d54:	080067e8 	.word	0x080067e8
 8005d58:	2000c284 	.word	0x2000c284

08005d5c <FLASH_If_FlashUnlock>:
  * @param  None
  * @retval None
  */
void FLASH_If_FlashUnlock(void)
{
  HAL_FLASH_Unlock();
 8005d5c:	f7fa be88 	b.w	8000a70 <HAL_FLASH_Unlock>

08005d60 <FLASH_If_Flashlock>:
}

void FLASH_If_Flashlock(void)
{
  HAL_FLASH_Lock();
 8005d60:	f7fa be98 	b.w	8000a94 <HAL_FLASH_Lock>

08005d64 <FLASH_If_EraseSectors>:
  * @param  Address: Start address for erasing data
  * @retval 0: Erase sectors done with success
  *         1: Erase error
  */
uint32_t FLASH_If_EraseSectors(uint32_t Address)
{
 8005d64:	b508      	push	{r3, lr}
  /* Erase the user Flash area
    (area defined by APPLICATION_ADDRESS and USER_FLASH_LAST_PAGE_ADDRESS) ****/
  
  if(Address <= (uint32_t) USER_FLASH_LAST_PAGE_ADDRESS)
 8005d66:	4b58      	ldr	r3, [pc, #352]	; (8005ec8 <FLASH_If_EraseSectors+0x164>)
 8005d68:	4298      	cmp	r0, r3
 8005d6a:	f200 80ab 	bhi.w	8005ec4 <FLASH_If_EraseSectors+0x160>
  */
static uint32_t FLASH_If_GetSectorNumber(uint32_t Address)
{
  uint32_t sector = 0;
  
  if(Address < ADDR_FLASH_SECTOR_1 && Address >= ADDR_FLASH_SECTOR_0)
 8005d6e:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8005d72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d76:	d379      	bcc.n	8005e6c <FLASH_If_EraseSectors+0x108>
  {
    sector = FLASH_SECTOR_0;  
  }
  else if(Address < ADDR_FLASH_SECTOR_2 && Address >= ADDR_FLASH_SECTOR_1)
 8005d78:	f5a3 4280 	sub.w	r2, r3, #16384	; 0x4000
 8005d7c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005d80:	d376      	bcc.n	8005e70 <FLASH_If_EraseSectors+0x10c>
  {
    sector = FLASH_SECTOR_1;  
  }
  else if(Address < ADDR_FLASH_SECTOR_3 && Address >= ADDR_FLASH_SECTOR_2)
 8005d82:	f5a3 4200 	sub.w	r2, r3, #32768	; 0x8000
 8005d86:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005d8a:	d373      	bcc.n	8005e74 <FLASH_If_EraseSectors+0x110>
  {
    sector = FLASH_SECTOR_2;  
  }
  else if(Address < ADDR_FLASH_SECTOR_4 && Address >= ADDR_FLASH_SECTOR_3)
 8005d8c:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 8005d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d94:	d370      	bcc.n	8005e78 <FLASH_If_EraseSectors+0x114>
  {
    sector = FLASH_SECTOR_3;  
  }
  else if(Address < ADDR_FLASH_SECTOR_5 && Address >= ADDR_FLASH_SECTOR_4)
 8005d96:	f100 4377 	add.w	r3, r0, #4143972352	; 0xf7000000
 8005d9a:	f503 027f 	add.w	r2, r3, #16711680	; 0xff0000
 8005d9e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005da2:	d36b      	bcc.n	8005e7c <FLASH_If_EraseSectors+0x118>
  {
    sector = FLASH_SECTOR_4;  
  }
  else if(Address < ADDR_FLASH_SECTOR_6 && Address >= ADDR_FLASH_SECTOR_5)
 8005da4:	4a49      	ldr	r2, [pc, #292]	; (8005ecc <FLASH_If_EraseSectors+0x168>)
 8005da6:	f503 017e 	add.w	r1, r3, #16646144	; 0xfe0000
 8005daa:	4291      	cmp	r1, r2
 8005dac:	d968      	bls.n	8005e80 <FLASH_If_EraseSectors+0x11c>
  {
    sector = FLASH_SECTOR_5;  
  }
  else if(Address < ADDR_FLASH_SECTOR_7 && Address >= ADDR_FLASH_SECTOR_6)
 8005dae:	f503 017c 	add.w	r1, r3, #16515072	; 0xfc0000
 8005db2:	4291      	cmp	r1, r2
 8005db4:	d966      	bls.n	8005e84 <FLASH_If_EraseSectors+0x120>
  {
    sector = FLASH_SECTOR_6;  
  }
  else if(Address < ADDR_FLASH_SECTOR_8 && Address >= ADDR_FLASH_SECTOR_7)
 8005db6:	f503 017a 	add.w	r1, r3, #16384000	; 0xfa0000
 8005dba:	4291      	cmp	r1, r2
 8005dbc:	d964      	bls.n	8005e88 <FLASH_If_EraseSectors+0x124>
  {
    sector = FLASH_SECTOR_7;  
  }
  else if(Address < ADDR_FLASH_SECTOR_9 && Address >= ADDR_FLASH_SECTOR_8)
 8005dbe:	f503 0178 	add.w	r1, r3, #16252928	; 0xf80000
 8005dc2:	4291      	cmp	r1, r2
 8005dc4:	d962      	bls.n	8005e8c <FLASH_If_EraseSectors+0x128>
  {
    sector = FLASH_SECTOR_8;  
  }
  else if(Address < ADDR_FLASH_SECTOR_10 && Address >= ADDR_FLASH_SECTOR_9)
 8005dc6:	f503 0176 	add.w	r1, r3, #16121856	; 0xf60000
 8005dca:	4291      	cmp	r1, r2
 8005dcc:	d960      	bls.n	8005e90 <FLASH_If_EraseSectors+0x12c>
  {
    sector = FLASH_SECTOR_9;  
  }
  else if(Address < ADDR_FLASH_SECTOR_11 && Address >= ADDR_FLASH_SECTOR_10)
 8005dce:	f503 0174 	add.w	r1, r3, #15990784	; 0xf40000
 8005dd2:	4291      	cmp	r1, r2
 8005dd4:	d95e      	bls.n	8005e94 <FLASH_If_EraseSectors+0x130>
  {
    sector = FLASH_SECTOR_10;  
  }
  else if (Address < ADDR_FLASH_SECTOR_12 && Address >= ADDR_FLASH_SECTOR_11)
 8005dd6:	f503 0172 	add.w	r1, r3, #15859712	; 0xf20000
 8005dda:	4291      	cmp	r1, r2
 8005ddc:	d95c      	bls.n	8005e98 <FLASH_If_EraseSectors+0x134>
  {
    sector = FLASH_SECTOR_11;  
  }
  else if(Address < ADDR_FLASH_SECTOR_13 && Address >= ADDR_FLASH_SECTOR_12)
 8005dde:	f1a0 6001 	sub.w	r0, r0, #135266304	; 0x8100000
 8005de2:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8005de6:	d359      	bcc.n	8005e9c <FLASH_If_EraseSectors+0x138>
  {
    sector = FLASH_SECTOR_12;  
  }
  else if(Address < ADDR_FLASH_SECTOR_14 && Address >= ADDR_FLASH_SECTOR_13)
 8005de8:	f5a0 4180 	sub.w	r1, r0, #16384	; 0x4000
 8005dec:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005df0:	d356      	bcc.n	8005ea0 <FLASH_If_EraseSectors+0x13c>
  {
    sector = FLASH_SECTOR_13;  
  }
  else if(Address < ADDR_FLASH_SECTOR_15 && Address >= ADDR_FLASH_SECTOR_14)
 8005df2:	f5a0 4100 	sub.w	r1, r0, #32768	; 0x8000
 8005df6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005dfa:	d353      	bcc.n	8005ea4 <FLASH_If_EraseSectors+0x140>
  {
    sector = FLASH_SECTOR_14;  
  }
  else if(Address < ADDR_FLASH_SECTOR_16 && Address >= ADDR_FLASH_SECTOR_15)
 8005dfc:	f5a0 4040 	sub.w	r0, r0, #49152	; 0xc000
 8005e00:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8005e04:	d350      	bcc.n	8005ea8 <FLASH_If_EraseSectors+0x144>
  {
    sector = FLASH_SECTOR_15;  
  }
  else if(Address < ADDR_FLASH_SECTOR_17 && Address >= ADDR_FLASH_SECTOR_16)
 8005e06:	f503 016f 	add.w	r1, r3, #15663104	; 0xef0000
 8005e0a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005e0e:	d34d      	bcc.n	8005eac <FLASH_If_EraseSectors+0x148>
  {
    sector = FLASH_SECTOR_16;  
  }
  else if(Address < ADDR_FLASH_SECTOR_18 && Address >= ADDR_FLASH_SECTOR_17)
 8005e10:	f503 016e 	add.w	r1, r3, #15597568	; 0xee0000
 8005e14:	4291      	cmp	r1, r2
 8005e16:	d94b      	bls.n	8005eb0 <FLASH_If_EraseSectors+0x14c>
  {
    sector = FLASH_SECTOR_17;  
  }
  else if(Address < ADDR_FLASH_SECTOR_19 && Address >= ADDR_FLASH_SECTOR_18)
 8005e18:	f503 016c 	add.w	r1, r3, #15466496	; 0xec0000
 8005e1c:	4291      	cmp	r1, r2
 8005e1e:	d949      	bls.n	8005eb4 <FLASH_If_EraseSectors+0x150>
  {
    sector = FLASH_SECTOR_18;  
  }
  else if(Address < ADDR_FLASH_SECTOR_20 && Address >= ADDR_FLASH_SECTOR_19)
 8005e20:	f503 016a 	add.w	r1, r3, #15335424	; 0xea0000
 8005e24:	4291      	cmp	r1, r2
 8005e26:	d947      	bls.n	8005eb8 <FLASH_If_EraseSectors+0x154>
  {
    sector = FLASH_SECTOR_19;  
  }
  else if(Address < ADDR_FLASH_SECTOR_21 && Address >= ADDR_FLASH_SECTOR_20)
 8005e28:	f503 0168 	add.w	r1, r3, #15204352	; 0xe80000
 8005e2c:	4291      	cmp	r1, r2
 8005e2e:	d945      	bls.n	8005ebc <FLASH_If_EraseSectors+0x158>
  {
    sector = FLASH_SECTOR_20;  
  } 
  else if(Address < ADDR_FLASH_SECTOR_22 && Address >= ADDR_FLASH_SECTOR_21)
 8005e30:	f503 0166 	add.w	r1, r3, #15073280	; 0xe60000
 8005e34:	4291      	cmp	r1, r2
 8005e36:	d943      	bls.n	8005ec0 <FLASH_If_EraseSectors+0x15c>
  {
    sector = FLASH_SECTOR_21;  
  }
  else if(Address < ADDR_FLASH_SECTOR_23 && Address >= ADDR_FLASH_SECTOR_22)
 8005e38:	f503 0364 	add.w	r3, r3, #14942208	; 0xe40000
  {
    sector = FLASH_SECTOR_22;  
  }
  else/*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_23)*/
  {
    sector = FLASH_SECTOR_23;  
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	bf94      	ite	ls
 8005e40:	2316      	movls	r3, #22
 8005e42:	2317      	movhi	r3, #23
    FirstSector = FLASH_If_GetSectorNumber(Address);
 8005e44:	4a22      	ldr	r2, [pc, #136]	; (8005ed0 <FLASH_If_EraseSectors+0x16c>)
    NbOfSectors = FLASH_If_GetSectorNumber(USER_FLASH_LAST_PAGE_ADDRESS) - FirstSector + 1;
 8005e46:	4923      	ldr	r1, [pc, #140]	; (8005ed4 <FLASH_If_EraseSectors+0x170>)
    FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8005e48:	4823      	ldr	r0, [pc, #140]	; (8005ed8 <FLASH_If_EraseSectors+0x174>)
    FirstSector = FLASH_If_GetSectorNumber(Address);
 8005e4a:	6013      	str	r3, [r2, #0]
    NbOfSectors = FLASH_If_GetSectorNumber(USER_FLASH_LAST_PAGE_ADDRESS) - FirstSector + 1;
 8005e4c:	f1c3 0218 	rsb	r2, r3, #24
 8005e50:	600a      	str	r2, [r1, #0]
    FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8005e52:	2100      	movs	r1, #0
 8005e54:	6001      	str	r1, [r0, #0]
    FLASH_EraseInitStruct.Sector = FirstSector;
 8005e56:	6083      	str	r3, [r0, #8]
    if(HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &SectorError) != HAL_OK)
 8005e58:	4920      	ldr	r1, [pc, #128]	; (8005edc <FLASH_If_EraseSectors+0x178>)
    FLASH_EraseInitStruct.NbSectors = NbOfSectors;
 8005e5a:	60c2      	str	r2, [r0, #12]
    FLASH_EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	6103      	str	r3, [r0, #16]
    if(HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &SectorError) != HAL_OK)
 8005e60:	f7fa ff04 	bl	8000c6c <HAL_FLASHEx_Erase>
 8005e64:	3000      	adds	r0, #0
 8005e66:	bf18      	it	ne
 8005e68:	2001      	movne	r0, #1
 8005e6a:	bd08      	pop	{r3, pc}
    sector = FLASH_SECTOR_0;  
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e7e9      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_1;  
 8005e70:	2301      	movs	r3, #1
 8005e72:	e7e7      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_2;  
 8005e74:	2302      	movs	r3, #2
 8005e76:	e7e5      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_3;  
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e7e3      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_4;  
 8005e7c:	2304      	movs	r3, #4
 8005e7e:	e7e1      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_5;  
 8005e80:	2305      	movs	r3, #5
 8005e82:	e7df      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_6;  
 8005e84:	2306      	movs	r3, #6
 8005e86:	e7dd      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_7;  
 8005e88:	2307      	movs	r3, #7
 8005e8a:	e7db      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_8;  
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	e7d9      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_9;  
 8005e90:	2309      	movs	r3, #9
 8005e92:	e7d7      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_10;  
 8005e94:	230a      	movs	r3, #10
 8005e96:	e7d5      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_11;  
 8005e98:	230b      	movs	r3, #11
 8005e9a:	e7d3      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_12;  
 8005e9c:	230c      	movs	r3, #12
 8005e9e:	e7d1      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_13;  
 8005ea0:	230d      	movs	r3, #13
 8005ea2:	e7cf      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_14;  
 8005ea4:	230e      	movs	r3, #14
 8005ea6:	e7cd      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_15;  
 8005ea8:	230f      	movs	r3, #15
 8005eaa:	e7cb      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_16;  
 8005eac:	2310      	movs	r3, #16
 8005eae:	e7c9      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_17;  
 8005eb0:	2311      	movs	r3, #17
 8005eb2:	e7c7      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_18;  
 8005eb4:	2312      	movs	r3, #18
 8005eb6:	e7c5      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_19;  
 8005eb8:	2313      	movs	r3, #19
 8005eba:	e7c3      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_20;  
 8005ebc:	2314      	movs	r3, #20
 8005ebe:	e7c1      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    sector = FLASH_SECTOR_21;  
 8005ec0:	2315      	movs	r3, #21
 8005ec2:	e7bf      	b.n	8005e44 <FLASH_If_EraseSectors+0xe0>
    return (1);
 8005ec4:	2001      	movs	r0, #1
}
 8005ec6:	bd08      	pop	{r3, pc}
 8005ec8:	081ffffb 	.word	0x081ffffb
 8005ecc:	0001ffff 	.word	0x0001ffff
 8005ed0:	2000bdbc 	.word	0x2000bdbc
 8005ed4:	2000bdc0 	.word	0x2000bdc0
 8005ed8:	2000bda8 	.word	0x2000bda8
 8005edc:	2000bdc4 	.word	0x2000bdc4

08005ee0 <FLASH_If_Write>:
{
 8005ee0:	b508      	push	{r3, lr}
  if(Address <= (uint32_t) USER_FLASH_LAST_PAGE_ADDRESS)
 8005ee2:	4b07      	ldr	r3, [pc, #28]	; (8005f00 <FLASH_If_Write+0x20>)
 8005ee4:	4298      	cmp	r0, r3
{
 8005ee6:	460a      	mov	r2, r1
  if(Address <= (uint32_t) USER_FLASH_LAST_PAGE_ADDRESS)
 8005ee8:	d808      	bhi.n	8005efc <FLASH_If_Write+0x1c>
    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Data)!= HAL_OK)
 8005eea:	4601      	mov	r1, r0
 8005eec:	2300      	movs	r3, #0
 8005eee:	2002      	movs	r0, #2
 8005ef0:	f7fa fe04 	bl	8000afc <HAL_FLASH_Program>
 8005ef4:	3000      	adds	r0, #0
 8005ef6:	bf18      	it	ne
 8005ef8:	2001      	movne	r0, #1
 8005efa:	bd08      	pop	{r3, pc}
    return (1);
 8005efc:	2001      	movs	r0, #1
}
 8005efe:	bd08      	pop	{r3, pc}
 8005f00:	081ffffb 	.word	0x081ffffb

08005f04 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8005f04:	4b03      	ldr	r3, [pc, #12]	; (8005f14 <vApplicationGetIdleTaskMemory+0x10>)
 8005f06:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005f08:	4b03      	ldr	r3, [pc, #12]	; (8005f18 <vApplicationGetIdleTaskMemory+0x14>)
 8005f0a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005f0c:	2380      	movs	r3, #128	; 0x80
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	2000bfc8 	.word	0x2000bfc8
 8005f18:	2000bdc8 	.word	0x2000bdc8

08005f1c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005f1c:	b508      	push	{r3, lr}
  /* init code for FATFS */
  MX_FATFS_Init();
 8005f1e:	f7ff ff0b 	bl	8005d38 <MX_FATFS_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_6);
 8005f22:	4c04      	ldr	r4, [pc, #16]	; (8005f34 <StartDefaultTask+0x18>)
    osDelay(200);
 8005f24:	20c8      	movs	r0, #200	; 0xc8
 8005f26:	f7fe f891 	bl	800404c <osDelay>
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_6);
 8005f2a:	2140      	movs	r1, #64	; 0x40
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	f7fa ffe0 	bl	8000ef2 <HAL_GPIO_TogglePin>
 8005f32:	e7f7      	b.n	8005f24 <StartDefaultTask+0x8>
 8005f34:	40021800 	.word	0x40021800

08005f38 <SystemClock_Config>:
{
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	b0a4      	sub	sp, #144	; 0x90
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f3c:	2234      	movs	r2, #52	; 0x34
 8005f3e:	2100      	movs	r1, #0
 8005f40:	a808      	add	r0, sp, #32
 8005f42:	f000 fbce 	bl	80066e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f46:	2214      	movs	r2, #20
 8005f48:	2100      	movs	r1, #0
 8005f4a:	a803      	add	r0, sp, #12
 8005f4c:	f000 fbc9 	bl	80066e2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f50:	2100      	movs	r1, #0
 8005f52:	223c      	movs	r2, #60	; 0x3c
 8005f54:	a815      	add	r0, sp, #84	; 0x54
 8005f56:	f000 fbc4 	bl	80066e2 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f5a:	2400      	movs	r4, #0
 8005f5c:	4b21      	ldr	r3, [pc, #132]	; (8005fe4 <SystemClock_Config+0xac>)
 8005f5e:	9401      	str	r4, [sp, #4]
 8005f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005f66:	641a      	str	r2, [r3, #64]	; 0x40
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f72:	4b1d      	ldr	r3, [pc, #116]	; (8005fe8 <SystemClock_Config+0xb0>)
 8005f74:	9402      	str	r4, [sp, #8]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f84:	9302      	str	r3, [sp, #8]
 8005f86:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f90:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005f96:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8005f98:	23d8      	movs	r3, #216	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f9a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 15;
 8005f9c:	260f      	movs	r6, #15
  RCC_OscInitStruct.PLL.PLLN = 216;
 8005f9e:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005fa0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005fa2:	2308      	movs	r3, #8
 8005fa4:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005fa6:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8005fa8:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005faa:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005fac:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005fae:	f7fb fae1 	bl	8001574 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005fb2:	f7fa ffa5 	bl	8000f00 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005fb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005fba:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005fbc:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005fc2:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005fc4:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005fc6:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005fc8:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005fca:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005fcc:	f7fb f802 	bl	8000fd4 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005fd0:	f44f 73c0 	mov.w	r3, #384	; 0x180
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fd4:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005fd6:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005fd8:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005fda:	9423      	str	r4, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fdc:	f7fb f8c2 	bl	8001164 <HAL_RCCEx_PeriphCLKConfig>
}
 8005fe0:	b024      	add	sp, #144	; 0x90
 8005fe2:	bd70      	pop	{r4, r5, r6, pc}
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	40007000 	.word	0x40007000

08005fec <main>:
{
 8005fec:	b500      	push	{lr}
 8005fee:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8005ff0:	f7fa fa8e 	bl	8000510 <HAL_Init>
  SystemClock_Config();
 8005ff4:	f7ff ffa0 	bl	8005f38 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ff8:	2214      	movs	r2, #20
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ffa:	2400      	movs	r4, #0
 8005ffc:	4d38      	ldr	r5, [pc, #224]	; (80060e0 <main+0xf4>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8005ffe:	4e39      	ldr	r6, [pc, #228]	; (80060e4 <main+0xf8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006000:	2100      	movs	r1, #0
 8006002:	eb0d 0002 	add.w	r0, sp, r2
 8006006:	f000 fb6c 	bl	80066e2 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800600a:	9401      	str	r4, [sp, #4]
 800600c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800600e:	4836      	ldr	r0, [pc, #216]	; (80060e8 <main+0xfc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006010:	f043 0304 	orr.w	r3, r3, #4
 8006014:	632b      	str	r3, [r5, #48]	; 0x30
 8006016:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006020:	9402      	str	r4, [sp, #8]
 8006022:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006024:	f043 0308 	orr.w	r3, r3, #8
 8006028:	632b      	str	r3, [r5, #48]	; 0x30
 800602a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800602c:	f003 0308 	and.w	r3, r3, #8
 8006030:	9302      	str	r3, [sp, #8]
 8006032:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006034:	9403      	str	r4, [sp, #12]
 8006036:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603c:	632b      	str	r3, [r5, #48]	; 0x30
 800603e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006044:	9303      	str	r3, [sp, #12]
 8006046:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006048:	9404      	str	r4, [sp, #16]
 800604a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800604c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006050:	632b      	str	r3, [r5, #48]	; 0x30
 8006052:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8006058:	4622      	mov	r2, r4
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800605a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800605c:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800605e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8006060:	f7fa ff42 	bl	8000ee8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006064:	2340      	movs	r3, #64	; 0x40
 8006066:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006068:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800606a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800606c:	481e      	ldr	r0, [pc, #120]	; (80060e8 <main+0xfc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800606e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006070:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006072:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006074:	f7fa fe4c 	bl	8000d10 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006078:	9400      	str	r4, [sp, #0]
 800607a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800607c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006080:	632b      	str	r3, [r5, #48]	; 0x30
 8006082:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8006088:	4622      	mov	r2, r4
 800608a:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 800608c:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800608e:	203b      	movs	r0, #59	; 0x3b
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006090:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8006092:	f7fa fa8f 	bl	80005b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006096:	203b      	movs	r0, #59	; 0x3b
 8006098:	f7fa fac0 	bl	800061c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800609c:	4622      	mov	r2, r4
 800609e:	2105      	movs	r1, #5
 80060a0:	2045      	movs	r0, #69	; 0x45
 80060a2:	f7fa fa87 	bl	80005b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80060a6:	2045      	movs	r0, #69	; 0x45
 80060a8:	f7fa fab8 	bl	800061c <HAL_NVIC_EnableIRQ>
  hsd.Instance = SDIO;
 80060ac:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <main+0x100>)
 80060ae:	4a10      	ldr	r2, [pc, #64]	; (80060f0 <main+0x104>)
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80060b0:	609c      	str	r4, [r3, #8]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80060b2:	e883 0014 	stmia.w	r3, {r2, r4}
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80060b6:	60dc      	str	r4, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80060b8:	611c      	str	r4, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80060ba:	615c      	str	r4, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80060bc:	619c      	str	r4, [r3, #24]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80060be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80060c0:	ad05      	add	r5, sp, #20
 80060c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060c4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80060c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80060cc:	4621      	mov	r1, r4
 80060ce:	a805      	add	r0, sp, #20
 80060d0:	f7fd ff94 	bl	8003ffc <osThreadCreate>
 80060d4:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <main+0x108>)
 80060d6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80060d8:	f7fd ff7c 	bl	8003fd4 <osKernelStart>
 80060dc:	e7fe      	b.n	80060dc <main+0xf0>
 80060de:	bf00      	nop
 80060e0:	40023800 	.word	0x40023800
 80060e4:	0800670c 	.word	0x0800670c
 80060e8:	40021800 	.word	0x40021800
 80060ec:	2000e3c0 	.word	0x2000e3c0
 80060f0:	40012c00 	.word	0x40012c00
 80060f4:	2000e35c 	.word	0x2000e35c

080060f8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80060f8:	6802      	ldr	r2, [r0, #0]
 80060fa:	4b03      	ldr	r3, [pc, #12]	; (8006108 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d101      	bne.n	8006104 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8006100:	f7fa ba20 	b.w	8000544 <HAL_IncTick>
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40001000 	.word	0x40001000

0800610c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800610c:	4770      	bx	lr
	...

08006110 <SD_CheckStatus.isra.0>:
  }

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
 8006110:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 8006112:	4c06      	ldr	r4, [pc, #24]	; (800612c <SD_CheckStatus.isra.0+0x1c>)
 8006114:	2301      	movs	r3, #1
 8006116:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006118:	f7ff fd6c 	bl	8005bf4 <BSP_SD_GetCardState>
 800611c:	4623      	mov	r3, r4
 800611e:	b918      	cbnz	r0, 8006128 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8006120:	7822      	ldrb	r2, [r4, #0]
 8006122:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006126:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8006128:	7818      	ldrb	r0, [r3, #0]
}
 800612a:	bd10      	pop	{r4, pc}
 800612c:	20000008 	.word	0x20000008

08006130 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006130:	b5f0      	push	{r4, r5, r6, r7, lr}
Stat = STA_NOINIT; 
 8006132:	4c0f      	ldr	r4, [pc, #60]	; (8006170 <SD_initialize+0x40>)
{
 8006134:	b085      	sub	sp, #20
Stat = STA_NOINIT; 
 8006136:	2301      	movs	r3, #1
 8006138:	7023      	strb	r3, [r4, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 800613a:	f7fd ff50 	bl	8003fde <osKernelRunning>
 800613e:	b1a0      	cbz	r0, 800616a <SD_initialize+0x3a>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8006140:	f7ff fd22 	bl	8005b88 <BSP_SD_Init>
 8006144:	b910      	cbnz	r0, 800614c <SD_initialize+0x1c>
    {
      Stat = SD_CheckStatus(lun);
 8006146:	f7ff ffe3 	bl	8006110 <SD_CheckStatus.isra.0>
 800614a:	7020      	strb	r0, [r4, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 800614c:	7823      	ldrb	r3, [r4, #0]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d00b      	beq.n	800616a <SD_initialize+0x3a>
 8006152:	4e08      	ldr	r6, [pc, #32]	; (8006174 <SD_initialize+0x44>)
 8006154:	6837      	ldr	r7, [r6, #0]
 8006156:	b947      	cbnz	r7, 800616a <SD_initialize+0x3a>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8006158:	4b07      	ldr	r3, [pc, #28]	; (8006178 <SD_initialize+0x48>)
 800615a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800615c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8006160:	4639      	mov	r1, r7
 8006162:	4668      	mov	r0, sp
 8006164:	f7fd ffea 	bl	800413c <osMessageCreate>
 8006168:	6030      	str	r0, [r6, #0]
    }
  }
  return Stat;
 800616a:	7820      	ldrb	r0, [r4, #0]
}
 800616c:	b005      	add	sp, #20
 800616e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006170:	20000008 	.word	0x20000008
 8006174:	2000c01c 	.word	0x2000c01c
 8006178:	08006728 	.word	0x08006728

0800617c <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 800617c:	f7ff bfc8 	b.w	8006110 <SD_CheckStatus.isra.0>

08006180 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006180:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006182:	4b12      	ldr	r3, [pc, #72]	; (80061cc <SD_ioctl+0x4c>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	07db      	lsls	r3, r3, #31
{
 8006188:	b088      	sub	sp, #32
 800618a:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800618c:	d41b      	bmi.n	80061c6 <SD_ioctl+0x46>

  switch (cmd)
 800618e:	2903      	cmp	r1, #3
 8006190:	d803      	bhi.n	800619a <SD_ioctl+0x1a>
 8006192:	e8df f001 	tbb	[pc, r1]
 8006196:	0510      	.short	0x0510
 8006198:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 800619a:	2004      	movs	r0, #4
  }

  return res;
}
 800619c:	b008      	add	sp, #32
 800619e:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80061a0:	4668      	mov	r0, sp
 80061a2:	f7ff fd31 	bl	8005c08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80061a6:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	e004      	b.n	80061b6 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 80061ac:	4668      	mov	r0, sp
 80061ae:	f7ff fd2b 	bl	8005c08 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80061b2:	9b07      	ldr	r3, [sp, #28]
 80061b4:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 80061b6:	2000      	movs	r0, #0
 80061b8:	e7f0      	b.n	800619c <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 80061ba:	4668      	mov	r0, sp
 80061bc:	f7ff fd24 	bl	8005c08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80061c0:	9b07      	ldr	r3, [sp, #28]
 80061c2:	0a5b      	lsrs	r3, r3, #9
 80061c4:	e7f0      	b.n	80061a8 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80061c6:	2003      	movs	r0, #3
 80061c8:	e7e8      	b.n	800619c <SD_ioctl+0x1c>
 80061ca:	bf00      	nop
 80061cc:	20000008 	.word	0x20000008

080061d0 <SD_CheckStatusWithTimeout.constprop.2>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 80061d0:	b538      	push	{r3, r4, r5, lr}
  uint32_t timer = osKernelSysTick();
 80061d2:	f7fd ff0c 	bl	8003fee <osKernelSysTick>
  while( osKernelSysTick() - timer < timeout)
 80061d6:	f247 542f 	movw	r4, #29999	; 0x752f
  uint32_t timer = osKernelSysTick();
 80061da:	4605      	mov	r5, r0
  while( osKernelSysTick() - timer < timeout)
 80061dc:	f7fd ff07 	bl	8003fee <osKernelSysTick>
 80061e0:	1b40      	subs	r0, r0, r5
 80061e2:	42a0      	cmp	r0, r4
 80061e4:	d902      	bls.n	80061ec <SD_CheckStatusWithTimeout.constprop.2+0x1c>
  return -1;
 80061e6:	f04f 30ff 	mov.w	r0, #4294967295
 80061ea:	e003      	b.n	80061f4 <SD_CheckStatusWithTimeout.constprop.2+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80061ec:	f7ff fd02 	bl	8005bf4 <BSP_SD_GetCardState>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d1f3      	bne.n	80061dc <SD_CheckStatusWithTimeout.constprop.2+0xc>
}
 80061f4:	bd38      	pop	{r3, r4, r5, pc}
	...

080061f8 <SD_write>:
{
 80061f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061fc:	b085      	sub	sp, #20
 80061fe:	460c      	mov	r4, r1
 8006200:	4617      	mov	r7, r2
 8006202:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006204:	f7ff ffe4 	bl	80061d0 <SD_CheckStatusWithTimeout.constprop.2>
 8006208:	2800      	cmp	r0, #0
 800620a:	da03      	bge.n	8006214 <SD_write+0x1c>
    return res;
 800620c:	2001      	movs	r0, #1
} 
 800620e:	b005      	add	sp, #20
 8006210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!((uint32_t)buff & 0x3))
 8006214:	07a3      	lsls	r3, r4, #30
 8006216:	d00a      	beq.n	800622e <SD_write+0x36>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8006218:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80062b0 <SD_write+0xb8>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800621c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80062ac <SD_write+0xb4>
  if (!((uint32_t)buff & 0x3))
 8006220:	2500      	movs	r5, #0
    for (i = 0; i < count; i++) {
 8006222:	42b5      	cmp	r5, r6
 8006224:	eb05 0107 	add.w	r1, r5, r7
 8006228:	d123      	bne.n	8006272 <SD_write+0x7a>
    if ((i == count) && (ret == MSD_OK))
 800622a:	2000      	movs	r0, #0
 800622c:	e7ef      	b.n	800620e <SD_write+0x16>
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800622e:	4632      	mov	r2, r6
 8006230:	4639      	mov	r1, r7
 8006232:	4620      	mov	r0, r4
 8006234:	f7ff fcd0 	bl	8005bd8 <BSP_SD_WriteBlocks_DMA>
 8006238:	2800      	cmp	r0, #0
 800623a:	d1e7      	bne.n	800620c <SD_write+0x14>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800623c:	4b1b      	ldr	r3, [pc, #108]	; (80062ac <SD_write+0xb4>)
 800623e:	f247 5230 	movw	r2, #30000	; 0x7530
 8006242:	6819      	ldr	r1, [r3, #0]
 8006244:	a801      	add	r0, sp, #4
 8006246:	f7fd ffb5 	bl	80041b4 <osMessageGet>
      if (event.status == osEventMessage)
 800624a:	9b01      	ldr	r3, [sp, #4]
 800624c:	2b10      	cmp	r3, #16
 800624e:	d1dd      	bne.n	800620c <SD_write+0x14>
        if (event.value.v == WRITE_CPLT_MSG)
 8006250:	9b02      	ldr	r3, [sp, #8]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d1da      	bne.n	800620c <SD_write+0x14>
          timer = osKernelSysTick() + SD_TIMEOUT;
 8006256:	f7fd feca 	bl	8003fee <osKernelSysTick>
 800625a:	f500 44ea 	add.w	r4, r0, #29952	; 0x7500
 800625e:	3430      	adds	r4, #48	; 0x30
          while(timer > osKernelSysTick())
 8006260:	f7fd fec5 	bl	8003fee <osKernelSysTick>
 8006264:	4284      	cmp	r4, r0
 8006266:	d9d1      	bls.n	800620c <SD_write+0x14>
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006268:	f7ff fcc4 	bl	8005bf4 <BSP_SD_GetCardState>
 800626c:	2800      	cmp	r0, #0
 800626e:	d1f7      	bne.n	8006260 <SD_write+0x68>
 8006270:	e7cd      	b.n	800620e <SD_write+0x16>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8006272:	2201      	movs	r2, #1
 8006274:	480e      	ldr	r0, [pc, #56]	; (80062b0 <SD_write+0xb8>)
 8006276:	f7ff fcaf 	bl	8005bd8 <BSP_SD_WriteBlocks_DMA>
      if (ret == MSD_OK) {
 800627a:	2800      	cmp	r0, #0
 800627c:	d1c6      	bne.n	800620c <SD_write+0x14>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800627e:	f247 5230 	movw	r2, #30000	; 0x7530
 8006282:	f8d9 1000 	ldr.w	r1, [r9]
 8006286:	a801      	add	r0, sp, #4
 8006288:	f7fd ff94 	bl	80041b4 <osMessageGet>
        if (event.status == osEventMessage) {
 800628c:	9b01      	ldr	r3, [sp, #4]
 800628e:	2b10      	cmp	r3, #16
 8006290:	d10a      	bne.n	80062a8 <SD_write+0xb0>
          if (event.value.v == WRITE_CPLT_MSG) {
 8006292:	9b02      	ldr	r3, [sp, #8]
 8006294:	2b02      	cmp	r3, #2
 8006296:	d107      	bne.n	80062a8 <SD_write+0xb0>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8006298:	4620      	mov	r0, r4
 800629a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800629e:	4641      	mov	r1, r8
 80062a0:	f000 fa14 	bl	80066cc <memcpy>
            buff += BLOCKSIZE;
 80062a4:	f504 7400 	add.w	r4, r4, #512	; 0x200
    for (i = 0; i < count; i++) {
 80062a8:	3501      	adds	r5, #1
 80062aa:	e7ba      	b.n	8006222 <SD_write+0x2a>
 80062ac:	2000c01c 	.word	0x2000c01c
 80062b0:	2000c020 	.word	0x2000c020

080062b4 <SD_read>:
{
 80062b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062b8:	b085      	sub	sp, #20
 80062ba:	460c      	mov	r4, r1
 80062bc:	4617      	mov	r7, r2
 80062be:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80062c0:	f7ff ff86 	bl	80061d0 <SD_CheckStatusWithTimeout.constprop.2>
 80062c4:	2800      	cmp	r0, #0
 80062c6:	da03      	bge.n	80062d0 <SD_read+0x1c>
    return res;
 80062c8:	2001      	movs	r0, #1
} 
 80062ca:	b005      	add	sp, #20
 80062cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!((uint32_t)buff & 0x3))
 80062d0:	07a3      	lsls	r3, r4, #30
 80062d2:	d00a      	beq.n	80062ea <SD_read+0x36>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80062d4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8006358 <SD_read+0xa4>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80062d8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8006354 <SD_read+0xa0>
  if (!((uint32_t)buff & 0x3))
 80062dc:	2500      	movs	r5, #0
    for (i = 0; i < count; i++) {
 80062de:	42b5      	cmp	r5, r6
 80062e0:	eb05 0107 	add.w	r1, r5, r7
 80062e4:	d118      	bne.n	8006318 <SD_read+0x64>
    if ((i == count) && (ret == MSD_OK))
 80062e6:	2000      	movs	r0, #0
 80062e8:	e7ef      	b.n	80062ca <SD_read+0x16>
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80062ea:	4632      	mov	r2, r6
 80062ec:	4639      	mov	r1, r7
 80062ee:	4620      	mov	r0, r4
 80062f0:	f7ff fc64 	bl	8005bbc <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d1e7      	bne.n	80062c8 <SD_read+0x14>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80062f8:	4b16      	ldr	r3, [pc, #88]	; (8006354 <SD_read+0xa0>)
 80062fa:	f247 5230 	movw	r2, #30000	; 0x7530
 80062fe:	6819      	ldr	r1, [r3, #0]
 8006300:	a801      	add	r0, sp, #4
 8006302:	f7fd ff57 	bl	80041b4 <osMessageGet>
      if (event.status == osEventMessage) {
 8006306:	9b01      	ldr	r3, [sp, #4]
 8006308:	2b10      	cmp	r3, #16
 800630a:	d1dd      	bne.n	80062c8 <SD_read+0x14>
    return res;
 800630c:	9802      	ldr	r0, [sp, #8]
 800630e:	f110 30ff 	adds.w	r0, r0, #4294967295
 8006312:	bf18      	it	ne
 8006314:	2001      	movne	r0, #1
 8006316:	e7d8      	b.n	80062ca <SD_read+0x16>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8006318:	2201      	movs	r2, #1
 800631a:	480f      	ldr	r0, [pc, #60]	; (8006358 <SD_read+0xa4>)
 800631c:	f7ff fc4e 	bl	8005bbc <BSP_SD_ReadBlocks_DMA>
      if (ret == MSD_OK) {
 8006320:	2800      	cmp	r0, #0
 8006322:	d1d1      	bne.n	80062c8 <SD_read+0x14>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006324:	f247 5230 	movw	r2, #30000	; 0x7530
 8006328:	f8d9 1000 	ldr.w	r1, [r9]
 800632c:	a801      	add	r0, sp, #4
 800632e:	f7fd ff41 	bl	80041b4 <osMessageGet>
        if (event.status == osEventMessage) {
 8006332:	9b01      	ldr	r3, [sp, #4]
 8006334:	2b10      	cmp	r3, #16
 8006336:	d10a      	bne.n	800634e <SD_read+0x9a>
          if (event.value.v == READ_CPLT_MSG) {
 8006338:	9b02      	ldr	r3, [sp, #8]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d107      	bne.n	800634e <SD_read+0x9a>
            memcpy(buff, scratch, BLOCKSIZE);
 800633e:	4620      	mov	r0, r4
 8006340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006344:	4641      	mov	r1, r8
 8006346:	f000 f9c1 	bl	80066cc <memcpy>
            buff += BLOCKSIZE;
 800634a:	f504 7400 	add.w	r4, r4, #512	; 0x200
    for (i = 0; i < count; i++) {
 800634e:	3501      	adds	r5, #1
 8006350:	e7c5      	b.n	80062de <SD_read+0x2a>
 8006352:	bf00      	nop
 8006354:	2000c01c 	.word	0x2000c01c
 8006358:	2000c020 	.word	0x2000c020

0800635c <BSP_SD_WriteCpltCallback>:
  
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 800635c:	4b03      	ldr	r3, [pc, #12]	; (800636c <BSP_SD_WriteCpltCallback+0x10>)
 800635e:	f04f 32ff 	mov.w	r2, #4294967295
 8006362:	2102      	movs	r1, #2
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	f7fd befd 	b.w	8004164 <osMessagePut>
 800636a:	bf00      	nop
 800636c:	2000c01c 	.word	0x2000c01c

08006370 <BSP_SD_ReadCpltCallback>:
{
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8006370:	4b03      	ldr	r3, [pc, #12]	; (8006380 <BSP_SD_ReadCpltCallback+0x10>)
 8006372:	f04f 32ff 	mov.w	r2, #4294967295
 8006376:	2101      	movs	r1, #1
 8006378:	6818      	ldr	r0, [r3, #0]
 800637a:	f7fd bef3 	b.w	8004164 <osMessagePut>
 800637e:	bf00      	nop
 8006380:	2000c01c 	.word	0x2000c01c

08006384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006384:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006386:	4b0f      	ldr	r3, [pc, #60]	; (80063c4 <HAL_MspInit+0x40>)
 8006388:	2200      	movs	r2, #0
 800638a:	9200      	str	r2, [sp, #0]
 800638c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800638e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8006392:	6459      	str	r1, [r3, #68]	; 0x44
 8006394:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006396:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800639a:	9100      	str	r1, [sp, #0]
 800639c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800639e:	9201      	str	r2, [sp, #4]
 80063a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80063a2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80063a6:	6419      	str	r1, [r3, #64]	; 0x40
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ae:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80063b0:	210f      	movs	r1, #15
 80063b2:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80063b6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80063b8:	f7fa f8fc 	bl	80005b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063bc:	b003      	add	sp, #12
 80063be:	f85d fb04 	ldr.w	pc, [sp], #4
 80063c2:	bf00      	nop
 80063c4:	40023800 	.word	0x40023800

080063c8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80063c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063cc:	4606      	mov	r6, r0
 80063ce:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063d0:	2214      	movs	r2, #20
 80063d2:	2100      	movs	r1, #0
 80063d4:	a803      	add	r0, sp, #12
 80063d6:	f000 f984 	bl	80066e2 <memset>
  if(hsd->Instance==SDIO)
 80063da:	6832      	ldr	r2, [r6, #0]
 80063dc:	4b4c      	ldr	r3, [pc, #304]	; (8006510 <HAL_SD_MspInit+0x148>)
 80063de:	429a      	cmp	r2, r3
 80063e0:	f040 8093 	bne.w	800650a <HAL_SD_MspInit+0x142>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80063e4:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80063e8:	2500      	movs	r5, #0
 80063ea:	9500      	str	r5, [sp, #0]
 80063ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063ee:	4849      	ldr	r0, [pc, #292]	; (8006514 <HAL_SD_MspInit+0x14c>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 80063f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063f4:	645a      	str	r2, [r3, #68]	; 0x44
 80063f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063f8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80063fc:	9200      	str	r2, [sp, #0]
 80063fe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006400:	9501      	str	r5, [sp, #4]
 8006402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006404:	f042 0204 	orr.w	r2, r2, #4
 8006408:	631a      	str	r2, [r3, #48]	; 0x30
 800640a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800640c:	f002 0204 	and.w	r2, r2, #4
 8006410:	9201      	str	r2, [sp, #4]
 8006412:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006414:	9502      	str	r5, [sp, #8]
 8006416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006418:	f042 0208 	orr.w	r2, r2, #8
 800641c:	631a      	str	r2, [r3, #48]	; 0x30
 800641e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006420:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006424:	240c      	movs	r4, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006426:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006428:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800642a:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800642e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006430:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9 
 8006432:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006436:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9 
 800643a:	9303      	str	r3, [sp, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800643c:	f04f 0804 	mov.w	r8, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006440:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006444:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006446:	f7fa fc63 	bl	8000d10 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800644a:	eb0d 0104 	add.w	r1, sp, r4
 800644e:	4832      	ldr	r0, [pc, #200]	; (8006518 <HAL_SD_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006450:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006452:	f8cd 800c 	str.w	r8, [sp, #12]

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006456:	4c31      	ldr	r4, [pc, #196]	; (800651c <HAL_SD_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006458:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800645c:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800645e:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006460:	f7fa fc56 	bl	8000d10 <HAL_GPIO_Init>
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006464:	4b2e      	ldr	r3, [pc, #184]	; (8006520 <HAL_SD_MspInit+0x158>)
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006466:	60a5      	str	r5, [r4, #8]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006468:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
 800646c:	e884 4008 	stmia.w	r4, {r3, lr}
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006474:	6123      	str	r3, [r4, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800647a:	6163      	str	r3, [r4, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800647c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006480:	61a3      	str	r3, [r4, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006482:	2320      	movs	r3, #32
 8006484:	61e3      	str	r3, [r4, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006486:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800648a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800648c:	4620      	mov	r0, r4
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800648e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006492:	60e5      	str	r5, [r4, #12]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006494:	6225      	str	r5, [r4, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006496:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800649a:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800649c:	6323      	str	r3, [r4, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800649e:	f7fa f8e1 	bl	8000664 <HAL_DMA_Init>
 80064a2:	b108      	cbz	r0, 80064a8 <HAL_SD_MspInit+0xe0>
    {
      Error_Handler();
 80064a4:	f7ff fe32 	bl	800610c <Error_Handler>
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064a8:	4b1e      	ldr	r3, [pc, #120]	; (8006524 <HAL_SD_MspInit+0x15c>)
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80064aa:	63f4      	str	r4, [r6, #60]	; 0x3c
 80064ac:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80064ae:	4c1e      	ldr	r4, [pc, #120]	; (8006528 <HAL_SD_MspInit+0x160>)
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064b0:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 80064b4:	2740      	movs	r7, #64	; 0x40
 80064b6:	e884 00a8 	stmia.w	r4, {r3, r5, r7}
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064ba:	2300      	movs	r3, #0
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80064bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064c0:	60e3      	str	r3, [r4, #12]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80064c2:	6223      	str	r3, [r4, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80064c4:	2304      	movs	r3, #4
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80064c6:	6122      	str	r2, [r4, #16]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80064c8:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80064ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80064ce:	2303      	movs	r3, #3
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80064d0:	6162      	str	r2, [r4, #20]
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80064d2:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80064d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80064d8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80064dc:	61a2      	str	r2, [r4, #24]
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80064de:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80064e0:	2220      	movs	r2, #32
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80064e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80064e6:	4620      	mov	r0, r4
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80064e8:	61e2      	str	r2, [r4, #28]
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80064ea:	6323      	str	r3, [r4, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80064ec:	f7fa f8ba 	bl	8000664 <HAL_DMA_Init>
 80064f0:	b108      	cbz	r0, 80064f6 <HAL_SD_MspInit+0x12e>
    {
      Error_Handler();
 80064f2:	f7ff fe0b 	bl	800610c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 80064f6:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80064f8:	6434      	str	r4, [r6, #64]	; 0x40
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 80064fa:	2200      	movs	r2, #0
 80064fc:	2105      	movs	r1, #5
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80064fe:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8006500:	f7fa f858 	bl	80005b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006504:	2031      	movs	r0, #49	; 0x31
 8006506:	f7fa f889 	bl	800061c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800650a:	b009      	add	sp, #36	; 0x24
 800650c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006510:	40012c00 	.word	0x40012c00
 8006514:	40020800 	.word	0x40020800
 8006518:	40020c00 	.word	0x40020c00
 800651c:	2000e2fc 	.word	0x2000e2fc
 8006520:	40026458 	.word	0x40026458
 8006524:	400264a0 	.word	0x400264a0
 8006528:	2000e360 	.word	0x2000e360

0800652c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800652c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800652e:	4601      	mov	r1, r0
{
 8006530:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8006532:	2200      	movs	r2, #0
 8006534:	2036      	movs	r0, #54	; 0x36
 8006536:	f7fa f83d 	bl	80005b4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800653a:	2036      	movs	r0, #54	; 0x36
 800653c:	f7fa f86e 	bl	800061c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006540:	2500      	movs	r5, #0
 8006542:	4b15      	ldr	r3, [pc, #84]	; (8006598 <HAL_InitTick+0x6c>)
 8006544:	9502      	str	r5, [sp, #8]
 8006546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006548:	4c14      	ldr	r4, [pc, #80]	; (800659c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800654a:	f042 0210 	orr.w	r2, r2, #16
 800654e:	641a      	str	r2, [r3, #64]	; 0x40
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	f003 0310 	and.w	r3, r3, #16
 8006556:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006558:	a901      	add	r1, sp, #4
 800655a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800655c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800655e:	f7fa fde3 	bl	8001128 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006562:	f7fa fdd1 	bl	8001108 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8006566:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <HAL_InitTick+0x74>)
 8006568:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800656a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800656e:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006570:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006572:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <HAL_InitTick+0x78>)
 8006574:	fbb0 f0f3 	udiv	r0, r0, r3
 8006578:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800657a:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800657c:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 800657e:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006580:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006582:	f7fb fffd 	bl	8002580 <HAL_TIM_Base_Init>
 8006586:	b920      	cbnz	r0, 8006592 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8006588:	4620      	mov	r0, r4
 800658a:	f7fb fedc 	bl	8002346 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800658e:	b009      	add	sp, #36	; 0x24
 8006590:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8006592:	2001      	movs	r0, #1
 8006594:	e7fb      	b.n	800658e <HAL_InitTick+0x62>
 8006596:	bf00      	nop
 8006598:	40023800 	.word	0x40023800
 800659c:	2000e444 	.word	0x2000e444
 80065a0:	40001000 	.word	0x40001000
 80065a4:	000f4240 	.word	0x000f4240

080065a8 <NMI_Handler>:
 80065a8:	4770      	bx	lr

080065aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065aa:	e7fe      	b.n	80065aa <HardFault_Handler>

080065ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065ac:	e7fe      	b.n	80065ac <MemManage_Handler>

080065ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065ae:	e7fe      	b.n	80065ae <BusFault_Handler>

080065b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065b0:	e7fe      	b.n	80065b0 <UsageFault_Handler>

080065b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80065b2:	4770      	bx	lr

080065b4 <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80065b4:	4801      	ldr	r0, [pc, #4]	; (80065bc <SDIO_IRQHandler+0x8>)
 80065b6:	f7fb bdf1 	b.w	800219c <HAL_SD_IRQHandler>
 80065ba:	bf00      	nop
 80065bc:	2000e3c0 	.word	0x2000e3c0

080065c0 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80065c0:	4801      	ldr	r0, [pc, #4]	; (80065c8 <TIM6_DAC_IRQHandler+0x8>)
 80065c2:	f7fb bed4 	b.w	800236e <HAL_TIM_IRQHandler>
 80065c6:	bf00      	nop
 80065c8:	2000e444 	.word	0x2000e444

080065cc <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80065cc:	4801      	ldr	r0, [pc, #4]	; (80065d4 <DMA2_Stream3_IRQHandler+0x8>)
 80065ce:	f7fa b917 	b.w	8000800 <HAL_DMA_IRQHandler>
 80065d2:	bf00      	nop
 80065d4:	2000e2fc 	.word	0x2000e2fc

080065d8 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80065d8:	4801      	ldr	r0, [pc, #4]	; (80065e0 <DMA2_Stream6_IRQHandler+0x8>)
 80065da:	f7fa b911 	b.w	8000800 <HAL_DMA_IRQHandler>
 80065de:	bf00      	nop
 80065e0:	2000e360 	.word	0x2000e360

080065e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065e4:	490f      	ldr	r1, [pc, #60]	; (8006624 <SystemInit+0x40>)
 80065e6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80065ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80065f2:	4b0d      	ldr	r3, [pc, #52]	; (8006628 <SystemInit+0x44>)
 80065f4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80065f6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80065f8:	f042 0201 	orr.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80065fe:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006606:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800660a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800660c:	4a07      	ldr	r2, [pc, #28]	; (800662c <SystemInit+0x48>)
 800660e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006616:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006618:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800661a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800661e:	608b      	str	r3, [r1, #8]
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	e000ed00 	.word	0xe000ed00
 8006628:	40023800 	.word	0x40023800
 800662c:	24003010 	.word	0x24003010

08006630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006668 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006634:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006636:	e003      	b.n	8006640 <LoopCopyDataInit>

08006638 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006638:	4b0c      	ldr	r3, [pc, #48]	; (800666c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800663a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800663c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800663e:	3104      	adds	r1, #4

08006640 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006640:	480b      	ldr	r0, [pc, #44]	; (8006670 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006642:	4b0c      	ldr	r3, [pc, #48]	; (8006674 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006644:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006646:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006648:	d3f6      	bcc.n	8006638 <CopyDataInit>
  ldr  r2, =_sbss
 800664a:	4a0b      	ldr	r2, [pc, #44]	; (8006678 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800664c:	e002      	b.n	8006654 <LoopFillZerobss>

0800664e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800664e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006650:	f842 3b04 	str.w	r3, [r2], #4

08006654 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006654:	4b09      	ldr	r3, [pc, #36]	; (800667c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006656:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006658:	d3f9      	bcc.n	800664e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800665a:	f7ff ffc3 	bl	80065e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800665e:	f000 f811 	bl	8006684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006662:	f7ff fcc3 	bl	8005fec <main>
  bx  lr    
 8006666:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006668:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800666c:	08006824 	.word	0x08006824
  ldr  r0, =_sdata
 8006670:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006674:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8006678:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800667c:	2000e484 	.word	0x2000e484

08006680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006680:	e7fe      	b.n	8006680 <ADC_IRQHandler>
	...

08006684 <__libc_init_array>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	4e0d      	ldr	r6, [pc, #52]	; (80066bc <__libc_init_array+0x38>)
 8006688:	4c0d      	ldr	r4, [pc, #52]	; (80066c0 <__libc_init_array+0x3c>)
 800668a:	1ba4      	subs	r4, r4, r6
 800668c:	10a4      	asrs	r4, r4, #2
 800668e:	2500      	movs	r5, #0
 8006690:	42a5      	cmp	r5, r4
 8006692:	d109      	bne.n	80066a8 <__libc_init_array+0x24>
 8006694:	4e0b      	ldr	r6, [pc, #44]	; (80066c4 <__libc_init_array+0x40>)
 8006696:	4c0c      	ldr	r4, [pc, #48]	; (80066c8 <__libc_init_array+0x44>)
 8006698:	f000 f82c 	bl	80066f4 <_init>
 800669c:	1ba4      	subs	r4, r4, r6
 800669e:	10a4      	asrs	r4, r4, #2
 80066a0:	2500      	movs	r5, #0
 80066a2:	42a5      	cmp	r5, r4
 80066a4:	d105      	bne.n	80066b2 <__libc_init_array+0x2e>
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066ac:	4798      	blx	r3
 80066ae:	3501      	adds	r5, #1
 80066b0:	e7ee      	b.n	8006690 <__libc_init_array+0xc>
 80066b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066b6:	4798      	blx	r3
 80066b8:	3501      	adds	r5, #1
 80066ba:	e7f2      	b.n	80066a2 <__libc_init_array+0x1e>
 80066bc:	0800681c 	.word	0x0800681c
 80066c0:	0800681c 	.word	0x0800681c
 80066c4:	0800681c 	.word	0x0800681c
 80066c8:	08006820 	.word	0x08006820

080066cc <memcpy>:
 80066cc:	b510      	push	{r4, lr}
 80066ce:	1e43      	subs	r3, r0, #1
 80066d0:	440a      	add	r2, r1
 80066d2:	4291      	cmp	r1, r2
 80066d4:	d100      	bne.n	80066d8 <memcpy+0xc>
 80066d6:	bd10      	pop	{r4, pc}
 80066d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066e0:	e7f7      	b.n	80066d2 <memcpy+0x6>

080066e2 <memset>:
 80066e2:	4402      	add	r2, r0
 80066e4:	4603      	mov	r3, r0
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d100      	bne.n	80066ec <memset+0xa>
 80066ea:	4770      	bx	lr
 80066ec:	f803 1b01 	strb.w	r1, [r3], #1
 80066f0:	e7f9      	b.n	80066e6 <memset+0x4>
	...

080066f4 <_init>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	bf00      	nop
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr

08006700 <_fini>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	bf00      	nop
 8006704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006706:	bc08      	pop	{r3}
 8006708:	469e      	mov	lr, r3
 800670a:	4770      	bx	lr
